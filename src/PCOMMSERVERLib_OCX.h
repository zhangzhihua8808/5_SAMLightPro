// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 2016/10/23 19:34:00 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Windows\SysWOW64\PcommServer.exe (1)
// LIBID: {50ECCF67-B73C-431B-A53D-9EDDAF3CE611}
// LCID: 0
// Helpfile: 
// HelpString: PcommServer 1.0 Type Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// ************************************************************************ //
#ifndef   PCOMMSERVERLib_OCXH
#define   PCOMMSERVERLib_OCXH

#pragma option push -b -w-inl

#include <olectrls.hpp>
#include <oleserver.hpp>
#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if !defined(_NO_VCL)
#include <stdvcl.hpp>
#endif  //   _NO_VCL
#include <ocxproxy.h>

#include "PCOMMSERVERLib_TLB.h"
namespace Pcommserverlib_tlb
{

// *********************************************************************//
// HelpString: PcommServer 1.0 Type Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TPmacDevice
// Help String      : PmacDevice Class
// Default Interface: IPmacDevice
// Def. Intf. Object: TCOMIPmacDevice
// Def. Intf. DISP? : No
// Event   Interface: _IPmacDeviceEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//

// *********************************************************************//
// Definition of closures to allow VCL handlers to catch OCX events.      
// *********************************************************************//
typedef void __fastcall (__closure * TPmacDeviceMessage)(System::TObject * Sender, 
                                                         long Device, BSTR Msg, 
                                                         VARIANT_BOOL bNewLine);
typedef void __fastcall (__closure * TPmacDeviceProgress)(System::TObject * Sender, 
                                                          long Device, long dwPercent);
typedef void __fastcall (__closure * TPmacDeviceError)(System::TObject * Sender, 
                                                       long Device, BSTR FileName, long ErrorID, 
                                                       long LineNum, BSTR Line);
typedef void __fastcall (__closure * TPmacDeviceInterrupt)(System::TObject * Sender, 
                                                           long Device, long lLevel);
typedef void __fastcall (__closure * TPmacDeviceUnsolicited)(System::TObject * Sender, 
                                                             long Device, BSTR Msg);
typedef void __fastcall (__closure * TPmacDeviceDataReady)(System::TObject * Sender, 
                                                           long Device);
//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
// Proxy class to host PmacDevice Class in CBuilder IDE/Applications.
//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
class PACKAGE TPmacDevice : public TOleControl
{
  OVERLOADED_PROP_METHODS;
  static TNoParam  OptParam;
  static GUID      DEF_CTL_INTF;

  // Instance of Closures to expose OCX Events as VCL ones
  //
  TPmacDeviceMessage             FOnMessage;
  TPmacDeviceProgress            FOnProgress;
  TPmacDeviceError               FOnError;
  TPmacDeviceInterrupt           FOnInterrupt;
  TPmacDeviceUnsolicited         FOnUnsolicited;
  TPmacDeviceDataReady           FOnDataReady;

  // Default Interace of OCX
  //
  TCOMIPmacDevice m_OCXIntf;

  // VCL Property Getters/Setters which delegate to OCX
  //
  long            __fastcall get_DPRSize(long dwDevice/*[in]*/);
  TOLEBOOL        __fastcall get_DPRAvailable(long dwDevice/*[in]*/);
  long            __fastcall get_LastCommError(long dwDevice/*[in]*/);
  TOLEBOOL        __fastcall get_DoChecksums(long dwDevice/*[in]*/);
  void            __fastcall set_DoChecksums(long dwDevice/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  TOLEBOOL        __fastcall get_InBootStrapMode(long dwDevice/*[in]*/);
  TOLEBOOL        __fastcall get_MotionBufferOpen(long dwDevice/*[in]*/);
  TOLEBOOL        __fastcall get_RotaryBufferOpen(long dwDevice/*[in]*/);
  TOLEBOOL        __fastcall get_IsTurbo(long dwDevice/*[in]*/);
  TOLEBOOL        __fastcall get_Downloading(long dwDevice/*[in]*/);
  TOLEBOOL        __fastcall get_IsAnyPlcRunning(long dwDevice/*[in]*/);
  TOLEBOOL        __fastcall get_SysServoError(long dwDevice/*[in]*/);
  TOLEBOOL        __fastcall get_SysReEntryError(long dwDevice/*[in]*/);
  TOLEBOOL        __fastcall get_SysMemChecksumError(long dwDevice/*[in]*/);
  TOLEBOOL        __fastcall get_SysPromChecksumError(long dwDevice/*[in]*/);
  TOLEBOOL        __fastcall get_SysInposition(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  TOLEBOOL        __fastcall get_SysWarnFError(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  TOLEBOOL        __fastcall get_SysFatalFError(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  TOLEBOOL        __fastcall get_SysRuntimeError(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  TOLEBOOL        __fastcall get_SysCircleRadError(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  TOLEBOOL        __fastcall get_SysAmpFaultError(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  TOLEBOOL        __fastcall get_ProgramRunning(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  TOLEBOOL        __fastcall get_ProgramStepping(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  TOLEBOOL        __fastcall get_ProgramContMotion(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  TOLEBOOL        __fastcall get_ProgramContRequest(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  long            __fastcall get_ProgramRemaining(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  TOLEBOOL        __fastcall get_MotionBufOpen(long dwDevice/*[in]*/);
  TOLEBOOL        __fastcall get_ProgramFeedMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  TOLEBOOL        __fastcall get_MotorAmpEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/);
  TOLEBOOL        __fastcall get_MotorWarnFError(long dwDevice/*[in]*/, long mtr/*[in]*/);
  TOLEBOOL        __fastcall get_MotorFatalFError(long dwDevice/*[in]*/, long mtr/*[in]*/);
  TOLEBOOL        __fastcall get_MotorAmpFault(long dwDevice/*[in]*/, long mtr/*[in]*/);
  TOLEBOOL        __fastcall get_MotorOnPositionLimit(long dwDevice/*[in]*/, long mtr/*[in]*/);
  TOLEBOOL        __fastcall get_MotorHomeComplete(long dwDevice/*[in]*/, long mtr/*[in]*/);
  TOLEBOOL        __fastcall get_MotorInPosition(long dwDevice/*[in]*/, long mtr/*[in]*/);
  long            __fastcall get_TimRemInMove(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  long            __fastcall get_TimeRemInTATS(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  TOLEBOOL        __fastcall get_MotorDataBlockError(long dwDevice/*[in]*/, long mtr/*[in]*/);
  TOLEBOOL        __fastcall get_MotorPhased(long dwDevice/*[in]*/, long mtr/*[in]*/);
  TOLEBOOL        __fastcall get_MotorEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/);
  TOLEBOOL        __fastcall get_MotorHandwheelEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/);
  TOLEBOOL        __fastcall get_MotorOpenLoop(long dwDevice/*[in]*/, long mtr/*[in]*/);
  TOLEBOOL        __fastcall get_MotorOnNegLimit(long dwDevice/*[in]*/, long mtr/*[in]*/);
  TOLEBOOL        __fastcall get_MotorOnPosLimit(long dwDevice/*[in]*/, long mtr/*[in]*/);
  TOLEBOOL        __fastcall get_BufferOpen(long dwDevice/*[in]*/);
  long            __fastcall get_GatherPeriod(long dwDevice/*[in]*/);
  void            __fastcall set_GatherPeriod(long dwDevice/*[in]*/, long pVal/*[in]*/);
  TOLEBOOL        __fastcall get_GatherEnabled(long dwDevice/*[in]*/, long num/*[in]*/);
  void            __fastcall set_GatherEnabled(long dwDevice/*[in]*/, long num/*[in]*/, 
                                               VARIANT_BOOL pVal/*[in]*/);
  Pcommserverlib_tlb::DEVGATMODE __fastcall get_GatherMode(long dwDevice/*[in]*/);
  void            __fastcall set_GatherMode(long dwDevice/*[in]*/, 
                                            Pcommserverlib_tlb::DEVGATMODE pVal/*[in]*/);
  double          __fastcall get_GatherSampleTime(long dwDevice/*[in]*/);
  void            __fastcall set_GatherSampleTime(long dwDevice/*[in]*/, double pVal/*[in]*/);
  TOLEBOOL        __fastcall get_InterruptsEnabled(long dwDevice/*[in]*/);
  void            __fastcall set_InterruptsEnabled(long dwDevice/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  long            __fastcall get_InterruptMask(long dwDevice/*[in]*/);
  void            __fastcall set_InterruptMask(long dwDevice/*[in]*/, long pVal/*[in]*/);
  TOLEBOOL        __fastcall get_USMonitoringEnabled(long dwDevice/*[in]*/);
  void            __fastcall set_USMonitoringEnabled(long dwDevice/*[in]*/, 
                                                     VARIANT_BOOL pVal/*[in]*/);
  long            __fastcall get_USMonitoringPeriod(long dwDevice/*[in]*/);
  void            __fastcall set_USMonitoringPeriod(long dwDevice/*[in]*/, long pVal/*[in]*/);
  TOLEBOOL        __fastcall get_DPRMotorRptEnabled(long dwDevice/*[in]*/);
  void            __fastcall set_DPRMotorRptEnabled(long dwDevice/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  long            __fastcall get_DPRMotorRptMask(long dwDevice/*[in]*/);
  void            __fastcall set_DPRMotorRptMask(long dwDevice/*[in]*/, long pVal/*[in]*/);
  long            __fastcall get_DPRMotorRptMSec(long dwDevice/*[in]*/);
  void            __fastcall set_DPRMotorRptMSec(long dwDevice/*[in]*/, long pVal/*[in]*/);
  TOLEBOOL        __fastcall get_DPRCoordRptEnabled(long dwDevice/*[in]*/);
  void            __fastcall set_DPRCoordRptEnabled(long dwDevice/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  long            __fastcall get_DPRCoordRptMSec(long dwDevice/*[in]*/);
  void            __fastcall set_DPRCoordRptMSec(long dwDevice/*[in]*/, long pVal/*[in]*/);
  long            __fastcall get_DPRCoordRptMax(long dwDevice/*[in]*/);
  void            __fastcall set_DPRCoordRptMax(long dwDevice/*[in]*/, long pVal/*[in]*/);
  TOLEBOOL        __fastcall get_DataCollectionEnabled(long dwDevice/*[in]*/);
  long            __fastcall get_DataCollectionResolution(long dwDevice/*[in]*/);

  // Static variables used by all instances of OCX proxy
  //
  static int          EventDispIDs[6];
  static TControlData CControlData;
  static GUID         CTL_DEF_INTF;

  // Method providing access to interface as __property 
  //
  TCOMIPmacDevice __fastcall GetDefaultInterface();
  TCOMIPmacDevice __fastcall GetControlInterface()
  { return GetDefaultInterface(); }

protected:
  void     __fastcall CreateControl  ();
  void     __fastcall InitControlData();

public:
  virtual  __fastcall TPmacDevice(TComponent* AOwner) : TOleControl(AOwner)
  {};
  virtual  __fastcall TPmacDevice(HWND        Parent) : TOleControl(Parent)
  {};

  // OCX methods
  //
  void            __fastcall Open(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall Close(long dwDevice/*[in]*/);
  void            __fastcall DataStart(long dwDevice/*[in]*/, long resolution/*[in]*/, 
                                       long period/*[in]*/);
  void            __fastcall DataStop(long dwDevice/*[in]*/);
  void            __fastcall DataCollect(long dwDevice/*[in]*/, VARIANT* pvArray/*[in,out]*/, 
                                         VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DPRBackGroundVar(long dwDevice/*[in]*/, VARIANT_BOOL bOn/*[in]*/);
  void            __fastcall DPRAddressRange(long dwDevice/*[in]*/, VARIANT_BOOL bUpper/*[in]*/, 
                                             VARIANT_BOOL bPC/*[in]*/, long* pVal/*[out]*/);
  void            __fastcall GetPmacType(long dwDevice/*[in]*/, 
                                         Pcommserverlib_tlb::DEVPMACTYPE* pVal/*[out]*/);
  void            __fastcall DPRVarBufRemove(long dwDevice/*[in]*/, long index/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DPRVarBufRead(long dwDevice/*[in]*/, long h/*[in]*/, 
                                           long entryNum/*[in]*/, VARIANT* pVal/*[in,out]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DPRGetFloat(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                         float* pVal/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DPRGetLong(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                        long* pVal/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DPRVarBufInit(long dwDevice/*[in]*/, VARIANT vAddressArray/*[in]*/, 
                                           VARIANT vTypeArray/*[in]*/, long* pHandle/*[out]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DPRSetFloat(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                         float newVal/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DPRSetLong(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                        long newVal/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DPRVarBufWrite(long dwDevice/*[in]*/, VARIANT vData/*[in]*/, 
                                            VARIANT vAddresses/*[in]*/, VARIANT vTypes/*[in]*/, 
                                            long* pWritten/*[out]*/);
  void            __fastcall DPRFloat(__int64 d/*[in]*/, double scale/*[in]*/, double* pVal/*[out]*/);
  void            __fastcall GetRomVersion(long dwDevice/*[in]*/, BSTR* pVal/*[out]*/);
  void            __fastcall GetRomDate(long dwDevice/*[in]*/, BSTR* pVal/*[out]*/);
  void            __fastcall GetPmacLocation(long dwDevice/*[in]*/, 
                                             Pcommserverlib_tlb::DEVLOCATIONTYPE* pVal/*[out]*/);
  void            __fastcall GetResponse(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                         BSTR* pAnswer/*[out]*/);
  void            __fastcall SelectDevice(long hWindow/*[in]*/, long* pDeviceNumber/*[out]*/, 
                                          VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall SetChecksums(long dwDevice/*[in]*/, VARIANT_BOOL bActive/*[in]*/);
  void            __fastcall GetControlResponse(long dwDevice/*[in]*/, short question/*[in]*/, 
                                                BSTR* pAnswer/*[out]*/);
  void            __fastcall GetLastCommErrorStr(long dwDevice/*[in]*/, BSTR* pVal/*[out]*/);
  void            __fastcall GetMacroIVariableLong(long dwDevice/*[in]*/, long node/*[in]*/, 
                                                   long num/*[in]*/, long def/*[in]*/, 
                                                   long* pVal/*[out]*/);
  void            __fastcall GetIVariableLong(long dwDevice/*[in]*/, long num/*[in]*/, 
                                              long def/*[in]*/, long* pVal/*[out]*/);
  void            __fastcall GetIVariableDouble(long dwDevice/*[in]*/, long num/*[in]*/, 
                                                double def/*[in]*/, double* pVal/*[out]*/);
  void            __fastcall SetIVariableLong(long dwDevice/*[in]*/, long num/*[in]*/, 
                                              long newVal/*[in]*/);
  void            __fastcall SetIVariableDouble(long dwDevice/*[in]*/, long num/*[in]*/, 
                                                double newVal/*[in]*/);
  void            __fastcall GetAsciiComm(long dwDevice/*[in]*/, 
                                          Pcommserverlib_tlb::DEVASCIIMODE* pVal/*[out]*/);
  void            __fastcall SetAsciiComm(long dwDevice/*[in]*/, 
                                          Pcommserverlib_tlb::DEVASCIIMODE newVal/*[in]*/);
  void            __fastcall GetVariableLong(long dwDevice/*[in]*/, short ch/*[in]*/, 
                                             long num/*[in]*/, long def/*[in]*/, long* pVal/*[out]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetVariableDouble(long dwDevice/*[in]*/, short ch/*[in]*/, 
                                               long num/*[in]*/, double def/*[in]*/, 
                                               double* pVal/*[out]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall SetVariableLong(long dwDevice/*[in]*/, short ch/*[in]*/, 
                                             long num/*[in]*/, long newVal/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall SetVariableDouble(long dwDevice/*[in]*/, short ch/*[in]*/, 
                                               long num/*[in]*/, double newVal/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall RestoreLinkList(BSTR firmwareVersion/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall BackupLinkList(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall SetCriticalIVars(long dwDevice/*[in]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetLocAndEnum(long dwDevice/*[in]*/, long* pLoc/*[out]*/, 
                                           long* pEnum/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetProgramInfo(long dwDevice/*[in]*/, VARIANT_BOOL bPlc/*[in]*/, 
                                            long num/*[in]*/, long* pSAdr/*[out]*/, 
                                            long* pFAdr/*[out]*/);
  void            __fastcall DownloadFile(long dwDevice/*[in]*/, BSTR filePath/*[in]*/);
  void            __fastcall AbortDownload(long dwDevice/*[in]*/);
  void            __fastcall DownloadFirmwareFile(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                                                  VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall Download(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                                      VARIANT_BOOL bMacro/*[in]*/, VARIANT_BOOL bMap/*[in]*/, 
                                      VARIANT_BOOL bLog/*[in]*/, VARIANT_BOOL bDnld/*[in]*/, 
                                      VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall CompilePLCC(long dwDevice/*[in]*/, BSTR inFilePath/*[in]*/, 
                                         BSTR outFilePath/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall SendCommand(long dwDevice/*[in]*/, BSTR cmd/*[in]*/, 
                                         long* pstatus/*[out]*/);
  void            __fastcall GetPlcStatus(long dwDevice/*[in]*/, long* pNumPlc/*[out]*/, 
                                          long* pNumPlcc/*[out]*/, long* pI5/*[out]*/);
  void            __fastcall GetFirstPlcc(long dwDevice/*[in]*/, VARIANT_BOOL* pbLoaded/*[out]*/, 
                                          VARIANT_BOOL* pbEnabled/*[out]*/, long* pStartAdr/*[out]*/, 
                                          long* pLastAdr/*[out]*/, long* pSize/*[out]*/, 
                                          VARIANT_BOOL* pbMore/*[out]*/);
  void            __fastcall GetNextPlcc(long dwDevice/*[in]*/, VARIANT_BOOL* pbLoaded/*[out]*/, 
                                         VARIANT_BOOL* pbEnabled/*[out]*/, long* pStartAdr/*[out]*/, 
                                         long* pLastAdr/*[out]*/, long* pSize/*[out]*/, 
                                         VARIANT_BOOL* pbMore/*[out]*/);
  void            __fastcall GetFirstPlc(long dwDevice/*[in]*/, VARIANT_BOOL* pbEnabled/*[out]*/, 
                                         long* pStartAdr/*[out]*/, long* pLastAdr/*[out]*/, 
                                         long* pSize/*[out]*/, VARIANT_BOOL* pbMore/*[out]*/);
  void            __fastcall GetNextPlc(long dwDevice/*[in]*/, VARIANT_BOOL* pbEnabled/*[out]*/, 
                                        long* pStartAdr/*[out]*/, long* pLastAdr/*[out]*/, 
                                        long* pSize/*[out]*/, VARIANT_BOOL* pbMore/*[out]*/);
  void            __fastcall GetGlobalStatus(long dwDevice/*[in]*/, long* pStatusX/*[out]*/, 
                                             long* pStatusY/*[out]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetCoordStatus(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                            long* pStatusX/*[out]*/, long* pStatusY/*[out]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetMotorStatus(long dwDevice/*[in]*/, long lMotor/*[in]*/, 
                                            long* pStatusX/*[out]*/, long* pStatusY/*[out]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetCommandedPos(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                             double scale/*[in]*/, double* pVal/*[out]*/);
  void            __fastcall GetPosition(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                         double scale/*[in]*/, double* pVal/*[out]*/);
  void            __fastcall GetNetActualPosition(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                  double scale/*[in]*/, double* pVal/*[out]*/);
  void            __fastcall GetFollowError(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                            double scale/*[in]*/, double* pVal/*[out]*/);
  void            __fastcall GetVelocity(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                         double scale/*[in]*/, double* pVal/*[out]*/);
  void            __fastcall GetMasterPos(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                          double scale/*[in]*/, double* pVal/*[out]*/);
  void            __fastcall GetCompensationPos(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                double scale/*[in]*/, double* pVal/*[out]*/);
  void            __fastcall GetTargetPos(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                          double scale/*[in]*/, double* pVal/*[out]*/);
  void            __fastcall GetBiasPos(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                        double scale/*[in]*/, double* pVal/*[out]*/);
  void            __fastcall GetProgExecPoint(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                              long* pVal/*[out]*/);
  void            __fastcall GetRotBufFull(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                           VARIANT_BOOL* pVal/*[out]*/);
  void            __fastcall SetJogReturn(long dwDevice/*[in]*/, long mtr/*[in]*/);
  void            __fastcall GetWhyMotorNotMoving(long dwDevice/*[in]*/, long motor/*[in]*/, 
                                                  long* pVal/*[out]*/);
  void            __fastcall GetWhyMotorNotMovingStr(long err/*[in]*/, BSTR* pVal/*[in,out]*/);
  void            __fastcall GetWhyCSNotMoving(long dwDevice/*[in]*/, long cs/*[in]*/, 
                                               long* pVal/*[out]*/);
  void            __fastcall GetWhyCSNotMovingStr(long err/*[in]*/, BSTR* pVal/*[in,out]*/);
  void            __fastcall GetNumGatherSources(long dwDevice/*[in]*/, long* pVal/*[out]*/);
  void            __fastcall GetNumGatherSamples(long dwDevice/*[in]*/, long* pVal/*[out]*/);
  void            __fastcall SetGather(long dwDevice/*[in]*/, long num/*[in]*/, BSTR str/*[in]*/, 
                                       VARIANT_BOOL bEnable/*[in]*/, 
                                       VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall SetQuickGather(long dwDevice/*[in]*/, long lComMask/*[in]*/, 
                                            long lEncMask/*[in]*/, long lDacMask/*[in]*/, 
                                            long lCurMask/*[in]*/, VARIANT_BOOL bEnable/*[in]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall SetQuickGatherWithDirectCurrent(long dwDevice/*[in]*/, 
                                                             long lComMask/*[in]*/, 
                                                             long lEncMask/*[in]*/, 
                                                             long lDacMask/*[in]*/, 
                                                             long lCurMask/*[in]*/, 
                                                             VARIANT_BOOL bEnable/*[in]*/, 
                                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetGather(long dwDevice/*[in]*/, long num/*[in]*/, 
                                       BSTR* pStr/*[in,out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall ClearGather(long dwDevice/*[in]*/);
  void            __fastcall InitGather(long dwDevice/*[in]*/, long size/*[in]*/, 
                                        double msec/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall ClearGatherData(long dwDevice/*[in]*/);
  void            __fastcall CollectGatherData(long dwDevice/*[in]*/, long* pSources/*[out]*/, 
                                               long* pSamples/*[out]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetGatherSamples(long dwDevice/*[in]*/, long sourceNum/*[in]*/, 
                                              VARIANT* pVariant/*[in,out]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetGatherPoint(long dwDevice/*[in]*/, long sourceNum/*[in]*/, 
                                            long sampleNum/*[in]*/, double* pVal/*[out]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall StartGather(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall StopGather(long dwDevice/*[in]*/);
  void            __fastcall InitPlotGather(long dwDevice/*[in]*/, long size/*[in]*/, 
                                            long period/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall ReadGatherFile(long dwDevice/*[in]*/, BSTR bsFilePath/*[in]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall WriteGatherFile(long dwDevice/*[in]*/, BSTR bsFilePath/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall strtod48f(BSTR str/*[in]*/, double* pVal/*[out]*/);
  void            __fastcall strtod48l(BSTR str/*[in]*/, double* pVal/*[out]*/);
  void            __fastcall strtod24(BSTR str/*[in]*/, double* pVal/*[out]*/);
  void            __fastcall strtod32dp(BSTR str/*[in]*/, double* pVal/*[out]*/);
  void            __fastcall strto32f(BSTR str/*[in]*/, double* pVal/*[out]*/);
  void            __fastcall UploadMacroConfig(long dwDevice/*[in]*/, BSTR bsFilePath/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DownloadCurrentFeedbackTest(long dwDevice/*[in]*/, short mtr/*[in]*/, 
                                                         double pwmDutyCycle/*[in]*/, 
                                                         short pwmFreq/*[in]*/, 
                                                         VARIANT_BOOL bMacro/*[in]*/, 
                                                         VARIANT_BOOL bUltra/*[in]*/, 
                                                         VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall ReadResultsFromCurrentFeedbackTest(long dwDevice/*[in]*/, 
                                                                short mtr/*[in]*/, 
                                                                long* pVal/*[out]*/);
  void            __fastcall DownloadVoltageSixStepTest(long dwDevice/*[in]*/, short mtr/*[in]*/, 
                                                        double pwmDutyCycle/*[in]*/, 
                                                        VARIANT_BOOL bMacro/*[in]*/, 
                                                        VARIANT_BOOL bUltra/*[in]*/, 
                                                        VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall ReadResultsFromSixStepTest(long dwDevice/*[in]*/, 
                                                        VARIANT_BOOL bSipFirstStep/*[in]*/, 
                                                        VARIANT* pvStepArray/*[in,out]*/, 
                                                        long* pResult/*[out]*/);
  void            __fastcall DownloadCurrentSixStepTest(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                        double pwmDutyCycle/*[in]*/, 
                                                        VARIANT_BOOL bMacro/*[in]*/, 
                                                        VARIANT_BOOL bUltra/*[in]*/, 
                                                        VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DownloadOpenLoopTest(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                  short magnitude/*[in]*/, short time/*[in]*/, 
                                                  short reps/*[in]*/, 
                                                  VARIANT_BOOL bGatherCurrents/*[in]*/, 
                                                  VARIANT_BOOL bMacro/*[in]*/, 
                                                  VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DownloadOpenLoopTest1(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                   short magnitude/*[in]*/, short time/*[in]*/, 
                                                   short reps/*[in]*/, 
                                                   VARIANT_BOOL bGatherCurrents/*[in]*/, 
                                                   VARIANT_BOOL bMacro/*[in]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DownloadVelLimitPLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                 long maxspd/*[in]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DownloadPosLimitPLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DownloadUVWSixStepTest(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                    double pwmDutyCycle/*[in]*/, 
                                                    VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall ReadResultsFromUVWSixStepTest(long dwDevice/*[in]*/, 
                                                           VARIANT* pvArray/*[in,out]*/, 
                                                           long* pResult/*[out]*/);
  void            __fastcall SetIVarForFeedback(long dwDevice/*[in]*/, short ivar/*[in]*/, 
                                                long address/*[in]*/, 
                                                Pcommserverlib_tlb::DEVFEEDBACKTYPE fbType/*[in]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DownloadAndRunRoughPhasePLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                         VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall CreateIncrementalFinePhasePLC(long dwDevice/*[in]*/, 
                                                           BSTR filePath/*[in]*/, 
                                                           short PLCNumber/*[in]*/, 
                                                           short motor/*[in]*/, 
                                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DoACurrentLoopStep(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                short dwellTime/*[in]*/, long magnitude/*[in]*/, 
                                                VARIANT_BOOL bAutoTune/*[in]*/, 
                                                BSTR* pbsCTSCurrent/*[out]*/, 
                                                double pwmDutyCycle/*[in]*/, short divisor/*[in]*/, 
                                                VARIANT_BOOL bUltra/*[in]*/);
  void            __fastcall DoACurrentLoopStepBrush(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                     short dwellTime/*[in]*/, long magnitude/*[in]*/, 
                                                     VARIANT_BOOL bAutoTune/*[in]*/, 
                                                     BSTR* pbsCTSCurrent/*[out]*/, 
                                                     double pwmDutyCycle/*[in]*/, 
                                                     short divisor/*[in]*/, 
                                                     VARIANT_BOOL bUltra/*[in]*/);
  void            __fastcall DoAPositionLoopStep(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                 short stepSize/*[in]*/, short stepTime/*[in]*/, 
                                                 VARIANT_BOOL bBiDirectional/*[in]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DoAParabolicMove(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                              long stepSize/*[in]*/, short stepTime/*[in]*/, 
                                              VARIANT_BOOL bBiDirectional/*[in]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DoAGantryPositionLoopStep(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                       short motor2/*[in]*/, short stepSize/*[in]*/, 
                                                       short stepTime/*[in]*/, 
                                                       VARIANT_BOOL bBiDirectional/*[in]*/, 
                                                       VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DoAGantryParabolicMove(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                    short motor2/*[in]*/, long stepSize/*[in]*/, 
                                                    short stepTime/*[in]*/, 
                                                    VARIANT_BOOL bBiDirectional/*[in]*/, 
                                                    VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DoAGantryParabolic(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                short motor2/*[in]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall ConvertWordToStringFloat(BSTR word/*[in]*/, BSTR* pVal/*[out]*/);
  void            __fastcall ConvertWordToShort(BSTR word/*[in]*/, short offset/*[in]*/, 
                                                short* pVal/*[out]*/);
  void            __fastcall ConvertWordToLong(BSTR word/*[in]*/, long* pVal/*[out]*/);
  void            __fastcall RestoreModifiedIVars(long dwDevice/*[in]*/, short motor/*[in]*/);
  void            __fastcall CalculateStepStatistics(VARIANT* pvData/*[in,out]*/, 
                                                     long stepSize/*[in]*/, long I10/*[in]*/, 
                                                     long I19/*[in]*/, BSTR* pbsRiseTime/*[out]*/, 
                                                     BSTR* pbsPeakTime/*[out]*/, 
                                                     BSTR* pbsNatFreq/*[out]*/, 
                                                     BSTR* pbsOvershoot/*[out]*/, 
                                                     BSTR* pbsDamping/*[out]*/, 
                                                     BSTR* pbsSettleTime/*[out]*/);
  void            __fastcall LowPassFilterTheData(VARIANT* pvData/*[in,out]*/, 
                                                  BSTR bsCurrent/*[in]*/);
  void            __fastcall DifferentiateTheData(VARIANT* pvData/*[in,out]*/, long I10/*[in]*/, 
                                                  long I19/*[in]*/, long* pMinVal/*[out]*/, 
                                                  long* pMaxVal/*[out]*/);
  void            __fastcall DownloadAutoTuningPLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                   VARIANT_BOOL bCurrentLoop/*[in]*/, 
                                                   VARIANT_BOOL bBypassJog/*[in]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DownloadGantryAutoTuningPLCP1(long dwDevice/*[in]*/, 
                                                           short motor/*[in]*/, short motor2/*[in]*/, 
                                                           VARIANT_BOOL bCurrentLoop/*[in]*/, 
                                                           VARIANT_BOOL bBypassJog/*[in]*/, 
                                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DownloadGantryAutoTuningPLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                         short motor2/*[in]*/, 
                                                         VARIANT_BOOL bCurrentLoop/*[in]*/, 
                                                         VARIANT_BOOL bBypassJog/*[in]*/, 
                                                         double MaxTravel/*[in]*/, long time/*[in]*/, 
                                                         VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall MagEstimation(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall SlopeEstimation(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall SetCurrentGather(long dwDevice/*[in]*/, long mask/*[in]*/, 
                                              VARIANT_BOOL bEnable/*[in]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DownloadOpenLoopTestForPMAC1(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                          short magnitude/*[in]*/, 
                                                          short time/*[in]*/, short reps/*[in]*/, 
                                                          VARIANT_BOOL bGatherCurrents/*[in]*/, 
                                                          VARIANT_BOOL bMacro/*[in]*/, 
                                                          VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetMacroNodes(long dwDevice/*[in]*/, long* pNumMacroStations/*[out]*/, 
                                           long* pNumActiveNodes/*[out]*/);
  void            __fastcall GetMacroNodeInfo(long dwDevice/*[in]*/, long modeNum/*[in]*/, 
                                              VARIANT_BOOL* pbEnabled/*[out]*/, 
                                              VARIANT_BOOL* pbIsIONode/*[out]*/, long* pID/*[out]*/);
  void            __fastcall SetMacroIVariableString(long dwDevice/*[in]*/, long node/*[in]*/, 
                                                     long num/*[in]*/, BSTR bsMIVarValue/*[in]*/, 
                                                     VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetMacroIVariableString(long dwDevice/*[in]*/, long node/*[in]*/, 
                                                     long num/*[in]*/, BSTR bsDefault/*[in]*/, 
                                                     BSTR* pbsVal/*[out]*/);
  void            __fastcall GetCommandLogging(long dwDevice/*[in]*/, VARIANT_BOOL* pbON/*[out]*/);
  void            __fastcall SetCommandLogging(long dwDevice/*[in]*/, VARIANT_BOOL bOn/*[in]*/, 
                                               BSTR bsFilePath/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetEnumeration(long dwDevice/*[in]*/, long* pVal/*[out]*/);
  void            __fastcall GetControlValues(long dwDevice/*[in]*/, short ctrlCh/*[in]*/, 
                                              VARIANT* pVariant/*[in,out]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall MultiDownload(long dwDevice/*[in]*/, BSTR outFile/*[in]*/, 
                                           BSTR iniFile/*[in]*/, BSTR userID/*[in]*/, 
                                           VARIANT_BOOL bMacro/*[in]*/, VARIANT_BOOL bMap/*[in]*/, 
                                           VARIANT_BOOL bLog/*[in]*/, VARIANT_BOOL bDnld/*[in]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall AddDownloadFile(long dwDevice/*[in]*/, BSTR iniFile/*[in]*/, 
                                             BSTR userID/*[in]*/, BSTR dlFile/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall RemoveDownloadFile(long dwDevice/*[in]*/, BSTR iniFile/*[in]*/, 
                                                BSTR userID/*[in]*/, BSTR dlFile/*[in]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall RenumberFiles(long dwDevice/*[in]*/, long fileNumber/*[in]*/, 
                                           BSTR iniFile/*[in]*/);
  void            __fastcall GetVariableStr(long dwDevice/*[in]*/, short ch/*[in]*/, 
                                            long num/*[in]*/, BSTR* pVal/*[out]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DPRVarBufReadAll(long dwDevice/*[in]*/, long h/*[in]*/, 
                                              VARIANT* pVal/*[in,out]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall UltraLightAnalyze(long dwDevice/*[in]*/, VARIANT* pVal/*[in,out]*/, 
                                               long* pActiveNodes/*[out]*/);
  void            __fastcall GetPlcStatusStructure(long dwDevice/*[in]*/, VARIANT* pVal/*[in,out]*/, 
                                                   long* pPrograms/*[out]*/);
  void            __fastcall GetBitValue(BSTR hexStr/*[in]*/, short bit/*[in]*/, 
                                         VARIANT_BOOL* pVal/*[out]*/);
  void            __fastcall GetNumDeviceKeys(long* pVal/*[out]*/);
  void            __fastcall DPRGetLongDouble(long dwDevice/*[in]*/, long address/*[in]*/, 
                                              double* pVal/*[out]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DPRGetFixedDouble(long dwDevice/*[in]*/, long address/*[in]*/, 
                                               double* pVal/*[out]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DPRGetShort(long dwDevice/*[in]*/, long address/*[in]*/, 
                                         short* pVal/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DPRSetShort(long dwDevice/*[in]*/, long address/*[in]*/, 
                                         short newVal/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DPRDWordBitSet(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                            long bit/*[in]*/, VARIANT_BOOL* pVal/*[out]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DPRResetDWordBit(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                              long bit/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DPRSetDWordBit(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                            long bit/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetFirmwareType(long dwDevice/*[in]*/, 
                                             Pcommserverlib_tlb::DEVPMACFIRMWARETYPE* pVal/*[out]*/);
  void            __fastcall GetResponseEx(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                           VARIANT_BOOL bAddLF/*[in]*/, BSTR* pAnswer/*[out]*/, 
                                           long* pstatus/*[out]*/);
  void            __fastcall DPRVarBufWriteEx(long dwDevice/*[in]*/, VARIANT vData/*[in]*/, 
                                              long* pWritten/*[out]*/);
  void            __fastcall DPRGetDWordMask(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                             long mask/*[in]*/, long* pVal/*[out]*/);
  void            __fastcall DPRSetDWordMask(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                             long mask/*[in]*/, long Val/*[in]*/);
  void            __fastcall DPRRotBufRemove(long dwDevice/*[in]*/, long bufnum/*[in]*/);
  void            __fastcall DPRRotBufInit(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DPRRotBufClr(long dwDevice/*[in]*/, long bufnum/*[in]*/);
  void            __fastcall DPRSetRotBuf(long dwDevice/*[in]*/, VARIANT_BOOL on/*[in]*/);
  void            __fastcall DPRAsciiStrToRotEx(long dwDevice/*[in]*/, BSTR inpstr/*[in]*/, 
                                                long bufnum/*[in]*/, 
                                                VARIANT_BOOL bSendRemaining/*[in]*/, 
                                                long* pstatus/*[out]*/);
  void            __fastcall DPRAsciiStrToRot(long dwDevice/*[in]*/, BSTR inpstr/*[in]*/, 
                                              long bufnum/*[in]*/, long* pstatus/*[out]*/);
  void            __fastcall GetProgramMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                            Pcommserverlib_tlb::DEVPROGRAMMODE* pVal/*[out]*/);
  void            __fastcall GetProgramMotionMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                  Pcommserverlib_tlb::DEVMOTIONMODE* pVal/*[out]*/);
  void            __fastcall MapDeviceNumToEnum(long location/*[in]*/, long enumeration/*[in]*/, 
                                                long* pDeviceNumber/*[out]*/);
  void            __fastcall MapLocAndEnumFromDeviceNum(long dwDevice/*[in]*/, 
                                                        long* pLocation/*[out]*/, 
                                                        long* pEnumeration/*[out]*/);
  void            __fastcall GetFeedRateAndMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                double* pRate/*[out]*/, VARIANT_BOOL* pMode/*[out]*/);
  void            __fastcall GetMotorMotionMode(long dwDevice/*[in]*/, long dwMotor/*[in]*/, 
                                                Pcommserverlib_tlb::DEVMOTION* pVal/*[out]*/);
  void            __fastcall CommandLog(long dwDevice/*[in]*/, BSTR bStr/*[in]*/, 
                                        VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DPRGetMem(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                       long bytes/*[in]*/, VARIANT* pVal/*[in,out]*/, 
                                       VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DPRSetMem(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                       long bytes/*[in]*/, VARIANT Val/*[in]*/, 
                                       VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetResponseProgress(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                                 VARIANT_BOOL bAddLF/*[in]*/, BSTR* pAnswer/*[out]*/, 
                                                 long* pstatus/*[out]*/);
  void            __fastcall Abort(long dwDevice/*[in]*/);
  void            __fastcall PmacSave(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                      long* pstatus/*[out]*/);
  void            __fastcall PmacReset(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                       VARIANT_BOOL bAsciiRingComm/*[in]*/, long* pstatus/*[out]*/);
  void            __fastcall PhaseMotor(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                        long* pStatuss/*[out]*/);
  void            __fastcall GetControlResponseEx(long dwDevice/*[in]*/, short question/*[in]*/, 
                                                  BSTR* pAnswer/*[out]*/, long* pstatus/*[out]*/);
  void            __fastcall DPRTest(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall AbortTest(long dwDevice/*[in]*/);
  void            __fastcall DPRGetMotorRpt(long dwDevice/*[in]*/, long motor/*[in]*/, 
                                            Pcommserverlib_tlb::DEVFGMOTOR* pStruct/*[in,out]*/, 
                                            long* pServo/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DPRGetMotorRptTurbo(long dwDevice/*[in]*/, long motor/*[in]*/, 
                                                 Pcommserverlib_tlb::DEVFGMOTORTURBO* pStruct/*[in,out]*/, 
                                                 long* pServo/*[out]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DPRGetCoordRpt(long dwDevice/*[in]*/, long coord/*[in]*/, 
                                            Pcommserverlib_tlb::DEVBGCOORD* pStruct/*[in,out]*/, 
                                            long* pServo/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DPRGetCoordRptTurbo(long dwDevice/*[in]*/, long coord/*[in]*/, 
                                                 Pcommserverlib_tlb::DEVBGCOORDTURBO* pStruct/*[in,out]*/, 
                                                 long* pServo/*[out]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall UltraLightAnalyzeStruct(long dwDevice/*[in]*/, 
                                                     Pcommserverlib_tlb::DEVULTRALIGHT_INFO* pStruct/*[in,out]*/, 
                                                     long* pActiveNodes/*[out]*/);
  void            __fastcall GetPlcStatusStruct(long dwDevice/*[in]*/, 
                                                Pcommserverlib_tlb::DEVTOTAL_PLC_STATUS_STRUCT* pStruct/*[in,out]*/, 
                                                long* pPrograms/*[out]*/);
  TOLEBOOL        __fastcall get_DPRTesting(long dwDevice/*[in]*/);
  void            __fastcall RawGetResponseEx(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                              VARIANT_BOOL bAddLF/*[in]*/, BSTR* pAnswer/*[out]*/, 
                                              long* pstatus/*[out]*/);
  void            __fastcall RawGetControlResponseEx(long dwDevice/*[in]*/, short question/*[in]*/, 
                                                     BSTR* pAnswer/*[out]*/, long* pstatus/*[out]*/);
  void            __fastcall ModBusCommand(long dwDevice/*[in]*/, unsigned_char command/*[in]*/, 
                                           VARIANT* counters/*[out]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall ModbusAvailable(long dwDevice/*[in]*/, unsigned_char command/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DPRSetupBuffers(unsigned_long dwDevice/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DPRBackground(long dwDevice/*[in]*/, long on/*[in]*/, 
                                           long period/*[in]*/, long coord/*[in]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetTurboMotorStatusEx(long dwDevice/*[in]*/, long lMotor/*[in]*/, 
                                                   Pcommserverlib_tlb::DEVMSTURBO* pstatus/*[in,out]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetNTMotorStatusEx(long dwDevice/*[in]*/, long lMotor/*[in]*/, 
                                                Pcommserverlib_tlb::DEVMSNONTURBO* pstatus/*[in,out]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetTurboGlobalStatusEx(long dwDevice/*[in]*/, 
                                                    Pcommserverlib_tlb::DEVGSTURBO* pstatus/*[in,out]*/, 
                                                    VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetNTGlobalStatusEx(long dwDevice/*[in]*/, 
                                                 Pcommserverlib_tlb::DEVGSNONTURBO* pstatus/*[in,out]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetTurboCoordinateStatusEx(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                        Pcommserverlib_tlb::DEVCSTURBO* pstatus/*[in,out]*/, 
                                                        VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetNTCoordinateStatusEx(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                     Pcommserverlib_tlb::DEVCSNONTURBO* pstatus/*[in,out]*/, 
                                                     VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall DataGather(long dwDevice/*[in]*/, LPSAFEARRAY* pvArray/*[in,out]*/, 
                                        VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall Upload(long dwDevice/*[in]*/, 
                                    Pcommserverlib_tlb::DEVUPLOAD pUpload/*[in]*/, 
                                    BSTR* pData/*[out]*/, long* pstatus/*[out]*/);
  void            __fastcall ModbusActive(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);

  // OCX properties
  //
  __property long DPRSize[long dwDevice]={ read=get_DPRSize };
  __property TOLEBOOL DPRAvailable[long dwDevice]={ read=get_DPRAvailable };
  __property long LastCommError[long dwDevice]={ read=get_LastCommError };
  __property TOLEBOOL DoChecksums[long dwDevice]={ read=get_DoChecksums };
  __property TOLEBOOL InBootStrapMode[long dwDevice]={ read=get_InBootStrapMode };
  __property TOLEBOOL MotionBufferOpen[long dwDevice]={ read=get_MotionBufferOpen };
  __property TOLEBOOL RotaryBufferOpen[long dwDevice]={ read=get_RotaryBufferOpen };
  __property TOLEBOOL IsTurbo[long dwDevice]={ read=get_IsTurbo };
  __property TOLEBOOL Downloading[long dwDevice]={ read=get_Downloading };
  __property int MaxDownloadErrors={ read=GetIntegerProp, write=SetIntegerProp, index=64 };
  __property TOLEBOOL IsAnyPlcRunning[long dwDevice]={ read=get_IsAnyPlcRunning };
  __property TOLEBOOL SysServoError[long dwDevice]={ read=get_SysServoError };
  __property TOLEBOOL SysReEntryError[long dwDevice]={ read=get_SysReEntryError };
  __property TOLEBOOL SysMemChecksumError[long dwDevice]={ read=get_SysMemChecksumError };
  __property TOLEBOOL SysPromChecksumError[long dwDevice]={ read=get_SysPromChecksumError };
  __property TOLEBOOL SysInposition[long dwDevice][long dwCoord]={ read=get_SysInposition };
  __property TOLEBOOL SysWarnFError[long dwDevice][long dwCoord]={ read=get_SysWarnFError };
  __property TOLEBOOL SysFatalFError[long dwDevice][long dwCoord]={ read=get_SysFatalFError };
  __property TOLEBOOL SysRuntimeError[long dwDevice][long dwCoord]={ read=get_SysRuntimeError };
  __property TOLEBOOL SysCircleRadError[long dwDevice][long dwCoord]={ read=get_SysCircleRadError };
  __property TOLEBOOL SysAmpFaultError[long dwDevice][long dwCoord]={ read=get_SysAmpFaultError };
  __property TOLEBOOL ProgramRunning[long dwDevice][long dwCoord]={ read=get_ProgramRunning };
  __property TOLEBOOL ProgramStepping[long dwDevice][long dwCoord]={ read=get_ProgramStepping };
  __property TOLEBOOL ProgramContMotion[long dwDevice][long dwCoord]={ read=get_ProgramContMotion };
  __property TOLEBOOL ProgramContRequest[long dwDevice][long dwCoord]={ read=get_ProgramContRequest };
  __property long ProgramRemaining[long dwDevice][long dwCoord]={ read=get_ProgramRemaining };
  __property TOLEBOOL MotionBufOpen[long dwDevice]={ read=get_MotionBufOpen };
  __property TOLEBOOL ProgramFeedMode[long dwDevice][long dwCoord]={ read=get_ProgramFeedMode };
  __property TOLEBOOL MotorAmpEnabled[long dwDevice][long mtr]={ read=get_MotorAmpEnabled };
  __property TOLEBOOL MotorWarnFError[long dwDevice][long mtr]={ read=get_MotorWarnFError };
  __property TOLEBOOL MotorFatalFError[long dwDevice][long mtr]={ read=get_MotorFatalFError };
  __property TOLEBOOL MotorAmpFault[long dwDevice][long mtr]={ read=get_MotorAmpFault };
  __property TOLEBOOL MotorOnPositionLimit[long dwDevice][long mtr]={ read=get_MotorOnPositionLimit };
  __property TOLEBOOL MotorHomeComplete[long dwDevice][long mtr]={ read=get_MotorHomeComplete };
  __property TOLEBOOL MotorInPosition[long dwDevice][long mtr]={ read=get_MotorInPosition };
  __property long TimRemInMove[long dwDevice][long dwCoord]={ read=get_TimRemInMove };
  __property long TimeRemInTATS[long dwDevice][long dwCoord]={ read=get_TimeRemInTATS };
  __property TOLEBOOL MotorDataBlockError[long dwDevice][long mtr]={ read=get_MotorDataBlockError };
  __property TOLEBOOL MotorPhased[long dwDevice][long mtr]={ read=get_MotorPhased };
  __property TOLEBOOL MotorEnabled[long dwDevice][long mtr]={ read=get_MotorEnabled };
  __property TOLEBOOL MotorHandwheelEnabled[long dwDevice][long mtr]={ read=get_MotorHandwheelEnabled };
  __property TOLEBOOL MotorOpenLoop[long dwDevice][long mtr]={ read=get_MotorOpenLoop };
  __property TOLEBOOL MotorOnNegLimit[long dwDevice][long mtr]={ read=get_MotorOnNegLimit };
  __property TOLEBOOL MotorOnPosLimit[long dwDevice][long mtr]={ read=get_MotorOnPosLimit };
  __property TOLEBOOL BufferOpen[long dwDevice]={ read=get_BufferOpen };
  __property long GatherPeriod[long dwDevice]={ read=get_GatherPeriod };
  __property TOLEBOOL GatherEnabled[long dwDevice][long num]={ read=get_GatherEnabled };
  __property Pcommserverlib_tlb::DEVGATMODE GatherMode[long dwDevice]={ read=get_GatherMode };
  __property double GatherSampleTime[long dwDevice]={ read=get_GatherSampleTime };
  __property TOLEBOOL InterruptsEnabled[long dwDevice]={ read=get_InterruptsEnabled };
  __property long InterruptMask[long dwDevice]={ read=get_InterruptMask };
  __property TOLEBOOL USMonitoringEnabled[long dwDevice]={ read=get_USMonitoringEnabled };
  __property long USMonitoringPeriod[long dwDevice]={ read=get_USMonitoringPeriod };
  __property TOLEBOOL DPRMotorRptEnabled[long dwDevice]={ read=get_DPRMotorRptEnabled };
  __property long DPRMotorRptMask[long dwDevice]={ read=get_DPRMotorRptMask };
  __property long DPRMotorRptMSec[long dwDevice]={ read=get_DPRMotorRptMSec };
  __property TOLEBOOL DPRCoordRptEnabled[long dwDevice]={ read=get_DPRCoordRptEnabled };
  __property long DPRCoordRptMSec[long dwDevice]={ read=get_DPRCoordRptMSec };
  __property long DPRCoordRptMax[long dwDevice]={ read=get_DPRCoordRptMax };
  __property TOLEBOOL DataCollectionEnabled[long dwDevice]={ read=get_DataCollectionEnabled };
  __property long DataCollectionResolution[long dwDevice]={ read=get_DataCollectionResolution };
  __property TCOMIPmacDevice ControlInterface={ read=GetDefaultInterface };

  // Published properties
  //
__published:

  // Standard/Extended properties
  //

  // OCX properties
  //

  // OCX Events
  //
  __property TPmacDeviceMessage OnMessage={ read=FOnMessage, write=FOnMessage };
  __property TPmacDeviceProgress OnProgress={ read=FOnProgress, write=FOnProgress };
  __property TPmacDeviceError OnError={ read=FOnError, write=FOnError };
  __property TPmacDeviceInterrupt OnInterrupt={ read=FOnInterrupt, write=FOnInterrupt };
  __property TPmacDeviceUnsolicited OnUnsolicited={ read=FOnUnsolicited, write=FOnUnsolicited };
  __property TPmacDeviceDataReady OnDataReady={ read=FOnDataReady, write=FOnDataReady };
};
typedef TPmacDevice  TPmacDeviceProxy;


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TPmacNC
// Help String      : PmacNC Class
// Default Interface: IPmacNC
// Def. Intf. Object: TCOMIPmacNC
// Def. Intf. DISP? : No
// Event   Interface: _IPmacNCEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//

// *********************************************************************//
// Definition of closures to allow VCL handlers to catch OCX events.      
// *********************************************************************//
typedef void __fastcall (__closure * TPmacNCError)(System::TObject * Sender, 
                                                   long Control, 
                                                   Pcommserverlib_tlb::NCERRORMODE ErrMode, 
                                                   Pcommserverlib_tlb::NCERRORTYPE ErrType, 
                                                   long ErrId, long ErrLine, short ErrAxis, 
                                                   BSTR ErrMsg);
typedef void __fastcall (__closure * TPmacNCMessage)(System::TObject * Sender, 
                                                     long Control, BSTR Msg);
typedef void __fastcall (__closure * TPmacNCProgress)(System::TObject * Sender, 
                                                      long Control, long Percent);
typedef void __fastcall (__closure * TPmacNCMessageQuery)(System::TObject * Sender, 
                                                          long Control, long msgID, BSTR Msg);
typedef void __fastcall (__closure * TPmacNCSearchProgress)(System::TObject * Sender, 
                                                            long Control, long Line);
typedef void __fastcall (__closure * TPmacNCChange)(System::TObject * Sender, 
                                                    long Control, long changeID, VARIANT vVal);
typedef void __fastcall (__closure * TPmacNCClearError)(System::TObject * Sender, 
                                                        long Control, 
                                                        Pcommserverlib_tlb::NCERRORMODE ErrMode, 
                                                        Pcommserverlib_tlb::NCERRORTYPE ErrType, 
                                                        long ErrId, long ErrLine, short ErrAxis);
typedef void __fastcall (__closure * TPmacNCDataReady)(System::TObject * Sender, 
                                                       long Control);
//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
// Proxy class to host PmacNC Class in CBuilder IDE/Applications.
//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
class PACKAGE TPmacNC : public TOleControl
{
  OVERLOADED_PROP_METHODS;
  static TNoParam  OptParam;
  static GUID      DEF_CTL_INTF;

  // Instance of Closures to expose OCX Events as VCL ones
  //
  TPmacNCError                   FOnError;
  TPmacNCMessage                 FOnMessage;
  TPmacNCProgress                FOnProgress;
  TPmacNCMessageQuery            FOnMessageQuery;
  TPmacNCSearchProgress          FOnSearchProgress;
  TPmacNCChange                  FOnChange;
  TPmacNCClearError              FOnClearError;
  TPmacNCDataReady               FOnDataReady;

  // Default Interace of OCX
  //
  TCOMIPmacNC m_OCXIntf;

  // VCL Property Getters/Setters which delegate to OCX
  //
  BSTR            __fastcall get_Title(long Control/*[in]*/);
  void            __fastcall set_Title(long Control/*[in]*/, BSTR pVal/*[in]*/);
  long            __fastcall get_DeviceNumber(long Control/*[in]*/);
  TOLEBOOL        __fastcall get_IsOpen(long Control/*[in]*/);
  Pcommserverlib_tlb::NCMODE __fastcall get_mode(long Control/*[in]*/);
  void            __fastcall set_mode(long Control/*[in]*/, Pcommserverlib_tlb::NCMODE pVal/*[in]*/);
  long            __fastcall get_CoordSystem(long Control/*[in]*/);
  void            __fastcall set_CoordSystem(long Control/*[in]*/, long pVal/*[in]*/);
  long            __fastcall get_NumCoordSystems(long Control/*[in]*/);
  TOLEBOOL        __fastcall get_SingleBlock(long Control/*[in]*/);
  void            __fastcall set_SingleBlock(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  TOLEBOOL        __fastcall get_BlockDelete(long Control/*[in]*/);
  void            __fastcall set_BlockDelete(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  TOLEBOOL        __fastcall get_OptionalStop(long Control/*[in]*/);
  void            __fastcall set_OptionalStop(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  TOLEBOOL        __fastcall get_MachineLock(long Control/*[in]*/);
  void            __fastcall set_MachineLock(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  TOLEBOOL        __fastcall get_DryRun(long Control/*[in]*/, long coord/*[in]*/);
  void            __fastcall set_DryRun(long Control/*[in]*/, long coord/*[in]*/, 
                                        VARIANT_BOOL pVal/*[in]*/);
  Pcommserverlib_tlb::NCMACHINETYPE __fastcall get_MachineType(long Control/*[in]*/);
  Pcommserverlib_tlb::NCJOGSELECT __fastcall get_JogSelect(long Control/*[in]*/);
  void            __fastcall set_JogSelect(long Control/*[in]*/, 
                                           Pcommserverlib_tlb::NCJOGSELECT pVal/*[in]*/);
  Pcommserverlib_tlb::NCSPEEDSELECT __fastcall get_SpeedSelect(long Control/*[in]*/);
  void            __fastcall set_SpeedSelect(long Control/*[in]*/, 
                                             Pcommserverlib_tlb::NCSPEEDSELECT pVal/*[in]*/);
  TOLEBOOL        __fastcall get_ProgramLoaded(long Control/*[in]*/, long coord/*[in]*/);
  long            __fastcall get_Semaphore(long Control/*[in]*/, long coord/*[in]*/);
  void            __fastcall set_Semaphore(long Control/*[in]*/, long coord/*[in]*/, 
                                           long pVal/*[in]*/);
  Pcommserverlib_tlb::NCSPEEDSELECT __fastcall get_DistanceSelect(long Control/*[in]*/);
  void            __fastcall set_DistanceSelect(long Control/*[in]*/, 
                                                Pcommserverlib_tlb::NCSPEEDSELECT pVal/*[in]*/);
  Pcommserverlib_tlb::NCAXISSELECT __fastcall get_AxisSelect(long Control/*[in]*/, 
                                                             long coord/*[in]*/);
  void            __fastcall set_AxisSelect(long Control/*[in]*/, long coord/*[in]*/, 
                                            Pcommserverlib_tlb::NCAXISSELECT pVal/*[in]*/);
  Pcommserverlib_tlb::NCBUFFERMODE __fastcall get_BufferMode(long Control/*[in]*/, 
                                                             long coord/*[in]*/);
  void            __fastcall set_BufferMode(long Control/*[in]*/, long coord/*[in]*/, 
                                            Pcommserverlib_tlb::NCBUFFERMODE pVal/*[in]*/);
  Pcommserverlib_tlb::NCSPINDLESELECT __fastcall get_SpindleSelect(long Control/*[in]*/);
  void            __fastcall set_SpindleSelect(long Control/*[in]*/, 
                                               Pcommserverlib_tlb::NCSPINDLESELECT pVal/*[in]*/);
  long            __fastcall get_SpindleRPM(long Control/*[in]*/);
  void            __fastcall set_SpindleRPM(long Control/*[in]*/, long pVal/*[in]*/);
  double          __fastcall get_SpindleCSS(long Control/*[in]*/);
  void            __fastcall set_SpindleCSS(long Control/*[in]*/, double pVal/*[in]*/);
  TOLEBOOL        __fastcall get_SpindleCSSMode(long Control/*[in]*/);
  void            __fastcall set_SpindleCSSMode(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  double          __fastcall get_SpindleCSSUnits(long Control/*[in]*/);
  void            __fastcall set_SpindleCSSUnits(long Control/*[in]*/, double pVal/*[in]*/);
  long            __fastcall get_SpindleMaxRPM(long Control/*[in]*/);
  void            __fastcall set_SpindleMaxRPM(long Control/*[in]*/, long pVal/*[in]*/);
  long            __fastcall get_SpindleOverride(long Control/*[in]*/, long coord/*[in]*/);
  void            __fastcall set_SpindleOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                                 long pVal/*[in]*/);
  double          __fastcall get_FeedrateOverride(long Control/*[in]*/, long coord/*[in]*/);
  void            __fastcall set_FeedrateOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                                  double pVal/*[in]*/);
  double          __fastcall get_RapidOverride(long Control/*[in]*/, long coord/*[in]*/);
  void            __fastcall set_RapidOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                               double pVal/*[in]*/);
  Pcommserverlib_tlb::NCCLNTSELECT __fastcall get_CoolantSelect(long Control/*[in]*/);
  void            __fastcall set_CoolantSelect(long Control/*[in]*/, 
                                               Pcommserverlib_tlb::NCCLNTSELECT pVal/*[in]*/);
  Pcommserverlib_tlb::NCTIMEBASEMODE __fastcall get_TimebaseMode(long Control/*[in]*/, 
                                                                 long coord/*[in]*/);
  void            __fastcall set_TimebaseMode(long Control/*[in]*/, long coord/*[in]*/, 
                                              Pcommserverlib_tlb::NCTIMEBASEMODE pVal/*[in]*/);
  double          __fastcall get_ThreadLead(long Control/*[in]*/, long coord/*[in]*/);
  void            __fastcall set_ThreadLead(long Control/*[in]*/, long coord/*[in]*/, 
                                            double pVal/*[in]*/);
  long            __fastcall get_CurrentToolNumber(long Control/*[in]*/, long coord/*[in]*/);
  void            __fastcall set_CurrentToolNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                   long pVal/*[in]*/);
  long            __fastcall get_NextToolNumber(long Control/*[in]*/, long coord/*[in]*/);
  void            __fastcall set_NextToolNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                long pVal/*[in]*/);
  long            __fastcall get_CurrentToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/);
  void            __fastcall set_CurrentToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                         long pVal/*[in]*/);
  long            __fastcall get_ToolInSpindle(long Control/*[in]*/, long coord/*[in]*/);
  void            __fastcall set_ToolInSpindle(long Control/*[in]*/, long coord/*[in]*/, 
                                               long pVal/*[in]*/);
  Pcommserverlib_tlb::NCTOOLDIRECTION __fastcall get_ToolDirection(long Control/*[in]*/, 
                                                                   long coord/*[in]*/, 
                                                                   long tool/*[in]*/);
  void            __fastcall set_ToolDirection(long Control/*[in]*/, long coord/*[in]*/, 
                                               long tool/*[in]*/, 
                                               Pcommserverlib_tlb::NCTOOLDIRECTION pVal/*[in]*/);
  double          __fastcall get_SpindleCountsPerRev(long Control/*[in]*/);
  void            __fastcall set_SpindleCountsPerRev(long Control/*[in]*/, double pVal/*[in]*/);
  double          __fastcall get_SpindleGearRatio(long Control/*[in]*/);
  void            __fastcall set_SpindleGearRatio(long Control/*[in]*/, double pVal/*[in]*/);
  TOLEBOOL        __fastcall get_SpindleDetect(long Control/*[in]*/);
  void            __fastcall set_SpindleDetect(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  TOLEBOOL        __fastcall get_SpindleAtSpeed(long Control/*[in]*/);
  void            __fastcall set_SpindleAtSpeed(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  TOLEBOOL        __fastcall get_SpindleAtZero(long Control/*[in]*/);
  void            __fastcall set_SpindleAtZero(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  TOLEBOOL        __fastcall get_SpindleFPR(long Control/*[in]*/);
  void            __fastcall set_SpindleFPR(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  TOLEBOOL        __fastcall get_HomeInit(long Control/*[in]*/);
  void            __fastcall set_HomeInit(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  long            __fastcall get_HomeMotorMask(long Control/*[in]*/);
  void            __fastcall set_HomeMotorMask(long Control/*[in]*/, long pVal/*[in]*/);
  long            __fastcall get_PartsRequired(long Control/*[in]*/);
  void            __fastcall set_PartsRequired(long Control/*[in]*/, long pVal/*[in]*/);
  long            __fastcall get_PartsCount(long Control/*[in]*/);
  void            __fastcall set_PartsCount(long Control/*[in]*/, long pVal/*[in]*/);
  long            __fastcall get_PartsTotal(long Control/*[in]*/);
  void            __fastcall set_PartsTotal(long Control/*[in]*/, long pVal/*[in]*/);
  TOLEBOOL        __fastcall get_IsSpindle(long Control/*[in]*/, long coord/*[in]*/, 
                                           long motor/*[in]*/);
  void            __fastcall set_IsSpindle(long Control/*[in]*/, long coord/*[in]*/, 
                                           long motor/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  TOLEBOOL        __fastcall get_IsDisplayed(long Control/*[in]*/, long coord/*[in]*/, 
                                             long motor/*[in]*/);
  void            __fastcall set_IsDisplayed(long Control/*[in]*/, long coord/*[in]*/, 
                                             long motor/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  TOLEBOOL        __fastcall get_HomeInProgress(long Control/*[in]*/);
  long            __fastcall get_SpindleCmdRPM(long Control/*[in]*/);
  Pcommserverlib_tlb::NCERRORMODE __fastcall get_CurrentErrorLevel(long Control/*[in]*/);
  void            __fastcall set_CurrentErrorLevel(long Control/*[in]*/, 
                                                   Pcommserverlib_tlb::NCERRORMODE pVal/*[in]*/);
  long            __fastcall get_CurrentErrorCount(long Control/*[in]*/);
  long            __fastcall get_BlocksPerSecond(long Control/*[in]*/, long coord/*[in]*/);
  TOLEBOOL        __fastcall get_DataCollectionEnabled(long Control/*[in]*/);
  long            __fastcall get_DataCollectionResolution(long Control/*[in]*/);

  // Static variables used by all instances of OCX proxy
  //
  static int          EventDispIDs[8];
  static TControlData CControlData;
  static GUID         CTL_DEF_INTF;

  // Method providing access to interface as __property 
  //
  TCOMIPmacNC __fastcall GetDefaultInterface();
  TCOMIPmacNC __fastcall GetControlInterface()
  { return GetDefaultInterface(); }

protected:
  void     __fastcall CreateControl  ();
  void     __fastcall InitControlData();

public:
  virtual  __fastcall TPmacNC(TComponent* AOwner) : TOleControl(AOwner)
  {};
  virtual  __fastcall TPmacNC(HWND        Parent) : TOleControl(Parent)
  {};

  // OCX methods
  //
  void            __fastcall Open(long Device/*[in]*/, long Control/*[in]*/, 
                                  VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall Close(long Control/*[in]*/);
  void            __fastcall OpenFile(long Control/*[in]*/, long dwCoord/*[in]*/, 
                                      BSTR szFilePath/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall CloseFile(long Control/*[in]*/, long dwCoord/*[in]*/, 
                                       VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall SetMachineMode(long Control/*[in]*/, 
                                            Pcommserverlib_tlb::NCMODE mode/*[in]*/);
  void            __fastcall GetMachineMode(long Control/*[in]*/, 
                                            Pcommserverlib_tlb::NCMODE* pMode/*[out]*/);
  void            __fastcall GetRegistryBool(long Control/*[in]*/, BSTR section/*[in]*/, 
                                             BSTR name/*[in]*/, VARIANT_BOOL def/*[in]*/, 
                                             VARIANT_BOOL* pVal/*[out]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall SetRegistryBool(long Control/*[in]*/, BSTR section/*[in]*/, 
                                             BSTR name/*[in]*/, VARIANT_BOOL bVal/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetRegistryLong(long Control/*[in]*/, BSTR section/*[in]*/, 
                                             BSTR name/*[in]*/, long def/*[in]*/, 
                                             long* pVal/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall SetRegistryLong(long Control/*[in]*/, BSTR section/*[in]*/, 
                                             BSTR name/*[in]*/, long lVal/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetRegistryString(long Control/*[in]*/, BSTR section/*[in]*/, 
                                               BSTR name/*[in]*/, BSTR def/*[in]*/, 
                                               BSTR* pVal/*[in,out]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall SetRegistryString(long Control/*[in]*/, BSTR section/*[in]*/, 
                                               BSTR name/*[in]*/, BSTR Val/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetRegistryDouble(long Control/*[in]*/, BSTR section/*[in]*/, 
                                               BSTR name/*[in]*/, double def/*[in]*/, 
                                               double* pVal/*[out]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall SetRegistryDouble(long Control/*[in]*/, BSTR section/*[in]*/, 
                                               BSTR name/*[in]*/, double Val/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetAxisEnabled(long Control/*[in]*/, long coord/*[in]*/, 
                                            short axis/*[in]*/, VARIANT_BOOL* pVal/*[out]*/);
  void            __fastcall GetProgramName(long Control/*[in]*/, long coord/*[in]*/, 
                                            VARIANT_BOOL bMain/*[in]*/, BSTR* pVal/*[in,out]*/);
  void            __fastcall GetProgramPath(long Control/*[in]*/, long coord/*[in]*/, 
                                            VARIANT_BOOL bMain/*[in]*/, BSTR* pVal/*[in,out]*/);
  void            __fastcall GetProgramStatus(long Control/*[in]*/, long coord/*[in]*/, 
                                              long* pProgID/*[out]*/, long* pNumLines/*[out]*/, 
                                              long* pLine/*[out]*/, long* pParseLine/*[out]*/, 
                                              long* pRepeat/*[out]*/, long* pCount/*[out]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetProgramNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                              long* pVal/*[out]*/);
  void            __fastcall GetCurrentLabel(long Control/*[in]*/, long coord/*[in]*/, 
                                             long* pVal/*[out]*/);
  void            __fastcall GetJogStep(long Control/*[in]*/, long coord/*[in]*/, 
                                        double* pVal/*[out]*/);
  void            __fastcall GetHandleStep(long Control/*[in]*/, long coord/*[in]*/, 
                                           double* pVal/*[out]*/);
  void            __fastcall SetOrigin(long Control/*[in]*/, long coord/*[in]*/, 
                                       VARIANT_BOOL bOrginAll/*[in]*/, 
                                       Pcommserverlib_tlb::NCADDRESS adr/*[in]*/, 
                                       VARIANT_BOOL bClear/*[in]*/, double Val/*[in]*/, 
                                       VARIANT_BOOL metric/*[in]*/);
  void            __fastcall ZeroShift(long Control/*[in]*/, long coord/*[in]*/, 
                                       VARIANT_BOOL bShiftAll/*[in]*/, 
                                       Pcommserverlib_tlb::NCADDRESS adr/*[in]*/, 
                                       VARIANT_BOOL bClear/*[in]*/, double Val/*[in]*/, 
                                       VARIANT_BOOL bMetric/*[in]*/);
  void            __fastcall GetVectorVelocity(long Control/*[in]*/, long coord/*[in]*/, 
                                               double* pVal/*[out]*/);
  void            __fastcall ReadMdiBuffer(long Control/*[in]*/, long coord/*[in]*/, 
                                           long* hDlg/*[in]*/, long idControl/*[in]*/);
  void            __fastcall LoadMdiBuffer(long Control/*[in]*/, long coord/*[in]*/, 
                                           long* hDlg/*[in]*/, long idControl/*[in]*/, 
                                           long nRepeat/*[in]*/);
  void            __fastcall ClearTextBuffer(long Control/*[in]*/, long coord/*[in]*/);
  void            __fastcall GetCurrentGValue(long Control/*[in]*/, long coord/*[in]*/, 
                                              long group/*[in]*/, long* pVal/*[out]*/);
  void            __fastcall GetInposition(long Control/*[in]*/, long coord/*[in]*/, 
                                           VARIANT_BOOL* pVal/*[out]*/);
  void            __fastcall GetProgramMode(long Control/*[in]*/, long coord/*[in]*/, 
                                            Pcommserverlib_tlb::DEVPROGRAMMODE* pVal/*[out]*/);
  void            __fastcall GetSelectedBufferMode(long Control/*[in]*/, 
                                                   Pcommserverlib_tlb::NCBUFFERMODE* pVal/*[out]*/);
  void            __fastcall GetSelectedAxisMotionMode(long Control/*[in]*/, 
                                                       Pcommserverlib_tlb::DEVMOTIONMODE* pVal/*[out]*/);
  void            __fastcall GetProgramMotionMode(long Control/*[in]*/, long coord/*[in]*/, 
                                                  Pcommserverlib_tlb::DEVMOTIONMODE* pVal/*[out]*/);
  void            __fastcall GetBufferOpen(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out]*/);
  void            __fastcall GetBufferRemaining(long Control/*[in]*/, long coord/*[in]*/, 
                                                long* pRemain/*[out]*/, long* pParsed/*[out]*/);
  void            __fastcall GetSpindleActRPM(long Control/*[in]*/, long* pVal/*[out]*/);
  void            __fastcall GetFeedrate(long Control/*[in]*/, long coord/*[in]*/, 
                                         Pcommserverlib_tlb::NCFEEDRATEMODE* pMode/*[out]*/, 
                                         double* pVal/*[out]*/);
  void            __fastcall SetFeedrate(long Control/*[in]*/, long coord/*[in]*/, 
                                         Pcommserverlib_tlb::NCFEEDRATEMODE mode/*[in]*/, 
                                         double newVal/*[in]*/);
  void            __fastcall GetNumOfTools(long Control/*[in]*/, long coord/*[in]*/, 
                                           long* pVal/*[out]*/);
  void            __fastcall SetToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                 long tool/*[in]*/, long holder/*[in]*/);
  void            __fastcall GetToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                 long tool/*[in]*/, long* pVal/*[out]*/);
  void            __fastcall ZeroAllToolOffsets(long Control/*[in]*/, long coord/*[in]*/);
  void            __fastcall GetTypeToolOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                               long tool/*[in]*/, BSTR chAxis/*[in]*/, 
                                               Pcommserverlib_tlb::NCTOOLOFSTYPE type/*[in]*/, 
                                               VARIANT_BOOL bMetric/*[in]*/, double* pVal/*[out]*/);
  void            __fastcall SetTypeToolOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                               long tool/*[in]*/, BSTR chAxis/*[in]*/, 
                                               Pcommserverlib_tlb::NCTOOLOFSTYPE type/*[in]*/, 
                                               VARIANT_BOOL bMetric/*[in]*/, 
                                               VARIANT_BOOL bConfirm/*[in]*/, double newVal/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetActiveGCode(long Control/*[in]*/, long coord/*[in]*/, 
                                            long group/*[in]*/, double* pVal/*[out]*/);
  void            __fastcall GetActiveGCodeStr(long Control/*[in]*/, long coord/*[in]*/, 
                                               long group/*[in]*/, BSTR* pVal/*[in,out]*/);
  void            __fastcall GetToolOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                           long* pVal/*[out]*/);
  void            __fastcall GetCompOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                           long* pVal/*[out]*/);
  void            __fastcall UpdateAllMotors(long Control/*[in]*/);
  void            __fastcall GetOperatingTime(long Control/*[in]*/, long* pDays/*[out]*/, 
                                              long* pHours/*[out]*/, long* pMinutes/*[out]*/, 
                                              long* pSeconds/*[out]*/);
  void            __fastcall GetTotalCuttingTime(long Control/*[in]*/, long* pDays/*[out]*/, 
                                                 long* pHours/*[out]*/, long* pMinutes/*[out]*/, 
                                                 long* pSeconds/*[out]*/);
  void            __fastcall GetRunningTime(long Control/*[in]*/, long* pDays/*[out]*/, 
                                            long* pHours/*[out]*/, long* pMinutes/*[out]*/, 
                                            long* pSeconds/*[out]*/);
  void            __fastcall GetPartTime(long Control/*[in]*/, long* pHours/*[out]*/, 
                                         long* pMinutes/*[out]*/, long* pSeconds/*[out]*/);
  void            __fastcall GetCycleCuttingTime(long Control/*[in]*/, long* pHours/*[out]*/, 
                                                 long* pMinutes/*[out]*/, long* pSeconds/*[out]*/);
  void            __fastcall GetCycleTime(long Control/*[in]*/, long* pHours/*[out]*/, 
                                          long* pMinutes/*[out]*/, long* Seconds/*[out]*/);
  void            __fastcall GetNumDisplayedAxis(long Control/*[in]*/, long coord/*[in]*/, 
                                                 long* pVal/*[out]*/);
  void            __fastcall GetNumDisplayAxisTotal(long Control/*[in]*/, long* pVal/*[out]*/);
  void            __fastcall GetMotorPosStr(long Control/*[in]*/, long coord/*[in]*/, 
                                            long motor/*[in]*/, 
                                            Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/, 
                                            VARIANT_BOOL bCombined/*[in]*/, BSTR* pAdr/*[in,out]*/, 
                                            BSTR* pPos/*[in,out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetMotorUnitsStr(long Control/*[in]*/, long coord/*[in]*/, 
                                              long motor/*[in]*/, BSTR* pVal/*[in,out]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetProgramLines(long Control/*[in]*/, long coord/*[in]*/, 
                                             long start/*[in]*/, long count/*[in]*/, 
                                             VARIANT* pVal/*[in,out]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetProgramLine(long Control/*[in]*/, long coord/*[in]*/, 
                                            long lineNumber/*[in]*/, BSTR* pVal/*[out]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetInputLong(long Control/*[in]*/, long num/*[in]*/, 
                                          long* pVal/*[out]*/);
  void            __fastcall GetOutputLong(long Control/*[in]*/, long num/*[in]*/, 
                                           long* pVal/*[out]*/);
  void            __fastcall GetCommandLong(long Control/*[in]*/, long num/*[in]*/, 
                                            long* pVal/*[out]*/);
  void            __fastcall GetStatusLong(long Control/*[in]*/, long num/*[in]*/, 
                                           long* pVal/*[out]*/);
  void            __fastcall command(long Control/*[in]*/, long id/*[in]*/, long iv/*[in]*/, 
                                     double fv/*[in]*/, BSTR bStr/*[in]*/, 
                                     VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall AddErrorRecord(long Control/*[in]*/, long errnum/*[in]*/, 
                                            Pcommserverlib_tlb::NCERRORMODE em/*[in]*/, 
                                            Pcommserverlib_tlb::NCERRORTYPE et/*[in]*/, 
                                            long Line/*[in]*/, short ax/*[in]*/, BSTR Msg/*[in]*/);
  void            __fastcall GetParametricDouble(long Control/*[in]*/, long coord/*[in]*/, 
                                                 BSTR region/*[in]*/, long index/*[in]*/, 
                                                 double* pVal/*[out]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall SetParametricDouble(long Control/*[in]*/, long coord/*[in]*/, 
                                                 BSTR region/*[in]*/, long index/*[in]*/, 
                                                 double newVal/*[in]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetSelectedAxisChar(long Control/*[in]*/, short* pAxChar/*[out]*/);
  void            __fastcall GetAxisFormat(long Control/*[in]*/, long coord/*[in]*/, 
                                           short ax/*[in]*/, VARIANT_BOOL bMetric/*[in]*/, 
                                           long* pLen/*[out]*/, long* pDecPlaces/*[out]*/);
  void            __fastcall GetAxisFormatStr(long Control/*[in]*/, long coord/*[in]*/, 
                                              short ax/*[in]*/, VARIANT_BOOL bMetric/*[in]*/, 
                                              BSTR* pVal/*[in,out]*/);
  void            __fastcall SetAxisFormat(long Control/*[in]*/, long coord/*[in]*/, 
                                           short ax/*[in]*/, VARIANT_BOOL bMetric/*[in]*/, 
                                           long len/*[in]*/, long decPlaces/*[in]*/);
  void            __fastcall GetFirstError(long Control/*[in]*/, BSTR* pHeader/*[in,out]*/, 
                                           BSTR* pMessage/*[in,out]*/, BSTR* pCode/*[in,out]*/, 
                                           BSTR* pFilename/*[in,out]*/, long* pCount/*[out]*/, 
                                           long* pChanged/*[out]*/);
  void            __fastcall GetNextError(long Control/*[in]*/, BSTR* pHeader/*[in,out]*/, 
                                          BSTR* pMessage/*[in,out]*/, BSTR* pCode/*[in,out]*/, 
                                          BSTR* pFilename/*[in,out]*/, VARIANT_BOOL* pbMore/*[out]*/);
  void            __fastcall OffsetsUpdateClear(long Control/*[in]*/, long clearMask/*[in]*/);
  void            __fastcall OffsetsUpdate(long Control/*[in]*/, long* pVal/*[out]*/);
  void            __fastcall ReadErrorMsgBoxText(long Control/*[in]*/, long index/*[in]*/, 
                                                 long* pCount/*[out]*/, BSTR* pText/*[in,out]*/, 
                                                 BSTR* pTitle/*[in,out]*/);
  void            __fastcall ResetMsgBoxError(long Control/*[in]*/, long errRetVal/*[in]*/);
  void            __fastcall SaveParametricVars(long Control/*[in]*/);
  void            __fastcall LoadParametricVars(long Control/*[in]*/);
  void            __fastcall ResetCycleTime(long Control/*[in]*/);
  void            __fastcall GetToolGuageOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                                long tool/*[in]*/, VARIANT_BOOL bMulti/*[in]*/, 
                                                short ax/*[in]*/, VARIANT_BOOL bMetric/*[in]*/, 
                                                double* pVal/*[out]*/);
  void            __fastcall SetToolGuageOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                                long tool/*[in]*/, VARIANT_BOOL bMulti/*[in]*/, 
                                                short ax/*[in]*/, VARIANT_BOOL bMetric/*[in]*/, 
                                                double newVal/*[in]*/);
  void            __fastcall AutoSetToolOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                               long tool/*[in]*/, short axis/*[in]*/);
  void            __fastcall GetOffsetValue(long Control/*[in]*/, long coord/*[in]*/, 
                                            short axis/*[in]*/, 
                                            Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                            VARIANT_BOOL bMetric/*[in]*/, double* pVal/*[out]*/);
  void            __fastcall SetOffsetValue(long Control/*[in]*/, long coord/*[in]*/, 
                                            short axis/*[in]*/, 
                                            Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                            VARIANT_BOOL bMetric/*[in]*/, 
                                            VARIANT_BOOL bConfirm/*[in]*/, double newVal/*[in]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall AutoSetWorkOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                               short axis/*[in]*/, 
                                               Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall SearchText(long Control/*[in]*/, long coord/*[in]*/, BSTR text/*[in]*/, 
                                        VARIANT_BOOL bMatchCase/*[in]*/, 
                                        VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall SearchTextNext(long Control/*[in]*/, long coord/*[in]*/, 
                                            BSTR text/*[in]*/, VARIANT_BOOL bMatchCase/*[in]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetBufferText(long Control/*[in]*/, long coord/*[in]*/, 
                                           VARIANT_BOOL bMDI/*[in]*/, BSTR* pVal/*[in,out]*/);
  void            __fastcall SetBufferText(long Control/*[in]*/, long coord/*[in]*/, 
                                           long repeat/*[in]*/, VARIANT_BOOL bMDI/*[in]*/, 
                                           BSTR newVal/*[in]*/);
  void            __fastcall GetProcessorClocks(double* pIO/*[out]*/, double* pLA/*[out]*/, 
                                                double* pParse/*[out]*/, double* pFormat/*[out]*/, 
                                                double* pWrite/*[out]*/);
  void            __fastcall GetMetricInput(long Control/*[in]*/, long coord/*[in]*/, 
                                            VARIANT_BOOL* pVal/*[out]*/);
  void            __fastcall GetToolInfo(long Control/*[in]*/, long coord/*[in]*/, 
                                         long* pCurrentTool/*[out]*/, long* pNextTool/*[out]*/, 
                                         long* pHolder/*[out]*/, long* pHolderTool/*[out]*/);
  void            __fastcall GetToolData(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                                         VARIANT* pVal/*[in,out]*/);
  void            __fastcall ZeroAllTypeToolOffsets(long Control/*[in]*/, long coord/*[in]*/, 
                                                    Pcommserverlib_tlb::NCTOOLOFSTYPE type/*[in]*/);
  void            __fastcall SearchLine(long Control/*[in]*/, long coord/*[in]*/, long Line/*[in]*/, 
                                        VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetAxisMotor(long Control/*[in]*/, long coord/*[in]*/, 
                                          short axis/*[in]*/, long* pMotor/*[out]*/, 
                                          VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetMotorAxis(long Control/*[in]*/, long coord/*[in]*/, 
                                          long motor/*[in]*/, short* pAxis/*[out]*/, 
                                          VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetMotorPos(long Control/*[in]*/, long coord/*[in]*/, 
                                         long motor/*[in]*/, Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/, 
                                         BSTR* pAdr/*[out]*/, double* pPos/*[out]*/, 
                                         VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetAllAxisPos(long Control/*[in]*/, long coord/*[in]*/, 
                                           Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/, 
                                           LPSAFEARRAY* pvAdrArray/*[in,out]*/, 
                                           LPSAFEARRAY* pvPosArray/*[in,out]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetAllAxisPosStr(long Control/*[in]*/, long coord/*[in]*/, 
                                              Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/, 
                                              VARIANT_BOOL bCoord/*[in]*/, 
                                              LPSAFEARRAY* pvArray/*[in,out]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetMaxFeedrates(long Control/*[in]*/, long coord/*[in]*/, 
                                             double* pMaxPerRev/*[out]*/, 
                                             double* pMaxPerMinute/*[out]*/);
  void            __fastcall SetMaxFeedrates(long Control/*[in]*/, long coord/*[in]*/, 
                                             double MaxPerRev/*[in]*/, double MaxPerMinute/*[in]*/);
  void            __fastcall ClearOffsetValue(long Control/*[in]*/, long coord/*[in]*/, 
                                              short axis/*[in]*/, 
                                              Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                              VARIANT_BOOL bMetric/*[in]*/, double newVal/*[in]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall GetToolDataStruct(long Control/*[in]*/, long coord/*[in]*/, 
                                               long tool/*[in]*/, 
                                               Pcommserverlib_tlb::NCTOOL* pStruct/*[in,out]*/);
  void            __fastcall StartDataCollection(long Control/*[in]*/, long CollectionMSec/*[in]*/, 
                                                 long BufferSize/*[in]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall StopDataCollection(long Control/*[in]*/);
  void            __fastcall DataCollect(long Control/*[in]*/, long coord/*[in]*/, 
                                         LPSAFEARRAY* pvArray/*[in,out]*/, 
                                         VARIANT_BOOL* pbSuccess/*[out]*/);
  void            __fastcall ResetPartsCount(long Control/*[in]*/);
  void            __fastcall ResetPartsTotal(long Control/*[in]*/);
  void            __fastcall GetWorkOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                           Pcommserverlib_tlb::NCCOORDTYPE* t/*[out]*/, 
                                           long* pExtendedVal/*[out]*/);
  void            __fastcall GetLatheSetXDiameter(long Control/*[in]*/, long coord/*[in]*/, 
                                                  VARIANT_BOOL bMetric/*[in]*/, 
                                                  double* pVal/*[out]*/);
  void            __fastcall SetLatheSetXDiameter(long Control/*[in]*/, long coord/*[in]*/, 
                                                  VARIANT_BOOL bMetric/*[in]*/, 
                                                  double newVal/*[in]*/);

  // OCX properties
  //
  __property BSTR Title[long Control]={ read=get_Title };
  __property long DeviceNumber[long Control]={ read=get_DeviceNumber };
  __property TOLEBOOL IsOpen[long Control]={ read=get_IsOpen };
  __property Pcommserverlib_tlb::NCMODE mode[long Control]={ read=get_mode };
  __property long CoordSystem[long Control]={ read=get_CoordSystem };
  __property long NumCoordSystems[long Control]={ read=get_NumCoordSystems };
  __property TOLEBOOL SingleBlock[long Control]={ read=get_SingleBlock };
  __property TOLEBOOL BlockDelete[long Control]={ read=get_BlockDelete };
  __property TOLEBOOL OptionalStop[long Control]={ read=get_OptionalStop };
  __property TOLEBOOL MachineLock[long Control]={ read=get_MachineLock };
  __property TOLEBOOL DryRun[long Control][long coord]={ read=get_DryRun };
  __property Pcommserverlib_tlb::NCMACHINETYPE MachineType[long Control]={ read=get_MachineType };
  __property Pcommserverlib_tlb::NCJOGSELECT JogSelect[long Control]={ read=get_JogSelect };
  __property Pcommserverlib_tlb::NCSPEEDSELECT SpeedSelect[long Control]={ read=get_SpeedSelect };
  __property TOLEBOOL ProgramLoaded[long Control][long coord]={ read=get_ProgramLoaded };
  __property long Semaphore[long Control][long coord]={ read=get_Semaphore };
  __property Pcommserverlib_tlb::NCSPEEDSELECT DistanceSelect[long Control]={ read=get_DistanceSelect };
  __property Pcommserverlib_tlb::NCAXISSELECT AxisSelect[long Control][long coord]={ read=get_AxisSelect };
  __property Pcommserverlib_tlb::NCBUFFERMODE BufferMode[long Control][long coord]={ read=get_BufferMode };
  __property Pcommserverlib_tlb::NCSPINDLESELECT SpindleSelect[long Control]={ read=get_SpindleSelect };
  __property long SpindleRPM[long Control]={ read=get_SpindleRPM };
  __property double SpindleCSS[long Control]={ read=get_SpindleCSS };
  __property TOLEBOOL SpindleCSSMode[long Control]={ read=get_SpindleCSSMode };
  __property double SpindleCSSUnits[long Control]={ read=get_SpindleCSSUnits };
  __property long SpindleMaxRPM[long Control]={ read=get_SpindleMaxRPM };
  __property long SpindleOverride[long Control][long coord]={ read=get_SpindleOverride };
  __property double FeedrateOverride[long Control][long coord]={ read=get_FeedrateOverride };
  __property double RapidOverride[long Control][long coord]={ read=get_RapidOverride };
  __property Pcommserverlib_tlb::NCCLNTSELECT CoolantSelect[long Control]={ read=get_CoolantSelect };
  __property Pcommserverlib_tlb::NCTIMEBASEMODE TimebaseMode[long Control][long coord]={ read=get_TimebaseMode };
  __property double ThreadLead[long Control][long coord]={ read=get_ThreadLead };
  __property long CurrentToolNumber[long Control][long coord]={ read=get_CurrentToolNumber };
  __property long NextToolNumber[long Control][long coord]={ read=get_NextToolNumber };
  __property long CurrentToolHolderNumber[long Control][long coord]={ read=get_CurrentToolHolderNumber };
  __property long ToolInSpindle[long Control][long coord]={ read=get_ToolInSpindle };
  __property Pcommserverlib_tlb::NCTOOLDIRECTION ToolDirection[long Control][long coord][long tool]={ read=get_ToolDirection };
  __property double SpindleCountsPerRev[long Control]={ read=get_SpindleCountsPerRev };
  __property double SpindleGearRatio[long Control]={ read=get_SpindleGearRatio };
  __property TOLEBOOL SpindleDetect[long Control]={ read=get_SpindleDetect };
  __property TOLEBOOL SpindleAtSpeed[long Control]={ read=get_SpindleAtSpeed };
  __property TOLEBOOL SpindleAtZero[long Control]={ read=get_SpindleAtZero };
  __property TOLEBOOL SpindleFPR[long Control]={ read=get_SpindleFPR };
  __property TOLEBOOL HomeInit[long Control]={ read=get_HomeInit };
  __property long HomeMotorMask[long Control]={ read=get_HomeMotorMask };
  __property long PartsRequired[long Control]={ read=get_PartsRequired };
  __property long PartsCount[long Control]={ read=get_PartsCount };
  __property long PartsTotal[long Control]={ read=get_PartsTotal };
  __property TOLEBOOL IsSpindle[long Control][long coord][long motor]={ read=get_IsSpindle };
  __property TOLEBOOL IsDisplayed[long Control][long coord][long motor]={ read=get_IsDisplayed };
  __property TOLEBOOL HomeInProgress[long Control]={ read=get_HomeInProgress };
  __property long SpindleCmdRPM[long Control]={ read=get_SpindleCmdRPM };
  __property Pcommserverlib_tlb::NCERRORMODE CurrentErrorLevel[long Control]={ read=get_CurrentErrorLevel };
  __property long CurrentErrorCount[long Control]={ read=get_CurrentErrorCount };
  __property long BlocksPerSecond[long Control][long coord]={ read=get_BlocksPerSecond };
  __property TOLEBOOL DataCollectionEnabled[long Control]={ read=get_DataCollectionEnabled };
  __property long DataCollectionResolution[long Control]={ read=get_DataCollectionResolution };
  __property TCOMIPmacNC ControlInterface={ read=GetDefaultInterface };

  // Published properties
  //
__published:

  // Standard/Extended properties
  //

  // OCX properties
  //

  // OCX Events
  //
  __property TPmacNCError OnError={ read=FOnError, write=FOnError };
  __property TPmacNCMessage OnMessage={ read=FOnMessage, write=FOnMessage };
  __property TPmacNCProgress OnProgress={ read=FOnProgress, write=FOnProgress };
  __property TPmacNCMessageQuery OnMessageQuery={ read=FOnMessageQuery, write=FOnMessageQuery };
  __property TPmacNCSearchProgress OnSearchProgress={ read=FOnSearchProgress, write=FOnSearchProgress };
  __property TPmacNCChange OnChange={ read=FOnChange, write=FOnChange };
  __property TPmacNCClearError OnClearError={ read=FOnClearError, write=FOnClearError };
  __property TPmacNCDataReady OnDataReady={ read=FOnDataReady, write=FOnDataReady };
};
typedef TPmacNC  TPmacNCProxy;

};     // namespace Pcommserverlib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Pcommserverlib_tlb;
#endif

#pragma option pop

#endif // PCOMMSERVERLib_OCXH
