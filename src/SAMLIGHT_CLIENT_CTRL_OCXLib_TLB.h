// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 2016/8/12 11:42:18 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Windows\system32\sc_x64_samlight_client_ctrl.ocx (1)
// LIBID: {22C1DCFD-1974-40FB-9193-1D299C09903C}
// LCID: 0
// Helpfile: C:\Windows\system32\samlight_client_ctrl_ocx.hlp
// HelpString: SCAPS SAM SamlightClientCtrl
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// ************************************************************************ //
#ifndef   SAMLIGHT_CLIENT_CTRL_OCXLib_TLBH
#define   SAMLIGHT_CLIENT_CTRL_OCXLib_TLBH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Samlight_client_ctrl_ocxlib_tlb
{

// *********************************************************************//
// HelpString: SCAPS SAM SamlightClientCtrl
// Version:    2.6
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_SAMLIGHT_CLIENT_CTRL_OCXLib;
extern __declspec (package) const GUID GUID_sc_com_pen_path;
extern __declspec (package) const GUID IID_SC_IConnectionToolCtrl;
extern __declspec (package) const GUID DIID_SC_DConnectionToolEvents;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_sc_samlight_client_ctrl_type_lib_0001_0065_0001;
extern __declspec (package) const GUID GUID_ScComSAMLightClientCtrlExecCommandConstants;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_sc_samlight_client_ctrl_type_lib_0001_0065_0002;
extern __declspec (package) const GUID GUID_ScComSAMLightClientCtrlMarkFlags;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_sc_samlight_client_ctrl_type_lib_0001_0065_0003;
extern __declspec (package) const GUID GUID_ScComSAMLightClientCtrlValueTypes;
extern __declspec (package) const GUID GUID_ScComConnectionToolCtrlResultValues;
extern __declspec (package) const GUID GUID_ScConstantsTools;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_sc_samlight_client_ctrl_type_lib_0001_0066_0001;
extern __declspec (package) const GUID GUID_ScComSAMLightClientCtrlFlags;
extern __declspec (package) const GUID DIID__DSamlight_client_ctrl_ocx;
extern __declspec (package) const GUID DIID__DSamlight_client_ctrl_ocxEvents;
extern __declspec (package) const GUID CLSID_ScSamlightClientCtrl;
extern __declspec (package) const GUID CLSID_ScConnectionToolCtrl;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
struct    tagsc_com_pen_path;
typedef   tagsc_com_pen_path sc_com_pen_path;

enum      __MIDL___MIDL_itf_sc_samlight_client_ctrl_type_lib_0001_0065_0001;
enum      __MIDL___MIDL_itf_sc_samlight_client_ctrl_type_lib_0001_0065_0002;
enum      __MIDL___MIDL_itf_sc_samlight_client_ctrl_type_lib_0001_0065_0003;
enum      ScComConnectionToolCtrlResultValues;
enum      __MIDL___MIDL_itf_sc_samlight_client_ctrl_type_lib_0001_0066_0001;
interface DECLSPEC_UUID("{7EB1D711-5F08-4708-B37C-BA0EC0A72F65}") SC_IConnectionToolCtrl;
typedef TComInterface<SC_IConnectionToolCtrl, &IID_SC_IConnectionToolCtrl> SC_IConnectionToolCtrlPtr;

interface DECLSPEC_UUID("{9B5B5103-C107-4CD7-9D58-AA11408037A3}") SC_DConnectionToolEvents;
typedef TComInterface<SC_DConnectionToolEvents, &DIID_SC_DConnectionToolEvents> SC_DConnectionToolEventsPtr;

interface DECLSPEC_UUID("{05D31AA6-1306-4DA0-9AE2-A8771FF6FA94}") _DSamlight_client_ctrl_ocx;
typedef TComInterface<_DSamlight_client_ctrl_ocx, &DIID__DSamlight_client_ctrl_ocx> _DSamlight_client_ctrl_ocxPtr;

interface DECLSPEC_UUID("{5F3246AD-5086-45E1-A3DA-CB9B0BA234ED}") _DSamlight_client_ctrl_ocxEvents;
typedef TComInterface<_DSamlight_client_ctrl_ocxEvents, &DIID__DSamlight_client_ctrl_ocxEvents> _DSamlight_client_ctrl_ocxEventsPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef _DSamlight_client_ctrl_ocx ScSamlightClientCtrl;
typedef _DSamlight_client_ctrl_ocxPtr ScSamlightClientCtrlPtr;
typedef SC_IConnectionToolCtrl ScConnectionToolCtrl;
typedef SC_IConnectionToolCtrlPtr ScConnectionToolCtrlPtr;

#define LIBID_OF_ScSamlightClientCtrl (&LIBID_SAMLIGHT_CLIENT_CTRL_OCXLib)
#define LIBID_OF_ScConnectionToolCtrl (&LIBID_SAMLIGHT_CLIENT_CTRL_OCXLib)

// *********************************************************************//
// Declaration of Aliases defined in Type Library                         
// *********************************************************************//
typedef Samlight_client_ctrl_ocxlib_tlb::__MIDL___MIDL_itf_sc_samlight_client_ctrl_type_lib_0001_0065_0001 ScComSAMLightClientCtrlExecCommandConstants;
typedef Samlight_client_ctrl_ocxlib_tlb::__MIDL___MIDL_itf_sc_samlight_client_ctrl_type_lib_0001_0065_0002 ScComSAMLightClientCtrlMarkFlags;
typedef Samlight_client_ctrl_ocxlib_tlb::__MIDL___MIDL_itf_sc_samlight_client_ctrl_type_lib_0001_0065_0003 ScComSAMLightClientCtrlValueTypes;
typedef Samlight_client_ctrl_ocxlib_tlb::__MIDL___MIDL_itf_sc_samlight_client_ctrl_type_lib_0001_0066_0001 ScComSAMLightClientCtrlFlags;

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum __MIDL___MIDL_itf_sc_samlight_client_ctrl_type_lib_0001_0065_0001
{
  scComSAMLightClientCtrlExecCommandResetSequence = 2, 
  scComSAMLightClientCtrlExecCommandTest = 1, 
  scComSAMLightClientCtrlExecCommandNewJob = 3, 
  scComSAMLightClientCtrlExecCommandFitViewToWorkingArea = 4, 
  scComSAMLightClientCtrlExecCommandFitViewToAllEntities = 5, 
  scComSAMLightClientCtrlExecCommandFitViewToSelectedEntities = 6, 
  scComSAMLightClientCtrlExecCommandResetCounter = 7, 
  scComSAMLightClientCtrlOutlineIndexMinX = 0, 
  scComSAMLightClientCtrlOutlineIndexMinY = 1, 
  scComSAMLightClientCtrlOutlineIndexMinZ = 2, 
  scComSAMLightClientCtrlOutlineIndexMaxX = 3, 
  scComSAMLightClientCtrlOutlineIndexMaxY = 4, 
  scComSAMLightClientCtrlOutlineIndexMaxZ = 5, 
  scComSAMLightClientCtrlOutlineSliceIndexMinX = 6, 
  scComSAMLightClientCtrlOutlineSliceIndexMinY = 7, 
  scComSAMLightClientCtrlOutlineSliceIndexMinZ = 8, 
  scComSAMLightClientCtrlOutlineSliceIndexMaxX = 9, 
  scComSAMLightClientCtrlOutlineSliceIndexMaxY = 10, 
  scComSAMLightClientCtrlOutlineSliceIndexMaxZ = 11, 
  scComSAMLightClientCtrlExecCommandResetSerialNumber = 8, 
  scComSAMLightClientCtrlExecCommandUpdateScannerPos = 9, 
  scComSAMLightClientCtrlExecCommandAutoCompensateOff = 10, 
  scComSAMLightClientCtrlExecCommandAutoCompensateRef = 11, 
  scComSAMLightClientCtrlExecCommandAutoCompensateCal = 12, 
  scComSAMLightClientCtrlExecCommandResplitJob = 13, 
  scComSAMLightClientCtrlExecCommandMotionStopMove = 14, 
  scComSAMLightClientCtrlExecCommandMotionHome = 15, 
  scComSAMLightClientCtrlExecCommandMotionGo = 16, 
  scComSAMLightClientCtrlExecCommandMotionSendString = 17, 
  scComSAMLightClientCtrlExecCommandMotionUpdatePos = 18, 
  scComSAMLightClientCtrlExecCommandStopExecution = 19, 
  scComSAMLightClientCtrlExecCommandRedPointerStart = 20, 
  scComSAMLightClientCtrlExecCommandRedPointerStop = 21, 
  scComSAMLightClientCtrlExecCommandUpdateViewNow = 22, 
  scComSAMLightClientCtrlExecCommandIncSerialNumber = 23, 
  scComSAMLightClientCtrlExecCommandDecSerialNumber = 24, 
  scComSAMLightClientCtrlExecCommandSpecial1 = 25, 
  scComSAMLightClientCtrlExecCommandSpecial1_1 = 32, 
  scComSAMLightClientCtrlExecCommandSpecial2 = 33, 
  scComSAMLightClientCtrlExecCommandSpecial2_1 = 35, 
  scComSAMLightClientCtrlExecCommandSpecial3 = 34, 
  scComSAMLightClientCtrlExecCommandSpecial3_1 = 36, 
  scComSAMLightClientCtrlExecCommandCreateBeamCompedCopy = 37, 
  scComSAMLightClientCtrlExecCommandSaveSplitsAsEntities = 38, 
  scComSAMLightClientCtrlExecCommandCheckIfJobIsInField = 40, 
  scComSAMLightClientCtrlExecCommandExitTriggerMode = 41, 
  scComSAMLightClientCtrlExecCommandOpenMarkDialog = 48, 
  scComSAMLightClientCtrlExecCommandCloseMarkDialog = 49, 
  scComSAMLightClientCtrlExecCommandCorrectSamLight = 50, 
  scComSAMLightClientCtrlExecCommandSaveSettingsNow = 51, 
  scComSAMLightClientCtrlExecCommandSortJobByName = 52, 
  scComSAMLightClientCtrlExecCommandSetMotf = 53, 
  scComSAMLightClientCtrlExecCommandUndo = 54, 
  scComSAMLightClientCtrlExecCommandWizardOrder = 55, 
  scComSAMLightClientCtrlExecCommandWizardCreateOneGroup = 57
} __MIDL___MIDL_itf_sc_samlight_client_ctrl_type_lib_0001_0065_0001;

typedef enum __MIDL___MIDL_itf_sc_samlight_client_ctrl_type_lib_0001_0065_0002
{
  scComSAMLightClientCtrlMarkFlagWaitForTrigger = 1, 
  scComSAMLightClientCtrlMarkFlagTriggerMode2 = 2, 
  scComSAMLightClientCtrlMarkFlagHideOutput = 4, 
  scComSAMLightClientCtrlMarkFlagDisableHomeJump = 8, 
  scComSAMLightClientCtrlMarkFlagPreview = 16, 
  scComSAMLightClientCtrlMarkFlagSelected = 32, 
  scComSAMLightClientCtrlMarkFlagDisablePreProcessing = 64, 
  scComSAMLightClientCtrlMarkFlagDisablePostProcessing = 128, 
  scComSAMLightClientCtrlMarkFlagControlLoopByEntity = 1024, 
  scComSAMLightClientCtrlMarkFlagCloseTriggerWindowAtStop = 2048
} __MIDL___MIDL_itf_sc_samlight_client_ctrl_type_lib_0001_0065_0002;

typedef enum __MIDL___MIDL_itf_sc_samlight_client_ctrl_type_lib_0001_0065_0003
{
  scComSAMLightClientCtrlLongValueTypeNumMarksCompleted = 1, 
  scComSAMLightClientCtrlLongValueTypeHeadStatus = 2, 
  scComSAMLightClientCtrlLongValueTypeExecutionStatus = 3, 
  scComSAMLightClientCtrlLongValueTypeOptoIO = 4, 
  scComSAMLightClientCtrlLongValueTypeQuantity = 5, 
  scComSAMLightClientCtrlLongValueTypeDA1 = 6, 
  scComSAMLightClientCtrlLongValueTypeDA2 = 7, 
  scComSAMLightClientCtrlLongValueTypeDA3 = 34, 
  scComSAMLightClientCtrlLongValueTypeDA4 = 35, 
  scComSAMLightClientCtrlLongValueTypeDA5 = 36, 
  scComSAMLightClientCtrlLongValueTypeDA6 = 37, 
  scComSAMLightClientCtrlLongValueTypeDongleUserNumber = 39, 
  scComSAMLightClientCtrlLongValueTypeDongleSystemNumber = 40, 
  scComSAMLightClientCtrlLongValueTypeDeviceEnableFlagsValue = 9, 
  scComSAMLightClientCtrlLongValueTypeDeviceEnableFlagsSet = 8, 
  scComSAMLightClientCtrlLongValueTypeTotalEntityNum = 10, 
  scComSAMLightClientCtrlLongValueTypeTopLevelEntityNum = 11, 
  scComSAMLightClientCtrlLongValueTypeJobExecutionDelay = 12, 
  scComSAMLightClientCtrlLongValueTypeGetMarkCount = 13, 
  scComSAMLightClientCtrlLongValueTypeQueueLength = 14, 
  scComSAMLightClientCtrlLongValueTypeMaxQuantity = 15, 
  scComSAMLightClientCtrlLongValueTypeOverridePen = 16, 
  scComSAMLightClientCtrlLongValueTypeMotionAxis = 17, 
  scComSAMLightClientCtrlLongValueTypeMotionWaitForEnd = 18, 
  scComSAMLightClientCtrlLongValueTypeMotionMoving = 19, 
  scComSAMLightClientCtrlLongValueTypeSpiG3Waveform = 20, 
  scComSAMLightClientCtrlLongValueTypeSpiG3Cw = 21, 
  scComSAMLightClientCtrlLongValueTypeLineRampingPowerStartRampActive = 22, 
  scComSAMLightClientCtrlLongValueTypeLineRampingPowerEndRampActive = 23, 
  scComSAMLightClientCtrlLongValueTypeLineRampingSpeedStartRampActive = 24, 
  scComSAMLightClientCtrlLongValueTypeLineRampingSpeedEndRampActive = 25, 
  scComSAMLightClientCtrlLongValueTypeStoreRestoreTransformation = 32, 
  scComSAMLightClientCtrlLongValueTypeAngularSplittingParts = 33, 
  scComSAMLightClientCtrlLongValueTypeLastAutoCompensateResult = 38, 
  scComSAMLightClientCtrlLongValueTypeLineRampingLengthenStartActive = 26, 
  scComSAMLightClientCtrlLongValueTypeLineRampingLengthenEndActive = 27, 
  scComSAMLightClientCtrlLongValueTypeClientCtrlAsyncMode = 28, 
  scComSAMLightClientCtrlLongValueTypeClientCtrlAsyncModeIsRunning = 29, 
  scComSAMLightClientCtrlLongValueTypeClientCtrlAsyncModeResult = 30, 
  scComSAMLightClientCtrlLongValueTypeGetOptoOut = 31, 
  scComSAMLightClientCtrlLongValueTypeHardwareState = 41, 
  scComSAMLightClientCtrlLongValueTypePort2 = 48, 
  scComSAMLightClientCtrlLongValueTypeGetTotalSlices = 44, 
  scComSAMLightClientCtrlLongValueTypeSliceFrom = 45, 
  scComSAMLightClientCtrlLongValueTypeSliceTo = 46, 
  scComSAMLightClientCtrlLongValueTypeGetCurrentSliceNum = 47, 
  scComSAMLightClientCtrlLongValueTypeCurrentSliceNum = 47, 
  scComSAMLightClientCtrlLongValueTypeBmpAlphaBlendSourceConstantAlpha = 50, 
  scComSAMLightClientCtrlLongValueTypeBmpAlphaBlendCenterPointX = 51, 
  scComSAMLightClientCtrlLongValueTypeBmpAlphaBlendCenterPointY = 52, 
  scComSAMLightClientCtrlLongValueTypeBmpAlphaBlendBmpDimX = 53, 
  scComSAMLightClientCtrlLongValueTypeBmpAlphaBlendBmpDimY = 54, 
  scComSAMLightClientCtrlLongValueTypeDrillEnable = 55, 
  scComSAMLightClientCtrlLongValueTypeDrillEnableCo2Power = 56, 
  scComSAMLightClientCtrlLongValueTypeSelectRedpointerForMoveAbs = 57, 
  scComSAMLightClientCtrlLongValueTypeSelectHatchPair = 64, 
  scComSAMLightClientCtrlLongValueTypeSizePixelMap = 42, 
  scComSAMLightClientCtrlLongValueTypeSwitchToPane = 43, 
  scComSAMLightClientCtrlLongValueTypeRedpointerMode = 65, 
  scComSAMLightClientCtrlLongValueTypeSetLockSjfToDongleFlags = 66, 
  scComSAMLightClientCtrlLongValueTypeServerStatus = 67, 
  scComSAMLightClientCtrlLongValueTypeXYStatus = 68, 
  scComSAMLightClientCtrlLongValueTypeXYStatus1 = 69, 
  scComSAMLightClientCtrlLongValueTypeSimulationMode = 70, 
  scComSAMLightClientCtrlLongValueType3D = 71, 
  scComSAMLightClientCtrlLongValueTypeRTCTempX = 72, 
  scComSAMLightClientCtrlLongValueTypeRTCTempY = 73, 
  scComSAMLightClientCtrlLongValueTypeRTCTempZ = 80, 
  scComSAMLightClientCtrlLongValueTypeCorrectionMode = 81, 
  scComSAMLightClientCtrlLongValueTypeCorrectionPoints = 82, 
  scComSAMLightClientCtrlLongValueTypeRTCServoTempX = 83, 
  scComSAMLightClientCtrlLongValueTypeRTCServoTempY = 84, 
  scComSAMLightClientCtrlLongValueTypeRTCServoTempZ = 85, 
  scComSAMLightClientCtrlLongValueType3DSurfaceSetType = 86, 
  scComSAMLightClientCtrlLongValueTypeEnable3DSurface = 87, 
  scComSAMLightClientCtrlLongValueTypeEntityArrayCountX = 58, 
  scComSAMLightClientCtrlLongValueTypeEntityArrayCountY = 59, 
  scComSAMLightClientCtrlLongValueTypeEntityArrayOrderFlags = 60, 
  scComSAMLightClientCtrlLongValueTypeGetHeadCount = 61, 
  scComSAMLightClientCtrlLongValueTypeSaveView2DBitmapMode = 63, 
  scComSAMLightClientCtrlCorrectionModeRTS = 1, 
  scComSAMLightClientCtrlCorrectionModeIDW = 2, 
  scComSAMLightClientCtrlLockToDongleFlagLockLoadToSystemId = 1, 
  scComSAMLightClientCtrlLockToDongleFlagLockLoadToUserId = 2, 
  scComSAMLightClientCtrlLockToDongleFlagLockExport = 4, 
  scComSAMLightClientCtrlDoubleValueTypeOverrideSpeed = 1, 
  scComSAMLightClientCtrlDoubleValueTypeOverridePower = 2, 
  scComSAMLightClientCtrlDoubleValueTypeOverrideFrequ = 3, 
  scComSAMLightClientCtrlDoubleValueTypeMarkSpeed = 4, 
  scComSAMLightClientCtrlDoubleValueTypeJumpSpeed = 5, 
  scComSAMLightClientCtrlDoubleValueTypeFrequency = 6, 
  scComSAMLightClientCtrlDoubleValueTypeHalfPeriod = 43, 
  scComSAMLightClientCtrlDoubleValueTypeJumpDelay = 7, 
  scComSAMLightClientCtrlDoubleValueTypeMarkDelay = 8, 
  scComSAMLightClientCtrlDoubleValueTypePolyDelay = 9, 
  scComSAMLightClientCtrlDoubleValueTypeLaserOnDelay = 10, 
  scComSAMLightClientCtrlDoubleValueTypeLaserOffDelay = 11, 
  scComSAMLightClientCtrlDoubleValueTypeScannerXPos = 12, 
  scComSAMLightClientCtrlDoubleValueTypeScannerYPos = 13, 
  scComSAMLightClientCtrlDoubleValueTypeScannerZPos = 14, 
  scComSAMLightClientCtrlDoubleValueTypePulseLength = 15, 
  scComSAMLightClientCtrlDoubleValueTypeFirstPulseLength = 16, 
  scComSAMLightClientCtrlDoubleValueTypeLaserPower = 17, 
  scComSAMLightClientCtrlDoubleValueTypeSizePowerMap = 18, 
  scComSAMLightClientCtrlDoubleValueTypePowerMapStartId = 19, 
  scComSAMLightClientCtrlDoubleValueTypeMaxPower = 20, 
  scComSAMLightClientCtrlDoubleValueTypeLastMarkTime = 21, 
  scComSAMLightClientCtrlDoubleValueTypeOverridePower2 = 22, 
  scComSAMLightClientCtrlDoubleValueTypeHomePosX = 23, 
  scComSAMLightClientCtrlDoubleValueTypeHomePosY = 24, 
  scComSAMLightClientCtrlDoubleValueTypeHomePosZ = 25, 
  scComSAMLightClientCtrlDoubleValueTypeLineRampingPowerStartRampValue = 26, 
  scComSAMLightClientCtrlDoubleValueTypeLineRampingPowerStartRampLength = 27, 
  scComSAMLightClientCtrlDoubleValueTypeLineRampingPowerEndRampValue = 28, 
  scComSAMLightClientCtrlDoubleValueTypeLineRampingPowerEndRampLength = 29, 
  scComSAMLightClientCtrlDoubleValueTypeLineRampingSpeedStartRampValue = 30, 
  scComSAMLightClientCtrlDoubleValueTypeLineRampingSpeedStartRampLength = 31, 
  scComSAMLightClientCtrlDoubleValueTypeLineRampingSpeedEndRampValue = 32, 
  scComSAMLightClientCtrlDoubleValueTypeLineRampingSpeedEndRampLength = 33, 
  scComSAMLightClientCtrlDoubleValueTypeLastExpectedMarkTime = 34, 
  scComSAMLightClientCtrlDoubleValueTypeSkyWritingStartLength = 35, 
  scComSAMLightClientCtrlDoubleValueTypeSkyWritingEndLength = 36, 
  scComSAMLightClientCtrlDoubleValueTypeSkyWritingBreakAngle = 37, 
  scComSAMLightClientCtrlDoubleValueTypeMotionAxisPosition = 38, 
  scComSAMLightClientCtrlDoubleValueTypeMotionAxisAngle = 39, 
  scComSAMLightClientCtrlDoubleValueTypeMotionAxisPositionRelative = 40, 
  scComSAMLightClientCtrlDoubleValueTypeMotionAxisAngleRelative = 41, 
  scComSAMLightClientCtrlDoubleValueTypeMotionAxisSpeed = 42, 
  scComSAMLightClientCtrlDoubleValueTypeSaveView2DBitmapDPI = 44, 
  scComSAMLightClientCtrlDoubleValueTypeSpiLaserSimmer = 45, 
  scComSAMLightClientCtrlDoubleValueTypeGainX = 46, 
  scComSAMLightClientCtrlDoubleValueTypeGainY = 47, 
  scComSAMLightClientCtrlDoubleValueTypeLaserCo2Power1 = 48, 
  scComSAMLightClientCtrlDoubleValueTypeLaserCo2Power2 = 49, 
  scComSAMLightClientCtrlDoubleValueTypeAngularSplittingTotalDiameter = 50, 
  scComSAMLightClientCtrlDoubleValueTypeAngularSplittingAngle = 51, 
  scComSAMLightClientCtrlDoubleValueTypeHorizontalSplittingValue = 52, 
  scComSAMLightClientCtrlDoubleValueTypeVerticalSplittingValue = 53, 
  scComSAMLightClientCtrlDoubleValueTypeWobbleFrequency = 54, 
  scComSAMLightClientCtrlDoubleValueTypeWobbleAmplitude = 55, 
  scComSAMLightClientCtrlDoubleValueTypeStartSplittingPosX = 56, 
  scComSAMLightClientCtrlDoubleValueTypeStartSplittingPosY = 57, 
  scComSAMLightClientCtrlDoubleValueTypeOffsetX = 58, 
  scComSAMLightClientCtrlDoubleValueTypeOffsetY = 59, 
  scComSAMLightClientCtrlDoubleValueTypePrimaryHeadOffsetX = 65546, 
  scComSAMLightClientCtrlDoubleValueTypePrimaryHeadOffsetY = 65547, 
  scComSAMLightClientCtrlDoubleValueTypePrimaryHeadGainX = 65548, 
  scComSAMLightClientCtrlDoubleValueTypePrimaryHeadGainY = 65549, 
  scComSAMLightClientCtrlDoubleValueTypePrimaryHeadRotate = 65550, 
  scComSAMLightClientCtrlDoubleValueTypePrimaryHeadEnable = 65551, 
  scComSAMLightClientCtrlDoubleValueTypeSecondaryHeadOffsetX = 65552, 
  scComSAMLightClientCtrlDoubleValueTypeSecondaryHeadOffsetY = 65553, 
  scComSAMLightClientCtrlDoubleValueTypeSecondaryHeadGainX = 65556, 
  scComSAMLightClientCtrlDoubleValueTypeSecondaryHeadGainY = 65557, 
  scComSAMLightClientCtrlDoubleValueTypeSecondaryHeadRotate = 65558, 
  scComSAMLightClientCtrlDoubleValueTypeSecondaryHeadEnable = 65559, 
  scComSAMLightClientCtrlDoubleValueTypeSendCorTableValues = 65630, 
  scComSAMLightClientCtrlDoubleValueTypeLineRampingLengthenStart = 60, 
  scComSAMLightClientCtrlDoubleValueTypeLineRampingLengthenEnd = 61, 
  scComSAMLightClientCtrlDoubleValueTypeDefocus = 62, 
  scComSAMLightClientCtrlDoubleValueTypeAsyncModeResult = 63, 
  scComSAMLightClientCtrlDoubleValueTypeMotionAxisAddControl = 64, 
  scComSAMLightClientCtrlDoubleValueTypeMOFExtStartDelay = 65, 
  scComSAMLightClientCtrlDoubleValueTypeUserValue = 20000, 
  scComSAMLightClientCtrlDoubleValueTypeDoublePara1 = 66, 
  scComSAMLightClientCtrlDoubleValueTypeDoublePara2 = 67, 
  scComSAMLightClientCtrlDoubleValueTypeWorkingAreaMinX = 68, 
  scComSAMLightClientCtrlDoubleValueTypeWorkingAreaMinY = 69, 
  scComSAMLightClientCtrlDoubleValueTypeWorkingAreaMaxX = 70, 
  scComSAMLightClientCtrlDoubleValueTypeWorkingAreaMaxY = 71, 
  scComSAMLightClientCtrlDoubleValueTypeDrillPeriod = 72, 
  scComSAMLightClientCtrlDoubleValueTypeDrillDuration = 73, 
  scComSAMLightClientCtrlDoubleValueTypeDrillLength = 74, 
  scComSAMLightClientCtrlDoubleValueTypeDrillJumpSpeed = 75, 
  scComSAMLightClientCtrlDoubleValueTypeDrillJumpDelay = 76, 
  scComSAMLightClientCtrlDoubleValueTypeDrillDimension = 78, 
  scComSAMLightClientCtrlDoubleValueTypeDrillCo2HalfPeriod = 79, 
  scComSAMLightClientCtrlDoubleValueTypeLongDelay = 89, 
  scComSAMLightClientCtrlDoubleValueTypeStyleIDPixelMapZone = 4096, 
  scComSAMLightClientCtrlDoubleValueType3DVariHatchAngle = 80, 
  scComSAMLightClientCtrlDoubleValueTypeSaveView2DBitmapVariableSize = 81, 
  scComSAMLightClientCtrlDoubleValueTypeSaveView2DBitmapX = 82, 
  scComSAMLightClientCtrlDoubleValueTypeSaveView2DBitmapY = 83, 
  scComSAMLightClientCtrlDoubleValueTypeSaveView2DBitmapXW = 84, 
  scComSAMLightClientCtrlDoubleValueTypeSaveView2DBitmapYW = 85, 
  scComSAMLightClientCtrlDoubleValueTypeSaveView3DBitmapVariableSize = 81, 
  scComSAMLightClientCtrlDoubleValueTypeSaveView3DBitmapX = 82, 
  scComSAMLightClientCtrlDoubleValueTypeSaveView3DBitmapY = 83, 
  scComSAMLightClientCtrlDoubleValueTypeSaveView3DBitmapXW = 84, 
  scComSAMLightClientCtrlDoubleValueTypeSaveView3DBitmapYW = 85, 
  scComSAMLightClientCtrlDoubleValueTypeSelPointXPos = 86, 
  scComSAMLightClientCtrlDoubleValueTypeSelPointYPos = 87, 
  scComSAMLightClientCtrlDoubleValueTypeSelPointZPos = 88, 
  scComSAMLightClientCtrlDoubleValueTypeOffsetZ = 90, 
  scComSAMLightClientCtrlDoubleValueTypeSpeedMotfEntityBasedSplitting = 91, 
  scComSAMLightClientCtrlDoubleValueTypeEntityArrayStepX = 92, 
  scComSAMLightClientCtrlDoubleValueTypeEntityArrayStepY = 93, 
  scComSAMLightClientCtrlDoubleValueTypeEntityBasedSplittingGroupedEntityWidth = 94, 
  scComSAMLightClientCtrlDoubleValueTypeDoublePara3 = 95, 
  scComSAMLightClientCtrlDoubleValueType3DSurfaceValue1 = 96, 
  scComSAMLightClientCtrlDoubleValueType3DSurfaceValue2 = 97, 
  scComSAMLightClientCtrlDoubleValueType3DSurfaceValue3 = 98, 
  scComSAMLightClientCtrlDoubleValueType3DSurfaceValue4 = 99, 
  scComSAMLightClientCtrlDoubleValueType3DSurfaceValue5 = 100, 
  scComSAMLightClientCtrlDoubleValueType3DSurfaceValue6 = 101, 
  scComSAMLightClientCtrlDoubleValueType3DSurfaceValue7 = 102, 
  scComSAMLightClientCtrlDoubleValueType3DSurfaceValue8 = 103, 
  scComSAMLightClientCtrlDoubleValueType3DSurfaceValue9 = 104, 
  scComSAMLightClientCtrlDoubleValueType3DSurfaceValue10 = 105, 
  scComSAMLightClientCtrlDoubleValueType3DSurfaceValue11 = 106, 
  scComSAMLightClientCtrlDoubleValueType3DSurfaceValue12 = 107, 
  scComSAMLightClientCtrlDoubleValueType3DSurfaceValue13 = 108, 
  scComSAMLightClientCtrlDoubleValueType3DSurfaceValue14 = 109, 
  scComSAMLightClientCtrlDoubleValueType3DSurfaceValue15 = 110, 
  scComSAMLightClientCtrlDoubleValueTypeOpticRotation = 111, 
  scComSAMLightClientCtrlStringValueTypeRs232BaudRate = 1, 
  scComSAMLightClientCtrlStringValueTypeRs232OutputString = 2, 
  scComSAMLightClientCtrlStringValueTypeRs232Mode = 3, 
  scComSAMLightClientCtrlStringValueTypeJobFileName = 4, 
  scComSAMLightClientCtrlStringValueTypeSaveView2D160 = 6, 
  scComSAMLightClientCtrlStringValueTypeSaveView2D320 = 7, 
  scComSAMLightClientCtrlStringValueTypeSaveView2DVariableSize = 8, 
  scComSAMLightClientCtrlStringValueTypeSaveView2DFull = 9, 
  scComSAMLightClientCtrlStringValueTypeEntityNamesWithType = 16, 
  scComSAMLightClientCtrlStringValueTypeEntityNameAtTopLevel = 10, 
  scComSAMLightClientCtrlStringValueTypeControlCmdCW300 = 50, 
  scComSAMLightClientCtrlStringValueTypeMotionString = 11, 
  scComSAMLightClientCtrlStringValueTypeSaveView2DAdjustableDPI = 12, 
  scComSAMLightClientCtrlStringValueTypeCorrectionFile = 13, 
  scComSAMLightClientCtrlStringValueTypeCorrectionFileHead2 = 23, 
  scComSAMLightClientCtrlStringValueTypeSaveLayerAdjustableDPI = 24, 
  scComSAMLightClientCtrlStringValueTypeGetLastErrorMessageInput = 14, 
  scComSAMLightClientCtrlStringValueTypeGetLastInfoMessageInput = 15, 
  scComSAMLightClientCtrlStringValueTypeSubEntityForGetIdStringDataGetTopLevelEntityName = 17, 
  scComSAMLightClientCtrlStringValueTypeSetToTopLevelEntity = 17, 
  scComSAMLightClientCtrlStringValueTypeAsyncModeResult = 18, 
  scComSAMLightClientCtrlStringValueTypeUserValue = 20000, 
  scComSAMLightClientCtrlStringValueTypeStringPara1 = 19, 
  scComSAMLightClientCtrlStringValueTypeStringPara2 = 20, 
  scComSAMLightClientCtrlStringValueTypeSaveSplitsJobFileName = 21, 
  scComSAMLightClientCtrlStringValueTypeCurrentPenName = 22, 
  scComSAMLightClientCtrlStringValueTypeSaveView3DVariableSize = 25, 
  scComSAMLightClientCtrlStringValueTypeSaveView3DFull = 26, 
  scComSAMLightClientCtrlStringValueTypeBmpAlphaBlendPathBmp = 27, 
  scComSAMLightClientCtrlStringValueTypePenPixelMap = 28, 
  scComSAMLightClientCtrlStringValueTypeCorrectionFileLcf = 29, 
  scComSAMLightClientCtrlStringValueTypeCorrectionFileLcfLensInit = 30, 
  scComSAMLightClientCtrlStringValueTypeTrail = 31, 
  scComSAMLightClientCtrlStringValueTypeLoadStl = 32
} __MIDL___MIDL_itf_sc_samlight_client_ctrl_type_lib_0001_0065_0003;

typedef enum ScComConnectionToolCtrlResultValues
{
  scComConnectionToolCtrlResultOK = 0, 
  scComConnectionToolCtrlResultOpenFailed = 1, 
  scComConnectionToolCtrlResultConnectRecipientFailed = 2, 
  scComConnectionToolCtrlResultSendFailed = 3, 
  scComConnectionToolCtrlResultTimeOut = 4
} ScComConnectionToolCtrlResultValues;

typedef enum __MIDL___MIDL_itf_sc_samlight_client_ctrl_type_lib_0001_0066_0001
{
  scComSAMLightClientCtrlModeFlagTopLevelOnly = 1, 
  scComSAMLightClientCtrlModeFlagDontUpdateView = 2, 
  scComSAMLightClientCtrlModeFlagSuppressErrorMessages = 4, 
  scComSAMLightClientCtrlModeFlagUniqueEntityNames = 8, 
  scComSAMLightClientCtrlModeFlagDisableFileCompression = 16, 
  scComSAMLightClientCtrlModeFlagEntityNamesSeparatedBySemicolon = 32, 
  scComSAMLightClientCtrlModeFlagMarkOrderAsSpecifiedWithNames = 64, 
  scComSAMLightClientCtrlModeFlagEntityOrderFlagArrayXDown = 256, 
  scComSAMLightClientCtrlModeFlagEntityOrderFlagArrayYDown = 512, 
  scComSAMLightClientCtrlModeFlagEntityOrderFlagArrayXMainDir = 1024, 
  scComSAMLightClientCtrlModeFlagEntityOrderFlagArrayBiDir = 2048, 
  scComSAMLightClientCtrlModeFlagReGenerateObjectAfterScale = 4096, 
  scComSAMLightClientCtrlModeFlagUseFormatAtTextText = 8192, 
  scComSAMLightClientCtrlImportFlagReadPenInfo = 128, 
  scComSAMLightClientCtrlImportFlagKeepOrder = 8, 
  scComSAMLightClientCtrlImportFlagPointCloud = 16384, 
  scComSAMLightClientCtrlImportFlagNotTryToClose = 131072, 
  scComSAMLightClientCtrlImportFlagOptimized = 524288, 
  scComSAMLightClientCtrlImportFlagBitmapReimport = 1048576, 
  scComSAMLightClientCtrlImportFlagDontUpdateView = 2097152, 
  scComSAMLightClientCtrlImportFlagVectorReimport = 8388608, 
  scComSAMLightClientCtrlImportFlagToplevelOnly = 16777216, 
  scComSAMLightClientCtrlImportFlagFillWithDefaultHatchStyle = 33554432, 
  scComSAMLightClientCtrlImportFlagNoErrorMsg = 67108864, 
  scComSAMLightClientCtrlImportFlagCreateOneGroup = 134217728, 
  scComSAMLightClientCtrlImportFlagCenterToField = 268435456, 
  scComSAMLightClientCtrlImportFlagImportToPenGroups = 536870912, 
  scComSAMLightClientCtrlImportFlagUsePenColors = 1073741824, 
  scComSAMLightClientCtrlLongDataIdFlagDontUpdateView = 65536, 
  scComSAMLightClientCtrlLongDataIdFlagDontUpdateEntity = 131072, 
  scComSAMLightClientCtrlLongDataIdFlagEnqueueCtrlCmd = 524288, 
  scComSAMLightClientCtrlLongDataIdFlagEnqueueLastCtrlCmd = 1048576, 
  scComSAMLightClientCtrlLongDataIdFlagToplevelOnly = 2097152, 
  scComSAMLightClientCtrlLongDataIdUserData = 1, 
  scComSAMLightClientCtrlLongDataIdTextAlignment = 2, 
  scComSAMLightClientCtrlTextAlignmentCenter = 1, 
  scComSAMLightClientCtrlTextAlignmentLeft = 2, 
  scComSAMLightClientCtrlTextAlignmentRight = 4, 
  scComSAMLightClientCtrlTextAlignmentTop = 8, 
  scComSAMLightClientCtrlTextAlignmentBottom = 16, 
  scComSAMLightClientCtrlTextAlignmentMiddle = 32, 
  scComSAMLightClientCtrlTextAlignmentRadialCenter = 64, 
  scComSAMLightClientCtrlTextAlignmentRadialEnd = 128, 
  scComSAMLightClientCtrlTextAlignmentLineLeft = 256, 
  scComSAMLightClientCtrlTextAlignmentLineRight = 512, 
  scComSAMLightClientCtrlTextAlignmentLineCenter = 1024, 
  scComSAMLightClientCtrlLongDataIdEntitySelected = 3, 
  scComSAMLightClientCtrlLongDataIdEntityArrayCountX = 4, 
  scComSAMLightClientCtrlLongDataIdEntityArrayCountY = 5, 
  scComSAMLightClientCtrlLongDataIdEntityArrayStepX = 6, 
  scComSAMLightClientCtrlLongDataIdEntityArrayStepY = 7, 
  scComSAMLightClientCtrlLongDataIdEntityArrayOrderFlags = 8, 
  scComSAMLightClientCtrlLongDataIdTextCharFlags = 9, 
  scComSAMLightClientCtrlLongDataIdTextFontAvailable = 10, 
  scComSAMLightClientCtrlLongDataIdTextCharFlagItalic = 65536, 
  scComSAMLightClientCtrlLongDataIdTextCharFlagRadial = 131072, 
  scComSAMLightClientCtrlLongDataIdTextCharFlagRadialAlignToCharOutline = 262144, 
  scComSAMLightClientCtrlLongDataIdTextCharFlagReverseOrder = 524288, 
  scComSAMLightClientCtrlLongDataIdTextCharFlagMirrorCharOnXAxis = 1048576, 
  scComSAMLightClientCtrlLongDataIdTextCharFlagMirrorCharOnYAxis = 2097152, 
  scComSAMLightClientCtrlLongDataIdTextCharFlagSwapLines = 4194304, 
  scComSAMLightClientCtrlLongDataIdTextCharFlagSetToLimitLength = 8388608, 
  scComSAMLightClientCtrlLongDataIdTextCharFlagSetToLimitHeight = 16777216, 
  scComSAMLightClientCtrlLongDataIdTextCharFlagSetToLimitKeepAspect = 33554432, 
  scComSAMLightClientCtrlLongDataIdTextCharFlagRadialCenterMode = 1073741824, 
  scComSAMLightClientCtrlLongDataIdBitmapMode = 49, 
  scComSAMLightClientCtrlLongDataIdTextWeight = 50, 
  scComSAMLightClientCtrlLongDataIdEnableHatching1 = 51, 
  scComSAMLightClientCtrlLongDataIdEnableHatching2 = 52, 
  scComSAMLightClientCtrlLongDataIdEntityMarkLoopCount = 55, 
  scComSAMLightClientCtrlLongDataIdEntityMarkBeatCount = 56, 
  scComSAMLightClientCtrlLongDataIdEntityMarkStartCount = 57, 
  scComSAMLightClientCtrlLongDataIdEntityMarkFlags = 58, 
  scComSAMLightClientCtrlLongDataIdEntitySetPen = 60, 
  scComSAMLightClientCtrlLongDataIdEntitySetTimerValue = 61, 
  scComSAMLightClientCtrlLongDataIdEntitySetInOutValue = 62, 
  scComSAMLightClientCtrlLongDataIdEntitySetOutputPulse = 64, 
  scComSAMLightClientCtrlLongDataIdEntitySetInOutLevel = 65, 
  scComSAMLightClientCtrlLongDataIdEntityGetTimerValue = 66, 
  scComSAMLightClientCtrlLongDataIdEntityGetInOutValue = 67, 
  scComSAMLightClientCtrlLongDataIdEntityGetOutputPulse = 69, 
  scComSAMLightClientCtrlLongDataIdEntityGetInOutLevel = 70, 
  scComSAMLightClientCtrlLongDataIdEntitySerialStartValue = 71, 
  scComSAMLightClientCtrlLongDataIdEntitySerialIncrValue = 72, 
  scComSAMLightClientCtrlLongDataIdEntitySerialCurrValue = 73, 
  scComSAMLightClientCtrlLongDataIdEntitySerialBeatCount = 79, 
  scComSAMLightClientCtrlLongDataIdEntitySerialResetCount = 80, 
  scComSAMLightClientCtrlLongDataIdEntityOpticFlags = 75, 
  scComSAMLightClientCtrlLongDataIdEntitySplittable = 76, 
  scComSAMLightClientCtrlLongDataIdEntityMarkFlagMarkContour = 1, 
  scComSAMLightClientCtrlLongDataIdEntityMarkFlagMarkHatch = 2, 
  scComSAMLightClientCtrlLongDataIdEntityOpticFlagContour = 1, 
  scComSAMLightClientCtrlLongDataIdEntityOpticFlagHatch = 2, 
  scComSAMLightClientCtrlLongDataIdEntityLayerCount = 111, 
  scComSAMLightClientCtrlLongDataIdBitmapModeInvert = 1, 
  scComSAMLightClientCtrlLongDataIdBitmapModeGreyscale = 2, 
  scComSAMLightClientCtrlLongDataIdBitmapModeDrillmode = 4, 
  scComSAMLightClientCtrlLongDataIdBitmapModeBidirectional = 8, 
  scComSAMLightClientCtrlLongDataIdBitmapModeStartlastline = 16, 
  scComSAMLightClientCtrlLongDataIdBitmapModeNolineincr = 32, 
  scComSAMLightClientCtrlLongDataIdBitmapModeShowBitmap = 256, 
  scComSAMLightClientCtrlLongDataIdBitmapModeShowScanner = 512, 
  scComSAMLightClientCtrlLongDataIdBitmapModeScanXDir = 1024, 
  scComSAMLightClientCtrlLongDataIdEntityGetPen = 74, 
  scComSAMLightClientCtrlLongDataIdEntitySerialNumLines = 77, 
  scComSAMLightClientCtrlLongDataIdEntitySetAsBackgroundEntity = 78, 
  scComSAMLightClientCtrlLongDataIdEntitySetAsHiddenEntity = 112, 
  scComSAMLightClientCtrlLongDataIdSpiralNumInnerRotations = 113, 
  scComSAMLightClientCtrlLongDataIdSpiralNumOuterRotations = 114, 
  scComSAMLightClientCtrlLongDataIdSpiralNumOuterSegments = 115, 
  scComSAMLightClientCtrlLongDataIdSpiralFlags = 116, 
  scComSAMLightClientCtrlLongDataIdEntitySerialNumModesFlags = 117, 
  scComSAMLightClientCtrlLongDataIdEntityGroupPenPaths = 118, 
  scComSAMLightClientCtrlLongDataIdEntityGroupCluster = 119, 
  scComSAMLightClientCtrlLongDataIdEntityMirrorOnPlane = 120, 
  scComSAMLightClientCtrlLongDataIdEntityOutputAsBitmap = 121, 
  scComSAMLightClientCtrlDoubleDataIdBitmapIntensity = 33, 
  scComSAMLightClientCtrlDoubleDataIdBitmapBrightness = 34, 
  scComSAMLightClientCtrlDoubleDataIdBitmapDitherstep = 35, 
  scComSAMLightClientCtrlDoubleDataIdTextOrientation = 36, 
  scComSAMLightClientCtrlDoubleDataIdHatchDistance1 = 37, 
  scComSAMLightClientCtrlDoubleDataIdHatchAngle1 = 38, 
  scComSAMLightClientCtrlDoubleDataIdHatchMinjump1 = 39, 
  scComSAMLightClientCtrlDoubleDataIdHatchStartoffset1 = 40, 
  scComSAMLightClientCtrlDoubleDataIdHatchLinereduct1 = 41, 
  scComSAMLightClientCtrlDoubleDataIdHatchEndoffset1 = 42, 
  scComSAMLightClientCtrlDoubleDataIdHatchBeamcompensation1 = 43, 
  scComSAMLightClientCtrlDoubleDataIdHatchNumloops1 = 44, 
  scComSAMLightClientCtrlDoubleDataIdHatchDistance2 = 45, 
  scComSAMLightClientCtrlDoubleDataIdHatchAngle2 = 46, 
  scComSAMLightClientCtrlDoubleDataIdHatchMinjump2 = 47, 
  scComSAMLightClientCtrlDoubleDataIdHatchStartoffset2 = 48, 
  scComSAMLightClientCtrlDoubleDataIdHatchLinereduct2 = 49, 
  scComSAMLightClientCtrlDoubleDataIdHatchEndoffset2 = 50, 
  scComSAMLightClientCtrlDoubleDataIdHatchBeamcompensation2 = 51, 
  scComSAMLightClientCtrlDoubleDataIdHatchNumloops2 = 52, 
  scComSAMLightClientCtrlDoubleDataIdBarcodeLinereduction = 69, 
  scComSAMLightClientCtrlDoubleDataIdMotfOffset = 70, 
  scComSAMLightClientCtrlDoubleDataIdEntityRotationAngle = 71, 
  scComSAMLightClientCtrlEntityArrayOrderFlagMainDirX = 1024, 
  scComSAMLightClientCtrlEntityArrayOrderFlagNegX = 256, 
  scComSAMLightClientCtrlEntityArrayOrderFlagNegY = 512, 
  scComSAMLightClientCtrlEntityArrayOrderFlagBiDir = 2048, 
  scComSAMLightClientCtrlDoubleDataIdFlagDontUpdateView = 65536, 
  scComSAMLightClientCtrlDoubleDataIdFlagDontUpdateEntity = 131072, 
  scComSAMLightClientCtrlDoubleDataIdFlagToplevelOnly = 262144, 
  scComSAMLightClientCtrlDoubleDataIdTextSize = 1, 
  scComSAMLightClientCtrlDoubleDataIdTextCharSpacing = 2, 
  scComSAMLightClientCtrlDoubleDataIdTextLengthLimit = 3, 
  scComSAMLightClientCtrlDoubleDataIdTextHeightLimit = 4, 
  scComSAMLightClientCtrlDoubleDataIdTextRadius = 5, 
  scComSAMLightClientCtrlDoubleDataIdTextStartAngle = 6, 
  scComSAMLightClientCtrlDoubleDataIdTextPointResolution = 7, 
  scComSAMLightClientCtrlDoubleDataIdTextBaseline = 8, 
  scComSAMLightClientCtrlDoubleDataIdTextRadialCenterX = 9, 
  scComSAMLightClientCtrlDoubleDataIdTextRadialCenterY = 10, 
  scComSAMLightClientCtrlDoubleDataIdDataMatrixCellSizeX = 72, 
  scComSAMLightClientCtrlDoubleDataIdDataMatrixCellSizeY = 73, 
  scComSAMLightClientCtrlDoubleDataIdDataMatrixQuietZoneX = 81, 
  ScComSAMLightClientCtrlDoubleDataIdDataMatrixQuietZoneY = 82, 
  scComSAMLightClientCtrlDoubleDataIdSpiral2DInnerRadius = 74, 
  scComSAMLightClientCtrlDoubleDataIdSpiral2DOuterRadius = 75, 
  scComSAMLightClientCtrlDoubleDataIdSpiral2DRise = 76, 
  scComSAMLIghtClientCtrlDoubleDataIdEllipse2DRadiusX = 77, 
  scComSAMLIghtClientCtrlDoubleDataIdEllipse2DRadiusY = 78, 
  scComSAMLIghtClientCtrlDoubleDataIdEllipse2DCenterX = 79, 
  scComSAMLIghtClientCtrlDoubleDataIdEllipse2DCenterY = 80, 
  scComSAMLightClientCtrlStringDataIdFlagDontUpdateView = 65536, 
  scComSAMLightClientCtrlStringDataIdFlagDontUpdateEntity = 131072, 
  scComSAMLightClientCtrlStringDataIdFlagToplevelOnly = 2097152, 
  scComSAMLightClientCtrlStringDataIdFlagSelected = 4194304, 
  scComSAMLightClientCtrlStringDataIdTextFontName = 1, 
  scComSAMLightClientCtrlStringDataIdTextText = 2, 
  scComSAMLightClientCtrlStringDataIdGetToplevelEntity = 17, 
  scComSAMLightClientCtrlStringDataIdSetToplevelEntity = 25, 
  scComSAMLightClientCtrlStringDataIdFindEntityWithText = 18, 
  scComSAMLightClientCtrlStringDataIdSetBarcodeType = 19, 
  scComSAMLightClientCtrlStringDataIdGetBarcodeType = 20, 
  scComSAMLightClientCtrlStringDataIdGetEntityName = 21, 
  scComSAMLightClientCtrlStringDataIdGetEntityType = 22, 
  scComSAMLightClientCtrlStringDataIdSetEntityName = 23, 
  scComSAMLightClientCtrlStringDataIdEntitySerialASCIIFileName = 24, 
  scComSAMLightClientCtrlStringDataIdSetMotionCtrls = 26, 
  scComSAMLightClientCtrlStringDataIdSerialNumberFormatString = 27, 
  scComSAMLightClientCtrlStringDataIdArrayCopyHard = 28, 
  scComSAMLightClientCtrlStringDataIdTranslate = 29, 
  scComSAMLightClientCtrlStringDataIdRotate = 30, 
  scComSAMLightClientCtrlStringDataIdOutlineAndRotate = 31, 
  scComSAMLightClientCtrlStringDataIdBarCodeFormatString = 32, 
  scComSAMLightClientCtrlStringDataIdSetMotionCtrlsString = 33, 
  scComSAMLightClientCtrlProcessFlashJobModeStoreCurrentToFlash = 1, 
  scComSAMLightClientCtrlProcessFlashJobModeLoadFromFlash = 2, 
  scComSAMLightClientCtrlProcessFlashJobModeStoreFromDiskToFlash = 3, 
  scComSAMLightClientCtrlFlashCommandFlagWaitForTimeOut = 0x80000000, 
  scComSAMLightClientCtrlLongDataIdDataMatrixExSymbolModeRectangle = 1, 
  scComSAMLightClientCtrlLongDataIdDataMatrixExSymbolModeAutoSize = 65536, 
  scComSAMLightClientCtrlLongDataIdDataMatrixExSymbolModeAutoEncodation = 131072, 
  scComSAMLightClientCtrlLongDataIdDataMatrixExSymbolModeDots = 262144, 
  scComSAMLightClientCtrlLongDataIdDataMatrixExSymbolModeTilde = 524288, 
  scComSAMLightClientCtrlLongDataIdDataMatrixExSymbolModeCells = 1048576, 
  scComSAMLightClientCtrlLongDataIdDataMatrixExSymbolModeNoFinderCells = 2097152, 
  scComSAMLightClientCtrlLongDataIdDataMatrixExSymbolModeEllipse = 4194304, 
  scComSAMLightClientCtrlLongDataIdDataMatrixExSymbolModeTextFreelyEditable = 8388608, 
  scComSAMLightClientCtrlLongDataIdDataMatrixExEncodationAscii = 1, 
  scComSAMLightClientCtrlLongDataIdDataMatrixExEncodationBase256 = 2, 
  scComSAMLightClientCtrlLongDataIdDataMatrixExEncodationC40 = 3, 
  scComSAMLightClientCtrlLongDataIdDataMatrixExEncodationText = 4, 
  scComSAMLightClientCtrlLongDataIdDataMatrixExEncodationAnsiX12 = 5, 
  scComSAMLightClientCtrlLongDataIdDataMatrixExEncodationEdifact = 6, 
  scComSAMLightClientCtrlLongDataIdBarcodeFlagVariableLength = 1, 
  scComSAMLightClientCtrlLongDataIdBarcodeFlagInvert = 2, 
  scComSAMLightClientCtrlLongDataIdBarcodeFlagDisableAutoQuietZone = 4, 
  scComSAMLightClientCtrlLongDataIdBarcodeFlagQuietZoneAbsolute = 8, 
  scComSAMLightClientCtrlLongDataIdBarcodeFlagGenerateCheckCode = 16, 
  scComSAMLightClientCtrlLongDataIdBarcodeFlagInvertExceptText = 32, 
  scComSAMLightClientCtrlLongDataIdBarcodeFlagInvertCellMode = 64, 
  scComSAMLightClientCtrlLongDataIdBarcodeFlagCompactMode = 128, 
  scComSAMLightClientCtrlLongDataIdHatchFlagAllLines = 1024, 
  scComSAMLightClientCtrlLongDataIdHatchFlagNoSort = 256, 
  scComSAMLightClientCtrlLongDataIdHatchFlagKeepAngle = 524288, 
  scComSAMLightClientCtrlLongDataIdHatchFlagEqualizeDistance = 16777216, 
  scComSAMLightClientCtrlLongDataIdHatchFlagDontFillRest = 16384, 
  scComSAMLightClientCtrlLongDataIdHatchFlagPolyLineBeamComp = 8192, 
  scComSAMLightClientCtrlLongDataIdSetHatchFlags1 = 81, 
  scComSAMLightClientCtrlLongDataIdClearHatchFlags1 = 91, 
  scComSAMLightClientCtrlLongDataIdSetHatchFlags2 = 82, 
  scComSAMLightClientCtrlLongDataIdClearHatchFlags2 = 92, 
  scComSAMLightClientCtrlLongDataIdBarcodeSetFlags = 101, 
  scComSAMLightClientCtrlLongDataIdBarcodeClearFlags = 102, 
  scComSAMLightClientCtrlLongDataIdDataMatrixSetSymbolMode = 103, 
  scComSAMLightClientCtrlLongDataIdDataMatrixClearSymbolMode = 104, 
  scComSAMLightClientCtrlLongDataIdDataMatrixSymbolSize = 105, 
  scComSAMLightClientCtrlLongDataIdDataMatrixEncoding = 106, 
  scComSAMLightClientCtrlLongDataIdDataBarcodeTextEnable = 107, 
  scComSAMLightClientCtrlLongDataIdDataBarcodeLevel = 108, 
  scComSAMLightClientCtrlLongDataIdDataBarcodeMode = 109, 
  scComSAMLightClientCtrlLongDataIdDataBarcodeSize = 110, 
  scComSAMLightSaveFlagEntities = 1, 
  scComSAMLightSaveFlagMaterials = 2, 
  scComSAMLightSaveFlagUseCurrentJobName = 4
} __MIDL___MIDL_itf_sc_samlight_client_ctrl_type_lib_0001_0066_0001;


// *********************************************************************//
// Declaration of Structures and Unions defined in Type Library           
// *********************************************************************//
struct tagsc_com_pen_path
{
  short pen;
  short enable;
  short penToUse[5];
  int loopOfPenToUse[5];
};

// *********************************************************************//
// Interface: SC_IConnectionToolCtrl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7EB1D711-5F08-4708-B37C-BA0EC0A72F65}
// *********************************************************************//
interface SC_IConnectionToolCtrl  : public IDispatch
{
public:
  // [2000] property ScConnectionType
  virtual HRESULT STDMETHODCALLTYPE get_ScConnectionType(long* Type/*[out,retval]*/) = 0;
  // [2000] property ScConnectionType
  virtual HRESULT STDMETHODCALLTYPE set_ScConnectionType(long Type/*[in]*/) = 0;
  // [2001] method ScInitWriteBuffer
  virtual HRESULT STDMETHODCALLTYPE ScInitWriteBuffer(long* Result/*[out,retval]*/) = 0;
  // [2002] method ScInitReadBuffer
  virtual HRESULT STDMETHODCALLTYPE ScInitReadBuffer(long* Result/*[out,retval]*/) = 0;
  // [2003] method ScOpenConnection
  virtual HRESULT STDMETHODCALLTYPE ScOpenConnection(BSTR ListenName/*[in]*/, 
                                                     long ListenPort/*[in]*/, 
                                                     BSTR RecipientName/*[in]*/, 
                                                     long RecipientPort/*[in]*/, 
                                                     long* Result/*[out,retval]*/) = 0;
  // [2004] method ScAddString
  virtual HRESULT STDMETHODCALLTYPE ScAddString(BSTR Str/*[in]*/, long* Result/*[out,retval]*/) = 0;
  // [2005] method ScAddLong
  virtual HRESULT STDMETHODCALLTYPE ScAddLong(long Value/*[in]*/, long* Result/*[out,retval]*/) = 0;
  // [2006] method ScAddDouble
  virtual HRESULT STDMETHODCALLTYPE ScAddDouble(double Value/*[in]*/, long* Result/*[out,retval]*/) = 0;
  // [2007] method ScGetString
  virtual HRESULT STDMETHODCALLTYPE ScGetString(BSTR* Str/*[out,retval]*/) = 0;
  // [2008] method ScGetLong
  virtual HRESULT STDMETHODCALLTYPE ScGetLong(long* Value/*[out,retval]*/) = 0;
  // [2009] method ScGetDouble
  virtual HRESULT STDMETHODCALLTYPE ScGetDouble(double* Value/*[out,retval]*/) = 0;
  // [2010] method ScSend
  virtual HRESULT STDMETHODCALLTYPE ScSend(long* Result/*[out,retval]*/) = 0;
  // [2011] method ScWaitForReceived
  virtual HRESULT STDMETHODCALLTYPE ScWaitForReceived(long TimeOut/*[in]*/, 
                                                      long* Result/*[out,retval]*/) = 0;
  // [2012] method ScGetLastResult
  virtual HRESULT STDMETHODCALLTYPE ScGetLastResult(long* Value/*[out,retval]*/) = 0;
  // [2013] property ScMode
  virtual HRESULT STDMETHODCALLTYPE get_ScMode(long* Mode/*[out,retval]*/) = 0;
  // [2013] property ScMode
  virtual HRESULT STDMETHODCALLTYPE set_ScMode(long Mode/*[in]*/) = 0;
  // [2014] method ScCreateSocket
  virtual HRESULT STDMETHODCALLTYPE ScCreateSocket(BSTR ListenName/*[in]*/, long ListenPort/*[in]*/, 
                                                   long* Result/*[out,retval]*/) = 0;
  // [2015] method ScConnectTo
  virtual HRESULT STDMETHODCALLTYPE ScConnectTo(BSTR RecipientName/*[in]*/, 
                                                long RecipientPort/*[in]*/, 
                                                long* Result/*[out,retval]*/) = 0;
  // [2016] method ScClose
  virtual HRESULT STDMETHODCALLTYPE ScClose(long* Result/*[out,retval]*/) = 0;
  // [2017] method ScGetLastResult
  virtual HRESULT STDMETHODCALLTYPE ScGetLastError(long* Value/*[out,retval]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_ScConnectionType(void)
  {
    long Type;
    OLECHECK(this->get_ScConnectionType((long*)&Type));
    return Type;
  }

  long __fastcall ScInitWriteBuffer(void)
  {
    long Result;
    OLECHECK(this->ScInitWriteBuffer((long*)&Result));
    return Result;
  }

  long __fastcall ScInitReadBuffer(void)
  {
    long Result;
    OLECHECK(this->ScInitReadBuffer((long*)&Result));
    return Result;
  }

  long __fastcall ScOpenConnection(BSTR ListenName/*[in]*/, long ListenPort/*[in]*/, 
                                   BSTR RecipientName/*[in]*/, long RecipientPort/*[in]*/)
  {
    long Result;
    OLECHECK(this->ScOpenConnection(ListenName, ListenPort, RecipientName, RecipientPort, (long*)&Result));
    return Result;
  }

  long __fastcall ScAddString(BSTR Str/*[in]*/)
  {
    long Result;
    OLECHECK(this->ScAddString(Str, (long*)&Result));
    return Result;
  }

  long __fastcall ScAddLong(long Value/*[in]*/)
  {
    long Result;
    OLECHECK(this->ScAddLong(Value, (long*)&Result));
    return Result;
  }

  long __fastcall ScAddDouble(double Value/*[in]*/)
  {
    long Result;
    OLECHECK(this->ScAddDouble(Value, (long*)&Result));
    return Result;
  }

  BSTR __fastcall ScGetString(void)
  {
    BSTR Str = 0;
    OLECHECK(this->ScGetString((BSTR*)&Str));
    return Str;
  }

  long __fastcall ScGetLong(void)
  {
    long Value;
    OLECHECK(this->ScGetLong((long*)&Value));
    return Value;
  }

  double __fastcall ScGetDouble(void)
  {
    double Value;
    OLECHECK(this->ScGetDouble((double*)&Value));
    return Value;
  }

  long __fastcall ScSend(void)
  {
    long Result;
    OLECHECK(this->ScSend((long*)&Result));
    return Result;
  }

  long __fastcall ScWaitForReceived(long TimeOut/*[in]*/)
  {
    long Result;
    OLECHECK(this->ScWaitForReceived(TimeOut, (long*)&Result));
    return Result;
  }

  long __fastcall ScGetLastResult(void)
  {
    long Value;
    OLECHECK(this->ScGetLastResult((long*)&Value));
    return Value;
  }

  long __fastcall get_ScMode(void)
  {
    long Mode;
    OLECHECK(this->get_ScMode((long*)&Mode));
    return Mode;
  }

  long __fastcall ScCreateSocket(BSTR ListenName/*[in]*/, long ListenPort/*[in]*/)
  {
    long Result;
    OLECHECK(this->ScCreateSocket(ListenName, ListenPort, (long*)&Result));
    return Result;
  }

  long __fastcall ScConnectTo(BSTR RecipientName/*[in]*/, long RecipientPort/*[in]*/)
  {
    long Result;
    OLECHECK(this->ScConnectTo(RecipientName, RecipientPort, (long*)&Result));
    return Result;
  }

  long __fastcall ScClose(void)
  {
    long Result;
    OLECHECK(this->ScClose((long*)&Result));
    return Result;
  }

  long __fastcall ScGetLastError(void)
  {
    long Value;
    OLECHECK(this->ScGetLastError((long*)&Value));
    return Value;
  }


  __property   long            ScConnectionType = {read = get_ScConnectionType, write = set_ScConnectionType};
  __property   long            ScMode = {read = get_ScMode, write = set_ScMode};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: SC_DConnectionToolEvents
// Flags:     (4096) Dispatchable
// GUID:      {9B5B5103-C107-4CD7-9D58-AA11408037A3}
// *********************************************************************//
interface SC_DConnectionToolEvents : public TDispWrapper<IDispatch>
{
  void __fastcall ScReceived(long MessageSize)
  {
    _TDispID _dispid(/* ScReceived */ DISPID(2000));
    TAutoArgs<1> _args;
    _args[1] = MessageSize /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: _DSamlight_client_ctrl_ocx
// Flags:     (4112) Hidden Dispatchable
// GUID:      {05D31AA6-1306-4DA0-9AE2-A8771FF6FA94}
// *********************************************************************//
interface _DSamlight_client_ctrl_ocx : public TDispWrapper<IDispatch>
{
  long __fastcall ScIsRunning()
  {
    _TDispID _dispid(/* ScIsRunning */ DISPID(1));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScExecCommand(long CmdID)
  {
    _TDispID _dispid(/* ScExecCommand */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = CmdID /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScChangeTextByName(BSTR EntityName, BSTR Text)
  {
    _TDispID _dispid(/* ScChangeTextByName */ DISPID(3));
    TAutoArgs<2> _args;
    _args[1] = EntityName /*[VT_BSTR:0]*/;
    _args[2] = Text /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScMarkEntityByName(BSTR EntityName, long WaitForMarkEnd)
  {
    _TDispID _dispid(/* ScMarkEntityByName */ DISPID(4));
    TAutoArgs<2> _args;
    _args[1] = EntityName /*[VT_BSTR:0]*/;
    _args[2] = WaitForMarkEnd /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScIsMarking()
  {
    _TDispID _dispid(/* ScIsMarking */ DISPID(5));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScStopMarking()
  {
    _TDispID _dispid(/* ScStopMarking */ DISPID(6));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScLoadJob(BSTR FileName, long LoadEntities, long OverwriteEntities, 
                            long LoadMaterials)
  {
    _TDispID _dispid(/* ScLoadJob */ DISPID(7));
    TAutoArgs<4> _args;
    _args[1] = FileName /*[VT_BSTR:0]*/;
    _args[2] = LoadEntities /*[VT_I4:0]*/;
    _args[3] = OverwriteEntities /*[VT_I4:0]*/;
    _args[4] = LoadMaterials /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  double __fastcall ScGetEntityOutline(BSTR EntityName, long Index)
  {
    _TDispID _dispid(/* ScGetEntityOutline */ DISPID(8));
    TAutoArgs<2> _args;
    _args[1] = EntityName /*[VT_BSTR:0]*/;
    _args[2] = Index /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  double __fastcall ScGetWorkingArea(long Index)
  {
    _TDispID _dispid(/* ScGetWorkingArea */ DISPID(9));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScOpticMatrixReset()
  {
    _TDispID _dispid(/* ScOpticMatrixReset */ DISPID(10));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScOpticMatrixTranslate(double X, double Y, double Z)
  {
    _TDispID _dispid(/* ScOpticMatrixTranslate */ DISPID(11));
    TAutoArgs<3> _args;
    _args[1] = X /*[VT_R8:0]*/;
    _args[2] = Y /*[VT_R8:0]*/;
    _args[3] = Z /*[VT_R8:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScOpticMatrixRotate(double CenterX, double CenterY, double Angle)
  {
    _TDispID _dispid(/* ScOpticMatrixRotate */ DISPID(12));
    TAutoArgs<3> _args;
    _args[1] = CenterX /*[VT_R8:0]*/;
    _args[2] = CenterY /*[VT_R8:0]*/;
    _args[3] = Angle /*[VT_R8:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScSetMarkFlags(long Flags)
  {
    _TDispID _dispid(/* ScSetMarkFlags */ DISPID(13));
    TAutoArgs<1> _args;
    _args[1] = Flags /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScGetMarkFlags()
  {
    _TDispID _dispid(/* ScGetMarkFlags */ DISPID(14));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScOpenEthernetConnection(BSTR SenderAddr, long SenderPort, BSTR RecipientAddr, 
                                           long RecipientPort)
  {
    _TDispID _dispid(/* ScOpenEthernetConnection */ DISPID(15));
    TAutoArgs<4> _args;
    _args[1] = SenderAddr /*[VT_BSTR:0]*/;
    _args[2] = SenderPort /*[VT_I4:0]*/;
    _args[3] = RecipientAddr /*[VT_BSTR:0]*/;
    _args[4] = RecipientPort /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScCloseEthernetConnection()
  {
    _TDispID _dispid(/* ScCloseEthernetConnection */ DISPID(16));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScGetInterfaceVersion()
  {
    _TDispID _dispid(/* ScGetInterfaceVersion */ DISPID(17));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScSetDoubleValue(long Type, double Value)
  {
    _TDispID _dispid(/* ScSetDoubleValue */ DISPID(18));
    TAutoArgs<2> _args;
    _args[1] = Type /*[VT_I4:0]*/;
    _args[2] = Value /*[VT_R8:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  double __fastcall ScGetDoubleValue(long Type)
  {
    _TDispID _dispid(/* ScGetDoubleValue */ DISPID(19));
    TAutoArgs<1> _args;
    _args[1] = Type /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScSetLongValue(long Type, long Value)
  {
    _TDispID _dispid(/* ScSetLongValue */ DISPID(20));
    TAutoArgs<2> _args;
    _args[1] = Type /*[VT_I4:0]*/;
    _args[2] = Value /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScGetLongValue(long Type)
  {
    _TDispID _dispid(/* ScGetLongValue */ DISPID(21));
    TAutoArgs<1> _args;
    _args[1] = Type /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScSetLongData(long Type, VARIANT* Data, BSTR FileName)
  {
    _TDispID _dispid(/* ScSetLongData */ DISPID(22));
    TAutoArgs<3> _args;
    _args[1] = Type /*[VT_I4:0]*/;
    _args[2] = Data /*[VT_VARIANT:1]*/;
    _args[3] = FileName /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScTranslateEntity(BSTR EntityName, double X, double Y, double Z)
  {
    _TDispID _dispid(/* ScTranslateEntity */ DISPID(23));
    TAutoArgs<4> _args;
    _args[1] = EntityName /*[VT_BSTR:0]*/;
    _args[2] = X /*[VT_R8:0]*/;
    _args[3] = Y /*[VT_R8:0]*/;
    _args[4] = Z /*[VT_R8:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScScaleEntity(BSTR EntityName, double ScaleX, double ScaleY, double ScaleZ)
  {
    _TDispID _dispid(/* ScScaleEntity */ DISPID(24));
    TAutoArgs<4> _args;
    _args[1] = EntityName /*[VT_BSTR:0]*/;
    _args[2] = ScaleX /*[VT_R8:0]*/;
    _args[3] = ScaleY /*[VT_R8:0]*/;
    _args[4] = ScaleZ /*[VT_R8:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScRotateEntity(BSTR EntityName, double X, double Y, double Angle)
  {
    _TDispID _dispid(/* ScRotateEntity */ DISPID(25));
    TAutoArgs<4> _args;
    _args[1] = EntityName /*[VT_BSTR:0]*/;
    _args[2] = X /*[VT_R8:0]*/;
    _args[3] = Y /*[VT_R8:0]*/;
    _args[4] = Angle /*[VT_R8:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScImport(BSTR EntityName, BSTR FileName, BSTR Type, double Resolution, long Flags)
  {
    _TDispID _dispid(/* ScImport */ DISPID(26));
    TAutoArgs<5> _args;
    _args[1] = EntityName /*[VT_BSTR:0]*/;
    _args[2] = FileName /*[VT_BSTR:0]*/;
    _args[3] = Type /*[VT_BSTR:0]*/;
    _args[4] = Resolution /*[VT_R8:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScSetEntityLongData(BSTR EntityName, long DataId, long Data)
  {
    _TDispID _dispid(/* ScSetEntityLongData */ DISPID(27));
    TAutoArgs<3> _args;
    _args[1] = EntityName /*[VT_BSTR:0]*/;
    _args[2] = DataId /*[VT_I4:0]*/;
    _args[3] = Data /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScGetEntityLongData(BSTR EntityName, long DataId)
  {
    _TDispID _dispid(/* ScGetEntityLongData */ DISPID(28));
    TAutoArgs<2> _args;
    _args[1] = EntityName /*[VT_BSTR:0]*/;
    _args[2] = DataId /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScDeleteEntity(BSTR EntityName)
  {
    _TDispID _dispid(/* ScDeleteEntity */ DISPID(29));
    TAutoArgs<1> _args;
    _args[1] = EntityName /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScGetLongData(long Type, VARIANT* Data, BSTR FileName)
  {
    _TDispID _dispid(/* ScGetLongData */ DISPID(30));
    TAutoArgs<3> _args;
    _args[1] = Type /*[VT_I4:0]*/;
    _args[2] = Data /*[VT_VARIANT:1]*/;
    _args[3] = FileName /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScGetConnectionStatus()
  {
    _TDispID _dispid(/* ScGetConnectionStatus */ DISPID(31));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScSetStringValue(long Type, BSTR Value)
  {
    _TDispID _dispid(/* ScSetStringValue */ DISPID(32));
    TAutoArgs<2> _args;
    _args[1] = Type /*[VT_I4:0]*/;
    _args[2] = Value /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScGetStringValue(long Type, BSTR* Value)
  {
    _TDispID _dispid(/* ScGetStringValue */ DISPID(33));
    TAutoArgs<2> _args;
    _args[1] = Type /*[VT_I4:0]*/;
    _args[2] = Value /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScShutDown()
  {
    _TDispID _dispid(/* ScShutDown */ DISPID(34));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScGetOpticMatrix(long Index, double* Value)
  {
    _TDispID _dispid(/* ScGetOpticMatrix */ DISPID(35));
    TAutoArgs<2> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    _args[2] = Value /*[VT_R8:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScMoveAbs(double X, double Y, double Z)
  {
    _TDispID _dispid(/* ScMoveAbs */ DISPID(36));
    TAutoArgs<3> _args;
    _args[1] = X /*[VT_R8:0]*/;
    _args[2] = Y /*[VT_R8:0]*/;
    _args[3] = Z /*[VT_R8:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScSwitchLaser(long LaserOnOff)
  {
    _TDispID _dispid(/* ScSwitchLaser */ DISPID(37));
    TAutoArgs<1> _args;
    _args[1] = LaserOnOff /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScSetPen(long pen)
  {
    _TDispID _dispid(/* ScSetPen */ DISPID(38));
    TAutoArgs<1> _args;
    _args[1] = pen /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScGetPen(long* pen)
  {
    _TDispID _dispid(/* ScGetPen */ DISPID(39));
    TAutoArgs<1> _args;
    _args[1] = pen /*[VT_I4:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScShowApp(long Show)
  {
    _TDispID _dispid(/* ScShowApp */ DISPID(40));
    TAutoArgs<1> _args;
    _args[1] = Show /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScSetHead(long Head)
  {
    _TDispID _dispid(/* ScSetHead */ DISPID(41));
    TAutoArgs<1> _args;
    _args[1] = Head /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScGetHead(long* Head)
  {
    _TDispID _dispid(/* ScGetHead */ DISPID(42));
    TAutoArgs<1> _args;
    _args[1] = Head /*[VT_I4:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScSaveJob(BSTR FileName, long Flags)
  {
    _TDispID _dispid(/* ScSaveJob */ DISPID(43));
    TAutoArgs<2> _args;
    _args[1] = FileName /*[VT_BSTR:0]*/;
    _args[2] = Flags /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScSetEntityDoubleData(BSTR EntityName, long DataId, double Data)
  {
    _TDispID _dispid(/* ScSetEntityDoubleData */ DISPID(44));
    TAutoArgs<3> _args;
    _args[1] = EntityName /*[VT_BSTR:0]*/;
    _args[2] = DataId /*[VT_I4:0]*/;
    _args[3] = Data /*[VT_R8:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScGetEntityDoubleData(BSTR EntityName, long DataId, double* Data)
  {
    _TDispID _dispid(/* ScGetEntityDoubleData */ DISPID(45));
    TAutoArgs<3> _args;
    _args[1] = EntityName /*[VT_BSTR:0]*/;
    _args[2] = DataId /*[VT_I4:0]*/;
    _args[3] = Data /*[VT_R8:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScSetEntityStringData(BSTR EntityName, long DataId, BSTR Data)
  {
    _TDispID _dispid(/* ScSetEntityStringData */ DISPID(46));
    TAutoArgs<3> _args;
    _args[1] = EntityName /*[VT_BSTR:0]*/;
    _args[2] = DataId /*[VT_I4:0]*/;
    _args[3] = Data /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScGetEntityStringData(BSTR EntityName, long DataId, BSTR* Data)
  {
    _TDispID _dispid(/* ScGetEntityStringData */ DISPID(47));
    TAutoArgs<3> _args;
    _args[1] = EntityName /*[VT_BSTR:0]*/;
    _args[2] = DataId /*[VT_I4:0]*/;
    _args[3] = Data /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScSetStringLongValue(long Type, BSTR SValue, long LValue)
  {
    _TDispID _dispid(/* ScSetStringLongValue */ DISPID(48));
    TAutoArgs<3> _args;
    _args[1] = Type /*[VT_I4:0]*/;
    _args[2] = SValue /*[VT_BSTR:0]*/;
    _args[3] = LValue /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScSetStringDblValue(long Type, BSTR SValue, double DValue)
  {
    _TDispID _dispid(/* ScSetStringDblValue */ DISPID(49));
    TAutoArgs<3> _args;
    _args[1] = Type /*[VT_I4:0]*/;
    _args[2] = SValue /*[VT_BSTR:0]*/;
    _args[3] = DValue /*[VT_R8:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScGetStringDblValue(long Type, BSTR SValue, double* RValue)
  {
    _TDispID _dispid(/* ScGetStringDblValue */ DISPID(50));
    TAutoArgs<3> _args;
    _args[1] = Type /*[VT_I4:0]*/;
    _args[2] = SValue /*[VT_BSTR:0]*/;
    _args[3] = RValue /*[VT_R8:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScGetIDStringData(long Type, long Index, BSTR* Data)
  {
    _TDispID _dispid(/* ScGetIDStringData */ DISPID(51));
    TAutoArgs<3> _args;
    _args[1] = Type /*[VT_I4:0]*/;
    _args[2] = Index /*[VT_I4:0]*/;
    _args[3] = Data /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScOpenTCPConnection(BSTR RecipientAddr, long RecipientPort)
  {
    _TDispID _dispid(/* ScOpenTCPConnection */ DISPID(52));
    TAutoArgs<2> _args;
    _args[1] = RecipientAddr /*[VT_BSTR:0]*/;
    _args[2] = RecipientPort /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScOpenUDPConnection(BSTR SenderAddr, long SenderPort, BSTR RecipientAddr, 
                                      long RecipientPort)
  {
    _TDispID _dispid(/* ScOpenUDPConnection */ DISPID(53));
    TAutoArgs<4> _args;
    _args[1] = SenderAddr /*[VT_BSTR:0]*/;
    _args[2] = SenderPort /*[VT_I4:0]*/;
    _args[3] = RecipientAddr /*[VT_BSTR:0]*/;
    _args[4] = RecipientPort /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScOpticMatrixScale(double ScaleX, double ScaleY)
  {
    _TDispID _dispid(/* ScOpticMatrixScale */ DISPID(54));
    TAutoArgs<2> _args;
    _args[1] = ScaleX /*[VT_R8:0]*/;
    _args[2] = ScaleY /*[VT_R8:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScSetPixelMapForPen(long pen, long pixel_zone0, long pixel_zone1, long pixel_zone2
                                      , long pixel_zone3, long pixel_zone4, long pixel_zone5)
  {
    _TDispID _dispid(/* ScSetPixelMapForPen */ DISPID(55));
    TAutoArgs<7> _args;
    _args[1] = pen /*[VT_I4:0]*/;
    _args[2] = pixel_zone0 /*[VT_I4:0]*/;
    _args[3] = pixel_zone1 /*[VT_I4:0]*/;
    _args[4] = pixel_zone2 /*[VT_I4:0]*/;
    _args[5] = pixel_zone3 /*[VT_I4:0]*/;
    _args[6] = pixel_zone4 /*[VT_I4:0]*/;
    _args[7] = pixel_zone5 /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScSetMode(long Mode)
  {
    _TDispID _dispid(/* ScSetMode */ DISPID(56));
    TAutoArgs<1> _args;
    _args[1] = Mode /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScGetMode(long* Mode)
  {
    _TDispID _dispid(/* ScGetMode */ DISPID(57));
    TAutoArgs<1> _args;
    _args[1] = Mode /*[VT_I4:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScDuplicateEntity(BSTR EntityName, BSTR DuplicatedEntityName)
  {
    _TDispID _dispid(/* ScDuplicateEntity */ DISPID(58));
    TAutoArgs<2> _args;
    _args[1] = EntityName /*[VT_BSTR:0]*/;
    _args[2] = DuplicatedEntityName /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScProcessFlashJob(BSTR Name, long JobNum, long Mode, long Flags)
  {
    _TDispID _dispid(/* ScProcessFlashJob */ DISPID(59));
    TAutoArgs<4> _args;
    _args[1] = Name /*[VT_BSTR:0]*/;
    _args[2] = JobNum /*[VT_I4:0]*/;
    _args[3] = Mode /*[VT_I4:0]*/;
    _args[4] = Flags /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  BSTR __fastcall ScFlashCommand(BSTR Command, long Flags, BSTR* Return)
  {
    _TDispID _dispid(/* ScFlashCommand */ DISPID(60));
    TAutoArgs<3> _args;
    _args[1] = Command /*[VT_BSTR:0]*/;
    _args[2] = Flags /*[VT_I4:0]*/;
    _args[3] = Return /*[VT_BSTR:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScSetIDStringData(long Type, long Index, BSTR Data)
  {
    _TDispID _dispid(/* ScSetIDStringData */ DISPID(61));
    TAutoArgs<3> _args;
    _args[1] = Type /*[VT_I4:0]*/;
    _args[2] = Index /*[VT_I4:0]*/;
    _args[3] = Data /*[VT_BSTR:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScExport(BSTR EntityName, BSTR FileName, BSTR Type, double Resolution, long Flags)
  {
    _TDispID _dispid(/* ScExport */ DISPID(62));
    TAutoArgs<5> _args;
    _args[1] = EntityName /*[VT_BSTR:0]*/;
    _args[2] = FileName /*[VT_BSTR:0]*/;
    _args[3] = Type /*[VT_BSTR:0]*/;
    _args[4] = Resolution /*[VT_R8:0]*/;
    _args[5] = Flags /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScSlice(BSTR EntityName, BSTR LayerSolidName, double sliceThickness, 
                          long doSliceOnlySelected, long doReverseDirection)
  {
    _TDispID _dispid(/* ScSlice */ DISPID(63));
    TAutoArgs<5> _args;
    _args[1] = EntityName /*[VT_BSTR:0]*/;
    _args[2] = LayerSolidName /*[VT_BSTR:0]*/;
    _args[3] = sliceThickness /*[VT_R8:0]*/;
    _args[4] = doSliceOnlySelected /*[VT_I4:0]*/;
    _args[5] = doReverseDirection /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScSetPenPathForPen(short* pen, short* enable, short* penToUse1, 
                                     int* loopOfPenToUse1, short* penToUse2, int* loopOfPenToUse2, 
                                     short* penToUse3, int* loopOfPenToUse3, short* penToUse4, 
                                     int* loopOfPenToUse4, short* penToUse5, int* loopOfPenToUse5)
  {
    _TDispID _dispid(/* ScSetPenPathForPen */ DISPID(64));
    TAutoArgs<12> _args;
    _args[1] = pen /*[VT_I2:1]*/;
    _args[2] = enable /*[VT_I2:1]*/;
    _args[3] = penToUse1 /*[VT_I2:1]*/;
    _args[4] = loopOfPenToUse1 /*[VT_INT:1]*/;
    _args[5] = penToUse2 /*[VT_I2:1]*/;
    _args[6] = loopOfPenToUse2 /*[VT_INT:1]*/;
    _args[7] = penToUse3 /*[VT_I2:1]*/;
    _args[8] = loopOfPenToUse3 /*[VT_INT:1]*/;
    _args[9] = penToUse4 /*[VT_I2:1]*/;
    _args[10] = loopOfPenToUse4 /*[VT_INT:1]*/;
    _args[11] = penToUse5 /*[VT_I2:1]*/;
    _args[12] = loopOfPenToUse5 /*[VT_INT:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScGetPenPathForPen(short* pen, short* enable, short* penToUse1, 
                                     int* loopOfPenToUse1, short* penToUse2, int* loopOfPenToUse2, 
                                     short* penToUse3, int* loopOfPenToUse3, short* penToUse4, 
                                     int* loopOfPenToUse4, short* penToUse5, int* loopOfPenToUse5)
  {
    _TDispID _dispid(/* ScGetPenPathForPen */ DISPID(65));
    TAutoArgs<12> _args;
    _args[1] = pen /*[VT_I2:1]*/;
    _args[2] = enable /*[VT_I2:1]*/;
    _args[3] = penToUse1 /*[VT_I2:1]*/;
    _args[4] = loopOfPenToUse1 /*[VT_INT:1]*/;
    _args[5] = penToUse2 /*[VT_I2:1]*/;
    _args[6] = loopOfPenToUse2 /*[VT_INT:1]*/;
    _args[7] = penToUse3 /*[VT_I2:1]*/;
    _args[8] = loopOfPenToUse3 /*[VT_INT:1]*/;
    _args[9] = penToUse4 /*[VT_I2:1]*/;
    _args[10] = loopOfPenToUse4 /*[VT_INT:1]*/;
    _args[11] = penToUse5 /*[VT_I2:1]*/;
    _args[12] = loopOfPenToUse5 /*[VT_INT:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScRotateEntity3D(BSTR EntityName, double px, double py, double pz, double vx, 
                                   double vy, double vz, double Angle)
  {
    _TDispID _dispid(/* ScRotateEntity3D */ DISPID(66));
    TAutoArgs<8> _args;
    _args[1] = EntityName /*[VT_BSTR:0]*/;
    _args[2] = px /*[VT_R8:0]*/;
    _args[3] = py /*[VT_R8:0]*/;
    _args[4] = pz /*[VT_R8:0]*/;
    _args[5] = vx /*[VT_R8:0]*/;
    _args[6] = vy /*[VT_R8:0]*/;
    _args[7] = vz /*[VT_R8:0]*/;
    _args[8] = Angle /*[VT_R8:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScGetEntityOutline2D(BSTR EntityName, double* MinX, double* MinY, double* MaxX, 
                                       double* MaxY)
  {
    _TDispID _dispid(/* ScGetEntityOutline2D */ DISPID(67));
    TAutoArgs<5> _args;
    _args[1] = EntityName /*[VT_BSTR:0]*/;
    _args[2] = MinX /*[VT_R8:1]*/;
    _args[3] = MinY /*[VT_R8:1]*/;
    _args[4] = MaxX /*[VT_R8:1]*/;
    _args[5] = MaxY /*[VT_R8:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  long __fastcall ScGetEntityOutline3D(BSTR EntityName, double* MinX, double* MinY, double* MaxX, 
                                       double* MaxY, double* MinZ, double* MaxZ)
  {
    _TDispID _dispid(/* ScGetEntityOutline3D */ DISPID(68));
    TAutoArgs<7> _args;
    _args[1] = EntityName /*[VT_BSTR:0]*/;
    _args[2] = MinX /*[VT_R8:1]*/;
    _args[3] = MinY /*[VT_R8:1]*/;
    _args[4] = MaxX /*[VT_R8:1]*/;
    _args[5] = MaxY /*[VT_R8:1]*/;
    _args[6] = MinZ /*[VT_R8:1]*/;
    _args[7] = MaxZ /*[VT_R8:1]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }


};
// *********************************************************************//
// Interface: _DSamlight_client_ctrl_ocxEvents
// Flags:     (4096) Dispatchable
// GUID:      {5F3246AD-5086-45E1-A3DA-CB9B0BA234ED}
// *********************************************************************//
interface _DSamlight_client_ctrl_ocxEvents : public TDispWrapper<IDispatch>
{

};
#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMSC_IConnectionToolCtrl
// Interface: SC_IConnectionToolCtrl
// *********************************************************************//
template <class T /* SC_IConnectionToolCtrl */ >
class TCOMSC_IConnectionToolCtrlT : public TComInterface<SC_IConnectionToolCtrl>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMSC_IConnectionToolCtrlT() {}
  TCOMSC_IConnectionToolCtrlT(SC_IConnectionToolCtrl *intf, bool addRef = false) : TComInterface<SC_IConnectionToolCtrl>(intf, addRef) {}
  TCOMSC_IConnectionToolCtrlT(const TCOMSC_IConnectionToolCtrlT& src) : TComInterface<SC_IConnectionToolCtrl>(src) {}
  TCOMSC_IConnectionToolCtrlT& operator=(const TCOMSC_IConnectionToolCtrlT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall get_ScConnectionType(long* Type/*[out,retval]*/);
  long            __fastcall get_ScConnectionType(void);
  HRESULT         __fastcall set_ScConnectionType(long Type/*[in]*/);
  HRESULT         __fastcall ScInitWriteBuffer(long* Result/*[out,retval]*/);
  long            __fastcall ScInitWriteBuffer(void);
  HRESULT         __fastcall ScInitReadBuffer(long* Result/*[out,retval]*/);
  long            __fastcall ScInitReadBuffer(void);
  HRESULT         __fastcall ScOpenConnection(BSTR ListenName/*[in]*/, long ListenPort/*[in]*/, 
                                              BSTR RecipientName/*[in]*/, long RecipientPort/*[in]*/, 
                                              long* Result/*[out,retval]*/);
  long            __fastcall ScOpenConnection(BSTR ListenName/*[in]*/, long ListenPort/*[in]*/, 
                                              BSTR RecipientName/*[in]*/, long RecipientPort/*[in]*/);
  HRESULT         __fastcall ScAddString(BSTR Str/*[in]*/, long* Result/*[out,retval]*/);
  long            __fastcall ScAddString(BSTR Str/*[in]*/);
  HRESULT         __fastcall ScAddLong(long Value/*[in]*/, long* Result/*[out,retval]*/);
  long            __fastcall ScAddLong(long Value/*[in]*/);
  HRESULT         __fastcall ScAddDouble(double Value/*[in]*/, long* Result/*[out,retval]*/);
  long            __fastcall ScAddDouble(double Value/*[in]*/);
  HRESULT         __fastcall ScGetString(BSTR* Str/*[out,retval]*/);
  BSTR            __fastcall ScGetString(void);
  HRESULT         __fastcall ScGetLong(long* Value/*[out,retval]*/);
  long            __fastcall ScGetLong(void);
  HRESULT         __fastcall ScGetDouble(double* Value/*[out,retval]*/);
  double          __fastcall ScGetDouble(void);
  HRESULT         __fastcall ScSend(long* Result/*[out,retval]*/);
  long            __fastcall ScSend(void);
  HRESULT         __fastcall ScWaitForReceived(long TimeOut/*[in]*/, long* Result/*[out,retval]*/);
  long            __fastcall ScWaitForReceived(long TimeOut/*[in]*/);
  HRESULT         __fastcall ScGetLastResult(long* Value/*[out,retval]*/);
  long            __fastcall ScGetLastResult(void);
  HRESULT         __fastcall get_ScMode(long* Mode/*[out,retval]*/);
  long            __fastcall get_ScMode(void);
  HRESULT         __fastcall set_ScMode(long Mode/*[in]*/);
  HRESULT         __fastcall ScCreateSocket(BSTR ListenName/*[in]*/, long ListenPort/*[in]*/, 
                                            long* Result/*[out,retval]*/);
  long            __fastcall ScCreateSocket(BSTR ListenName/*[in]*/, long ListenPort/*[in]*/);
  HRESULT         __fastcall ScConnectTo(BSTR RecipientName/*[in]*/, long RecipientPort/*[in]*/, 
                                         long* Result/*[out,retval]*/);
  long            __fastcall ScConnectTo(BSTR RecipientName/*[in]*/, long RecipientPort/*[in]*/);
  HRESULT         __fastcall ScClose(long* Result/*[out,retval]*/);
  long            __fastcall ScClose(void);
  HRESULT         __fastcall ScGetLastError(long* Value/*[out,retval]*/);
  long            __fastcall ScGetLastError(void);

  __property   long            ScConnectionType = {read = get_ScConnectionType, write = set_ScConnectionType};
  __property   long            ScMode = {read = get_ScMode, write = set_ScMode};
};
typedef TCOMSC_IConnectionToolCtrlT<SC_IConnectionToolCtrl> TCOMSC_IConnectionToolCtrl;

// *********************************************************************//
// DispIntf:  SC_IConnectionToolCtrl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7EB1D711-5F08-4708-B37C-BA0EC0A72F65}
// *********************************************************************//
template<class T>
class SC_IConnectionToolCtrlDispT : public TAutoDriver<SC_IConnectionToolCtrl>
{
public:
  SC_IConnectionToolCtrlDispT(){}

  SC_IConnectionToolCtrlDispT(SC_IConnectionToolCtrl *pintf)
  {
    TAutoDriver<SC_IConnectionToolCtrl>::Bind(pintf, false);
  }

  SC_IConnectionToolCtrlDispT(SC_IConnectionToolCtrlPtr pintf)
  {
    TAutoDriver<SC_IConnectionToolCtrl>::Bind(pintf, true);
  }

  SC_IConnectionToolCtrlDispT& operator=(SC_IConnectionToolCtrl *pintf)
  {
    TAutoDriver<SC_IConnectionToolCtrl>::Bind(pintf, false);
    return *this;
  }

  SC_IConnectionToolCtrlDispT& operator=(SC_IConnectionToolCtrlPtr pintf)
  {
    TAutoDriver<SC_IConnectionToolCtrl>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ScConnectionToolCtrl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ScConnectionToolCtrl);
  }

  HRESULT         __fastcall get_ScConnectionType(long* Type/*[out,retval]*/);
  long            __fastcall get_ScConnectionType(void);
  HRESULT         __fastcall set_ScConnectionType(long Type/*[in]*/);
  HRESULT         __fastcall ScInitWriteBuffer(long* Result/*[out,retval]*/);
  long            __fastcall ScInitWriteBuffer(void);
  HRESULT         __fastcall ScInitReadBuffer(long* Result/*[out,retval]*/);
  long            __fastcall ScInitReadBuffer(void);
  HRESULT         __fastcall ScOpenConnection(BSTR ListenName/*[in]*/, long ListenPort/*[in]*/, 
                                              BSTR RecipientName/*[in]*/, long RecipientPort/*[in]*/
                                              , long* Result/*[out,retval]*/);
  long            __fastcall ScOpenConnection(BSTR ListenName/*[in]*/, long ListenPort/*[in]*/, 
                                              BSTR RecipientName/*[in]*/, long RecipientPort/*[in]*/);
  HRESULT         __fastcall ScAddString(BSTR Str/*[in]*/, long* Result/*[out,retval]*/);
  long            __fastcall ScAddString(BSTR Str/*[in]*/);
  HRESULT         __fastcall ScAddLong(long Value/*[in]*/, long* Result/*[out,retval]*/);
  long            __fastcall ScAddLong(long Value/*[in]*/);
  HRESULT         __fastcall ScAddDouble(double Value/*[in]*/, long* Result/*[out,retval]*/);
  long            __fastcall ScAddDouble(double Value/*[in]*/);
  HRESULT         __fastcall ScGetString(BSTR* Str/*[out,retval]*/);
  BSTR            __fastcall ScGetString(void);
  HRESULT         __fastcall ScGetLong(long* Value/*[out,retval]*/);
  long            __fastcall ScGetLong(void);
  HRESULT         __fastcall ScGetDouble(double* Value/*[out,retval]*/);
  double          __fastcall ScGetDouble(void);
  HRESULT         __fastcall ScSend(long* Result/*[out,retval]*/);
  long            __fastcall ScSend(void);
  HRESULT         __fastcall ScWaitForReceived(long TimeOut/*[in]*/, long* Result/*[out,retval]*/);
  long            __fastcall ScWaitForReceived(long TimeOut/*[in]*/);
  HRESULT         __fastcall ScGetLastResult(long* Value/*[out,retval]*/);
  long            __fastcall ScGetLastResult(void);
  HRESULT         __fastcall get_ScMode(long* Mode/*[out,retval]*/);
  long            __fastcall get_ScMode(void);
  HRESULT         __fastcall set_ScMode(long Mode/*[in]*/);
  HRESULT         __fastcall ScCreateSocket(BSTR ListenName/*[in]*/, long ListenPort/*[in]*/, 
                                            long* Result/*[out,retval]*/);
  long            __fastcall ScCreateSocket(BSTR ListenName/*[in]*/, long ListenPort/*[in]*/);
  HRESULT         __fastcall ScConnectTo(BSTR RecipientName/*[in]*/, long RecipientPort/*[in]*/, 
                                         long* Result/*[out,retval]*/);
  long            __fastcall ScConnectTo(BSTR RecipientName/*[in]*/, long RecipientPort/*[in]*/);
  HRESULT         __fastcall ScClose(long* Result/*[out,retval]*/);
  long            __fastcall ScClose(void);
  HRESULT         __fastcall ScGetLastError(long* Value/*[out,retval]*/);
  long            __fastcall ScGetLastError(void);

  __property   long            ScConnectionType = {read = get_ScConnectionType, write = set_ScConnectionType};
  __property   long            ScMode = {read = get_ScMode, write = set_ScMode};
};
typedef SC_IConnectionToolCtrlDispT<SC_IConnectionToolCtrl> SC_IConnectionToolCtrlDisp;

// *********************************************************************//
// DispIntf:  SC_DConnectionToolEvents
// Flags:     (4096) Dispatchable
// GUID:      {9B5B5103-C107-4CD7-9D58-AA11408037A3}
// *********************************************************************//
template <class T>
class SC_DConnectionToolEventsDispT : public TAutoDriver<SC_DConnectionToolEvents>
{
public:
  SC_DConnectionToolEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall ScReceived(long MessageSize);

};
typedef SC_DConnectionToolEventsDispT<SC_DConnectionToolEvents> SC_DConnectionToolEventsDisp;

// *********************************************************************//
// DispIntf:  _DSamlight_client_ctrl_ocx
// Flags:     (4112) Hidden Dispatchable
// GUID:      {05D31AA6-1306-4DA0-9AE2-A8771FF6FA94}
// *********************************************************************//
template<class T>
class _DSamlight_client_ctrl_ocxDispT : public TAutoDriver<_DSamlight_client_ctrl_ocx>
{
public:
  _DSamlight_client_ctrl_ocxDispT(){}

  _DSamlight_client_ctrl_ocxDispT(_DSamlight_client_ctrl_ocx *pintf)
  {
    TAutoDriver<_DSamlight_client_ctrl_ocx>::Bind(pintf, false);
  }

  _DSamlight_client_ctrl_ocxDispT(_DSamlight_client_ctrl_ocxPtr pintf)
  {
    TAutoDriver<_DSamlight_client_ctrl_ocx>::Bind(pintf, true);
  }

  _DSamlight_client_ctrl_ocxDispT& operator=(_DSamlight_client_ctrl_ocx *pintf)
  {
    TAutoDriver<_DSamlight_client_ctrl_ocx>::Bind(pintf, false);
    return *this;
  }

  _DSamlight_client_ctrl_ocxDispT& operator=(_DSamlight_client_ctrl_ocxPtr pintf)
  {
    TAutoDriver<_DSamlight_client_ctrl_ocx>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_ScSamlightClientCtrl));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_ScSamlightClientCtrl);
  }

  long            __fastcall ScIsRunning();
  long            __fastcall ScExecCommand(long CmdID);
  long            __fastcall ScChangeTextByName(BSTR EntityName, BSTR Text);
  long            __fastcall ScMarkEntityByName(BSTR EntityName, long WaitForMarkEnd);
  long            __fastcall ScIsMarking();
  long            __fastcall ScStopMarking();
  long            __fastcall ScLoadJob(BSTR FileName, long LoadEntities, long OverwriteEntities, 
                                       long LoadMaterials);
  double          __fastcall ScGetEntityOutline(BSTR EntityName, long Index);
  double          __fastcall ScGetWorkingArea(long Index);
  long            __fastcall ScOpticMatrixReset();
  long            __fastcall ScOpticMatrixTranslate(double X, double Y, double Z);
  long            __fastcall ScOpticMatrixRotate(double CenterX, double CenterY, double Angle);
  long            __fastcall ScSetMarkFlags(long Flags);
  long            __fastcall ScGetMarkFlags();
  long            __fastcall ScOpenEthernetConnection(BSTR SenderAddr, long SenderPort, 
                                                      BSTR RecipientAddr, long RecipientPort);
  long            __fastcall ScCloseEthernetConnection();
  long            __fastcall ScGetInterfaceVersion();
  long            __fastcall ScSetDoubleValue(long Type, double Value);
  double          __fastcall ScGetDoubleValue(long Type);
  long            __fastcall ScSetLongValue(long Type, long Value);
  long            __fastcall ScGetLongValue(long Type);
  long            __fastcall ScSetLongData(long Type, VARIANT* Data, BSTR FileName);
  long            __fastcall ScTranslateEntity(BSTR EntityName, double X, double Y, double Z);
  long            __fastcall ScScaleEntity(BSTR EntityName, double ScaleX, double ScaleY, 
                                           double ScaleZ);
  long            __fastcall ScRotateEntity(BSTR EntityName, double X, double Y, double Angle);
  long            __fastcall ScImport(BSTR EntityName, BSTR FileName, BSTR Type, double Resolution, 
                                      long Flags);
  long            __fastcall ScSetEntityLongData(BSTR EntityName, long DataId, long Data);
  long            __fastcall ScGetEntityLongData(BSTR EntityName, long DataId);
  long            __fastcall ScDeleteEntity(BSTR EntityName);
  long            __fastcall ScGetLongData(long Type, VARIANT* Data, BSTR FileName);
  long            __fastcall ScGetConnectionStatus();
  long            __fastcall ScSetStringValue(long Type, BSTR Value);
  long            __fastcall ScGetStringValue(long Type, BSTR* Value);
  long            __fastcall ScShutDown();
  long            __fastcall ScGetOpticMatrix(long Index, double* Value);
  long            __fastcall ScMoveAbs(double X, double Y, double Z);
  long            __fastcall ScSwitchLaser(long LaserOnOff);
  long            __fastcall ScSetPen(long pen);
  long            __fastcall ScGetPen(long* pen);
  long            __fastcall ScShowApp(long Show);
  long            __fastcall ScSetHead(long Head);
  long            __fastcall ScGetHead(long* Head);
  long            __fastcall ScSaveJob(BSTR FileName, long Flags);
  long            __fastcall ScSetEntityDoubleData(BSTR EntityName, long DataId, double Data);
  long            __fastcall ScGetEntityDoubleData(BSTR EntityName, long DataId, double* Data);
  long            __fastcall ScSetEntityStringData(BSTR EntityName, long DataId, BSTR Data);
  long            __fastcall ScGetEntityStringData(BSTR EntityName, long DataId, BSTR* Data);
  long            __fastcall ScSetStringLongValue(long Type, BSTR SValue, long LValue);
  long            __fastcall ScSetStringDblValue(long Type, BSTR SValue, double DValue);
  long            __fastcall ScGetStringDblValue(long Type, BSTR SValue, double* RValue);
  long            __fastcall ScGetIDStringData(long Type, long Index, BSTR* Data);
  long            __fastcall ScOpenTCPConnection(BSTR RecipientAddr, long RecipientPort);
  long            __fastcall ScOpenUDPConnection(BSTR SenderAddr, long SenderPort, 
                                                 BSTR RecipientAddr, long RecipientPort);
  long            __fastcall ScOpticMatrixScale(double ScaleX, double ScaleY);
  long            __fastcall ScSetPixelMapForPen(long pen, long pixel_zone0, long pixel_zone1, 
                                                 long pixel_zone2, long pixel_zone3, 
                                                 long pixel_zone4, long pixel_zone5);
  long            __fastcall ScSetMode(long Mode);
  long            __fastcall ScGetMode(long* Mode);
  long            __fastcall ScDuplicateEntity(BSTR EntityName, BSTR DuplicatedEntityName);
  long            __fastcall ScProcessFlashJob(BSTR Name, long JobNum, long Mode, long Flags);
  BSTR            __fastcall ScFlashCommand(BSTR Command, long Flags, BSTR* Return);
  long            __fastcall ScSetIDStringData(long Type, long Index, BSTR Data);
  long            __fastcall ScExport(BSTR EntityName, BSTR FileName, BSTR Type, double Resolution, 
                                      long Flags);
  long            __fastcall ScSlice(BSTR EntityName, BSTR LayerSolidName, double sliceThickness, 
                                     long doSliceOnlySelected, long doReverseDirection);
  long            __fastcall ScSetPenPathForPen(short* pen, short* enable, short* penToUse1, 
                                                int* loopOfPenToUse1, short* penToUse2, 
                                                int* loopOfPenToUse2, short* penToUse3, 
                                                int* loopOfPenToUse3, short* penToUse4, 
                                                int* loopOfPenToUse4, short* penToUse5, 
                                                int* loopOfPenToUse5);
  long            __fastcall ScGetPenPathForPen(short* pen, short* enable, short* penToUse1, 
                                                int* loopOfPenToUse1, short* penToUse2, 
                                                int* loopOfPenToUse2, short* penToUse3, 
                                                int* loopOfPenToUse3, short* penToUse4, 
                                                int* loopOfPenToUse4, short* penToUse5, 
                                                int* loopOfPenToUse5);
  long            __fastcall ScRotateEntity3D(BSTR EntityName, double px, double py, double pz, 
                                              double vx, double vy, double vz, double Angle);
  long            __fastcall ScGetEntityOutline2D(BSTR EntityName, double* MinX, double* MinY, 
                                                  double* MaxX, double* MaxY);
  long            __fastcall ScGetEntityOutline3D(BSTR EntityName, double* MinX, double* MinY, 
                                                  double* MaxX, double* MaxY, double* MinZ, 
                                                  double* MaxZ);

};
typedef _DSamlight_client_ctrl_ocxDispT<_DSamlight_client_ctrl_ocx> _DSamlight_client_ctrl_ocxDisp;

// *********************************************************************//
// DispIntf:  _DSamlight_client_ctrl_ocxEvents
// Flags:     (4096) Dispatchable
// GUID:      {5F3246AD-5086-45E1-A3DA-CB9B0BA234ED}
// *********************************************************************//
template <class T>
class _DSamlight_client_ctrl_ocxEventsDispT : public TAutoDriver<_DSamlight_client_ctrl_ocxEvents>
{
public:
  _DSamlight_client_ctrl_ocxEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }


};
typedef _DSamlight_client_ctrl_ocxEventsDispT<_DSamlight_client_ctrl_ocxEvents> _DSamlight_client_ctrl_ocxEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMSC_IConnectionToolCtrl
// Interface: SC_IConnectionToolCtrl
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMSC_IConnectionToolCtrlT<T>::get_ScConnectionType(long* Type/*[out,retval]*/)
{
  return (*this)->get_ScConnectionType(Type);
}

template <class T> long __fastcall
TCOMSC_IConnectionToolCtrlT<T>::get_ScConnectionType(void)
{
  long Type;
  OLECHECK(this->get_ScConnectionType((long*)&Type));
  return Type;
}

template <class T> HRESULT __fastcall
TCOMSC_IConnectionToolCtrlT<T>::set_ScConnectionType(long Type/*[in]*/)
{
  return (*this)->set_ScConnectionType(Type);
}

template <class T> HRESULT __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScInitWriteBuffer(long* Result/*[out,retval]*/)
{
  return (*this)->ScInitWriteBuffer(Result);
}

template <class T> long __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScInitWriteBuffer(void)
{
  long Result;
  OLECHECK(this->ScInitWriteBuffer((long*)&Result));
  return Result;
}

template <class T> HRESULT __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScInitReadBuffer(long* Result/*[out,retval]*/)
{
  return (*this)->ScInitReadBuffer(Result);
}

template <class T> long __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScInitReadBuffer(void)
{
  long Result;
  OLECHECK(this->ScInitReadBuffer((long*)&Result));
  return Result;
}

template <class T> HRESULT __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScOpenConnection(BSTR ListenName/*[in]*/, long ListenPort/*[in]*/, 
                                                 BSTR RecipientName/*[in]*/, 
                                                 long RecipientPort/*[in]*/, 
                                                 long* Result/*[out,retval]*/)
{
  return (*this)->ScOpenConnection(ListenName, ListenPort, RecipientName, RecipientPort, Result);
}

template <class T> long __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScOpenConnection(BSTR ListenName/*[in]*/, long ListenPort/*[in]*/, 
                                                 BSTR RecipientName/*[in]*/, 
                                                 long RecipientPort/*[in]*/)
{
  long Result;
  OLECHECK(this->ScOpenConnection(, (long*)&Result));
  return Result;
}

template <class T> HRESULT __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScAddString(BSTR Str/*[in]*/, long* Result/*[out,retval]*/)
{
  return (*this)->ScAddString(Str, Result);
}

template <class T> long __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScAddString(BSTR Str/*[in]*/)
{
  long Result;
  OLECHECK(this->ScAddString(, (long*)&Result));
  return Result;
}

template <class T> HRESULT __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScAddLong(long Value/*[in]*/, long* Result/*[out,retval]*/)
{
  return (*this)->ScAddLong(Value, Result);
}

template <class T> long __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScAddLong(long Value/*[in]*/)
{
  long Result;
  OLECHECK(this->ScAddLong(, (long*)&Result));
  return Result;
}

template <class T> HRESULT __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScAddDouble(double Value/*[in]*/, long* Result/*[out,retval]*/)
{
  return (*this)->ScAddDouble(Value, Result);
}

template <class T> long __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScAddDouble(double Value/*[in]*/)
{
  long Result;
  OLECHECK(this->ScAddDouble(, (long*)&Result));
  return Result;
}

template <class T> HRESULT __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScGetString(BSTR* Str/*[out,retval]*/)
{
  return (*this)->ScGetString(Str);
}

template <class T> BSTR __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScGetString(void)
{
  BSTR Str = 0;
  OLECHECK(this->ScGetString((BSTR*)&Str));
  return Str;
}

template <class T> HRESULT __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScGetLong(long* Value/*[out,retval]*/)
{
  return (*this)->ScGetLong(Value);
}

template <class T> long __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScGetLong(void)
{
  long Value;
  OLECHECK(this->ScGetLong((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScGetDouble(double* Value/*[out,retval]*/)
{
  return (*this)->ScGetDouble(Value);
}

template <class T> double __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScGetDouble(void)
{
  double Value;
  OLECHECK(this->ScGetDouble((double*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScSend(long* Result/*[out,retval]*/)
{
  return (*this)->ScSend(Result);
}

template <class T> long __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScSend(void)
{
  long Result;
  OLECHECK(this->ScSend((long*)&Result));
  return Result;
}

template <class T> HRESULT __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScWaitForReceived(long TimeOut/*[in]*/, long* Result/*[out,retval]*/)
{
  return (*this)->ScWaitForReceived(TimeOut, Result);
}

template <class T> long __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScWaitForReceived(long TimeOut/*[in]*/)
{
  long Result;
  OLECHECK(this->ScWaitForReceived(, (long*)&Result));
  return Result;
}

template <class T> HRESULT __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScGetLastResult(long* Value/*[out,retval]*/)
{
  return (*this)->ScGetLastResult(Value);
}

template <class T> long __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScGetLastResult(void)
{
  long Value;
  OLECHECK(this->ScGetLastResult((long*)&Value));
  return Value;
}

template <class T> HRESULT __fastcall
TCOMSC_IConnectionToolCtrlT<T>::get_ScMode(long* Mode/*[out,retval]*/)
{
  return (*this)->get_ScMode(Mode);
}

template <class T> long __fastcall
TCOMSC_IConnectionToolCtrlT<T>::get_ScMode(void)
{
  long Mode;
  OLECHECK(this->get_ScMode((long*)&Mode));
  return Mode;
}

template <class T> HRESULT __fastcall
TCOMSC_IConnectionToolCtrlT<T>::set_ScMode(long Mode/*[in]*/)
{
  return (*this)->set_ScMode(Mode);
}

template <class T> HRESULT __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScCreateSocket(BSTR ListenName/*[in]*/, long ListenPort/*[in]*/, 
                                               long* Result/*[out,retval]*/)
{
  return (*this)->ScCreateSocket(ListenName, ListenPort, Result);
}

template <class T> long __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScCreateSocket(BSTR ListenName/*[in]*/, long ListenPort/*[in]*/)
{
  long Result;
  OLECHECK(this->ScCreateSocket(, (long*)&Result));
  return Result;
}

template <class T> HRESULT __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScConnectTo(BSTR RecipientName/*[in]*/, long RecipientPort/*[in]*/, 
                                            long* Result/*[out,retval]*/)
{
  return (*this)->ScConnectTo(RecipientName, RecipientPort, Result);
}

template <class T> long __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScConnectTo(BSTR RecipientName/*[in]*/, long RecipientPort/*[in]*/)
{
  long Result;
  OLECHECK(this->ScConnectTo(, (long*)&Result));
  return Result;
}

template <class T> HRESULT __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScClose(long* Result/*[out,retval]*/)
{
  return (*this)->ScClose(Result);
}

template <class T> long __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScClose(void)
{
  long Result;
  OLECHECK(this->ScClose((long*)&Result));
  return Result;
}

template <class T> HRESULT __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScGetLastError(long* Value/*[out,retval]*/)
{
  return (*this)->ScGetLastError(Value);
}

template <class T> long __fastcall
TCOMSC_IConnectionToolCtrlT<T>::ScGetLastError(void)
{
  long Value;
  OLECHECK(this->ScGetLastError((long*)&Value));
  return Value;
}

// *********************************************************************//
// DispIntf:  SC_IConnectionToolCtrl
// Flags:     (4432) Hidden Dual OleAutomation Dispatchable
// GUID:      {7EB1D711-5F08-4708-B37C-BA0EC0A72F65}
// *********************************************************************//
template <class T> HRESULT __fastcall
SC_IConnectionToolCtrlDispT<T>::get_ScConnectionType(long* Type/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScConnectionType"), DISPID(2000));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Type /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SC_IConnectionToolCtrlDispT<T>::get_ScConnectionType(void)
{
  long Type;
  this->get_ScConnectionType((long*)&Type);
  return Type;
}

template <class T> HRESULT __fastcall
SC_IConnectionToolCtrlDispT<T>::set_ScConnectionType(long Type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScConnectionType"), DISPID(2000));
  TAutoArgs<1> _args;
  _args[1] = Type /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
SC_IConnectionToolCtrlDispT<T>::ScInitWriteBuffer(long* Result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScInitWriteBuffer"), DISPID(2001));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Result /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
SC_IConnectionToolCtrlDispT<T>::ScInitWriteBuffer(void)
{
  long Result;
  this->ScInitWriteBuffer((long*)&Result);
  return Result;
}

template <class T> HRESULT __fastcall
SC_IConnectionToolCtrlDispT<T>::ScInitReadBuffer(long* Result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScInitReadBuffer"), DISPID(2002));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Result /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
SC_IConnectionToolCtrlDispT<T>::ScInitReadBuffer(void)
{
  long Result;
  this->ScInitReadBuffer((long*)&Result);
  return Result;
}

template <class T> HRESULT __fastcall
SC_IConnectionToolCtrlDispT<T>::ScOpenConnection(BSTR ListenName/*[in]*/, long ListenPort/*[in]*/, 
                                                 BSTR RecipientName/*[in]*/, 
                                                 long RecipientPort/*[in]*/, 
                                                 long* Result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScOpenConnection"), DISPID(2003));
  TAutoArgs<4> _args;
  _args[1] = ListenName /*[VT_BSTR:0]*/;
  _args[2] = ListenPort /*[VT_I4:0]*/;
  _args[3] = RecipientName /*[VT_BSTR:0]*/;
  _args[4] = RecipientPort /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Result /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
SC_IConnectionToolCtrlDispT<T>::ScOpenConnection(BSTR ListenName/*[in]*/, long ListenPort/*[in]*/, 
                                                 BSTR RecipientName/*[in]*/, 
                                                 long RecipientPort/*[in]*/)
{
  long Result;
  this->ScOpenConnection(ListenName, ListenPort, RecipientName, RecipientPort, (long*)&Result);
  return Result;
}

template <class T> HRESULT __fastcall
SC_IConnectionToolCtrlDispT<T>::ScAddString(BSTR Str/*[in]*/, long* Result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScAddString"), DISPID(2004));
  TAutoArgs<1> _args;
  _args[1] = Str /*[VT_BSTR:0]*/;
  return OutRetValSetterPtr(Result /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
SC_IConnectionToolCtrlDispT<T>::ScAddString(BSTR Str/*[in]*/)
{
  long Result;
  this->ScAddString(Str, (long*)&Result);
  return Result;
}

template <class T> HRESULT __fastcall
SC_IConnectionToolCtrlDispT<T>::ScAddLong(long Value/*[in]*/, long* Result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScAddLong"), DISPID(2005));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Result /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
SC_IConnectionToolCtrlDispT<T>::ScAddLong(long Value/*[in]*/)
{
  long Result;
  this->ScAddLong(Value, (long*)&Result);
  return Result;
}

template <class T> HRESULT __fastcall
SC_IConnectionToolCtrlDispT<T>::ScAddDouble(double Value/*[in]*/, long* Result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScAddDouble"), DISPID(2006));
  TAutoArgs<1> _args;
  _args[1] = Value /*[VT_R8:0]*/;
  return OutRetValSetterPtr(Result /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
SC_IConnectionToolCtrlDispT<T>::ScAddDouble(double Value/*[in]*/)
{
  long Result;
  this->ScAddDouble(Value, (long*)&Result);
  return Result;
}

template <class T> HRESULT __fastcall
SC_IConnectionToolCtrlDispT<T>::ScGetString(BSTR* Str/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScGetString"), DISPID(2007));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Str /*[VT_BSTR:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> BSTR __fastcall
SC_IConnectionToolCtrlDispT<T>::ScGetString(void)
{
  BSTR Str;
  this->ScGetString((BSTR*)&Str);
  return Str;
}

template <class T> HRESULT __fastcall
SC_IConnectionToolCtrlDispT<T>::ScGetLong(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScGetLong"), DISPID(2008));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
SC_IConnectionToolCtrlDispT<T>::ScGetLong(void)
{
  long Value;
  this->ScGetLong((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
SC_IConnectionToolCtrlDispT<T>::ScGetDouble(double* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScGetDouble"), DISPID(2009));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_R8:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> double __fastcall
SC_IConnectionToolCtrlDispT<T>::ScGetDouble(void)
{
  double Value;
  this->ScGetDouble((double*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
SC_IConnectionToolCtrlDispT<T>::ScSend(long* Result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScSend"), DISPID(2010));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Result /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
SC_IConnectionToolCtrlDispT<T>::ScSend(void)
{
  long Result;
  this->ScSend((long*)&Result);
  return Result;
}

template <class T> HRESULT __fastcall
SC_IConnectionToolCtrlDispT<T>::ScWaitForReceived(long TimeOut/*[in]*/, long* Result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScWaitForReceived"), DISPID(2011));
  TAutoArgs<1> _args;
  _args[1] = TimeOut /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Result /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
SC_IConnectionToolCtrlDispT<T>::ScWaitForReceived(long TimeOut/*[in]*/)
{
  long Result;
  this->ScWaitForReceived(TimeOut, (long*)&Result);
  return Result;
}

template <class T> HRESULT __fastcall
SC_IConnectionToolCtrlDispT<T>::ScGetLastResult(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScGetLastResult"), DISPID(2012));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
SC_IConnectionToolCtrlDispT<T>::ScGetLastResult(void)
{
  long Value;
  this->ScGetLastResult((long*)&Value);
  return Value;
}

template <class T> HRESULT __fastcall
SC_IConnectionToolCtrlDispT<T>::get_ScMode(long* Mode/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScMode"), DISPID(2013));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Mode /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
SC_IConnectionToolCtrlDispT<T>::get_ScMode(void)
{
  long Mode;
  this->get_ScMode((long*)&Mode);
  return Mode;
}

template <class T> HRESULT __fastcall
SC_IConnectionToolCtrlDispT<T>::set_ScMode(long Mode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScMode"), DISPID(2013));
  TAutoArgs<1> _args;
  _args[1] = Mode /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
SC_IConnectionToolCtrlDispT<T>::ScCreateSocket(BSTR ListenName/*[in]*/, long ListenPort/*[in]*/, 
                                               long* Result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScCreateSocket"), DISPID(2014));
  TAutoArgs<2> _args;
  _args[1] = ListenName /*[VT_BSTR:0]*/;
  _args[2] = ListenPort /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Result /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
SC_IConnectionToolCtrlDispT<T>::ScCreateSocket(BSTR ListenName/*[in]*/, long ListenPort/*[in]*/)
{
  long Result;
  this->ScCreateSocket(ListenName, ListenPort, (long*)&Result);
  return Result;
}

template <class T> HRESULT __fastcall
SC_IConnectionToolCtrlDispT<T>::ScConnectTo(BSTR RecipientName/*[in]*/, long RecipientPort/*[in]*/, 
                                            long* Result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScConnectTo"), DISPID(2015));
  TAutoArgs<2> _args;
  _args[1] = RecipientName /*[VT_BSTR:0]*/;
  _args[2] = RecipientPort /*[VT_I4:0]*/;
  return OutRetValSetterPtr(Result /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
SC_IConnectionToolCtrlDispT<T>::ScConnectTo(BSTR RecipientName/*[in]*/, long RecipientPort/*[in]*/)
{
  long Result;
  this->ScConnectTo(RecipientName, RecipientPort, (long*)&Result);
  return Result;
}

template <class T> HRESULT __fastcall
SC_IConnectionToolCtrlDispT<T>::ScClose(long* Result/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScClose"), DISPID(2016));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Result /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
SC_IConnectionToolCtrlDispT<T>::ScClose(void)
{
  long Result;
  this->ScClose((long*)&Result);
  return Result;
}

template <class T> HRESULT __fastcall
SC_IConnectionToolCtrlDispT<T>::ScGetLastError(long* Value/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ScGetLastError"), DISPID(2017));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(Value /*[VT_I4:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> long __fastcall
SC_IConnectionToolCtrlDispT<T>::ScGetLastError(void)
{
  long Value;
  this->ScGetLastError((long*)&Value);
  return Value;
}

// *********************************************************************//
// DispIntf:  SC_DConnectionToolEvents
// Flags:     (4096) Dispatchable
// GUID:      {9B5B5103-C107-4CD7-9D58-AA11408037A3}
// *********************************************************************//
template <class T> void __fastcall
SC_DConnectionToolEventsDispT<T>::ScReceived(long MessageSize)
{
  _TDispID _dispid(/* ScReceived */ DISPID(2000));
  TAutoArgs<1> _args;
  _args[1] = MessageSize /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  _DSamlight_client_ctrl_ocx
// Flags:     (4112) Hidden Dispatchable
// GUID:      {05D31AA6-1306-4DA0-9AE2-A8771FF6FA94}
// *********************************************************************//
template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScIsRunning()
{
  _TDispID _dispid(*this, OLETEXT("ScIsRunning"), DISPID(1));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScExecCommand(long CmdID)
{
  _TDispID _dispid(*this, OLETEXT("ScExecCommand"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = CmdID /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScChangeTextByName(BSTR EntityName, BSTR Text)
{
  _TDispID _dispid(*this, OLETEXT("ScChangeTextByName"), DISPID(3));
  TAutoArgs<2> _args;
  _args[1] = EntityName /*[VT_BSTR:0]*/;
  _args[2] = Text /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScMarkEntityByName(BSTR EntityName, long WaitForMarkEnd)
{
  _TDispID _dispid(*this, OLETEXT("ScMarkEntityByName"), DISPID(4));
  TAutoArgs<2> _args;
  _args[1] = EntityName /*[VT_BSTR:0]*/;
  _args[2] = WaitForMarkEnd /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScIsMarking()
{
  _TDispID _dispid(*this, OLETEXT("ScIsMarking"), DISPID(5));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScStopMarking()
{
  _TDispID _dispid(*this, OLETEXT("ScStopMarking"), DISPID(6));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScLoadJob(BSTR FileName, long LoadEntities, 
                                              long OverwriteEntities, long LoadMaterials)
{
  _TDispID _dispid(*this, OLETEXT("ScLoadJob"), DISPID(7));
  TAutoArgs<4> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = LoadEntities /*[VT_I4:0]*/;
  _args[3] = OverwriteEntities /*[VT_I4:0]*/;
  _args[4] = LoadMaterials /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> double __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScGetEntityOutline(BSTR EntityName, long Index)
{
  _TDispID _dispid(*this, OLETEXT("ScGetEntityOutline"), DISPID(8));
  TAutoArgs<2> _args;
  _args[1] = EntityName /*[VT_BSTR:0]*/;
  _args[2] = Index /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> double __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScGetWorkingArea(long Index)
{
  _TDispID _dispid(*this, OLETEXT("ScGetWorkingArea"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScOpticMatrixReset()
{
  _TDispID _dispid(*this, OLETEXT("ScOpticMatrixReset"), DISPID(10));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScOpticMatrixTranslate(double X, double Y, double Z)
{
  _TDispID _dispid(*this, OLETEXT("ScOpticMatrixTranslate"), DISPID(11));
  TAutoArgs<3> _args;
  _args[1] = X /*[VT_R8:0]*/;
  _args[2] = Y /*[VT_R8:0]*/;
  _args[3] = Z /*[VT_R8:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScOpticMatrixRotate(double CenterX, double CenterY, double Angle)
{
  _TDispID _dispid(*this, OLETEXT("ScOpticMatrixRotate"), DISPID(12));
  TAutoArgs<3> _args;
  _args[1] = CenterX /*[VT_R8:0]*/;
  _args[2] = CenterY /*[VT_R8:0]*/;
  _args[3] = Angle /*[VT_R8:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScSetMarkFlags(long Flags)
{
  _TDispID _dispid(*this, OLETEXT("ScSetMarkFlags"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Flags /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScGetMarkFlags()
{
  _TDispID _dispid(*this, OLETEXT("ScGetMarkFlags"), DISPID(14));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScOpenEthernetConnection(BSTR SenderAddr, long SenderPort, 
                                                             BSTR RecipientAddr, long RecipientPort)
{
  _TDispID _dispid(*this, OLETEXT("ScOpenEthernetConnection"), DISPID(15));
  TAutoArgs<4> _args;
  _args[1] = SenderAddr /*[VT_BSTR:0]*/;
  _args[2] = SenderPort /*[VT_I4:0]*/;
  _args[3] = RecipientAddr /*[VT_BSTR:0]*/;
  _args[4] = RecipientPort /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScCloseEthernetConnection()
{
  _TDispID _dispid(*this, OLETEXT("ScCloseEthernetConnection"), DISPID(16));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScGetInterfaceVersion()
{
  _TDispID _dispid(*this, OLETEXT("ScGetInterfaceVersion"), DISPID(17));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScSetDoubleValue(long Type, double Value)
{
  _TDispID _dispid(*this, OLETEXT("ScSetDoubleValue"), DISPID(18));
  TAutoArgs<2> _args;
  _args[1] = Type /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_R8:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> double __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScGetDoubleValue(long Type)
{
  _TDispID _dispid(*this, OLETEXT("ScGetDoubleValue"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Type /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScSetLongValue(long Type, long Value)
{
  _TDispID _dispid(*this, OLETEXT("ScSetLongValue"), DISPID(20));
  TAutoArgs<2> _args;
  _args[1] = Type /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScGetLongValue(long Type)
{
  _TDispID _dispid(*this, OLETEXT("ScGetLongValue"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Type /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScSetLongData(long Type, VARIANT* Data, BSTR FileName)
{
  _TDispID _dispid(*this, OLETEXT("ScSetLongData"), DISPID(22));
  TAutoArgs<3> _args;
  _args[1] = Type /*[VT_I4:0]*/;
  _args[2] = Data /*[VT_VARIANT:1]*/;
  _args[3] = FileName /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScTranslateEntity(BSTR EntityName, double X, double Y, double Z)
{
  _TDispID _dispid(*this, OLETEXT("ScTranslateEntity"), DISPID(23));
  TAutoArgs<4> _args;
  _args[1] = EntityName /*[VT_BSTR:0]*/;
  _args[2] = X /*[VT_R8:0]*/;
  _args[3] = Y /*[VT_R8:0]*/;
  _args[4] = Z /*[VT_R8:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScScaleEntity(BSTR EntityName, double ScaleX, double ScaleY, 
                                                  double ScaleZ)
{
  _TDispID _dispid(*this, OLETEXT("ScScaleEntity"), DISPID(24));
  TAutoArgs<4> _args;
  _args[1] = EntityName /*[VT_BSTR:0]*/;
  _args[2] = ScaleX /*[VT_R8:0]*/;
  _args[3] = ScaleY /*[VT_R8:0]*/;
  _args[4] = ScaleZ /*[VT_R8:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScRotateEntity(BSTR EntityName, double X, double Y, double Angle)
{
  _TDispID _dispid(*this, OLETEXT("ScRotateEntity"), DISPID(25));
  TAutoArgs<4> _args;
  _args[1] = EntityName /*[VT_BSTR:0]*/;
  _args[2] = X /*[VT_R8:0]*/;
  _args[3] = Y /*[VT_R8:0]*/;
  _args[4] = Angle /*[VT_R8:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScImport(BSTR EntityName, BSTR FileName, BSTR Type, 
                                             double Resolution, long Flags)
{
  _TDispID _dispid(*this, OLETEXT("ScImport"), DISPID(26));
  TAutoArgs<5> _args;
  _args[1] = EntityName /*[VT_BSTR:0]*/;
  _args[2] = FileName /*[VT_BSTR:0]*/;
  _args[3] = Type /*[VT_BSTR:0]*/;
  _args[4] = Resolution /*[VT_R8:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScSetEntityLongData(BSTR EntityName, long DataId, long Data)
{
  _TDispID _dispid(*this, OLETEXT("ScSetEntityLongData"), DISPID(27));
  TAutoArgs<3> _args;
  _args[1] = EntityName /*[VT_BSTR:0]*/;
  _args[2] = DataId /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScGetEntityLongData(BSTR EntityName, long DataId)
{
  _TDispID _dispid(*this, OLETEXT("ScGetEntityLongData"), DISPID(28));
  TAutoArgs<2> _args;
  _args[1] = EntityName /*[VT_BSTR:0]*/;
  _args[2] = DataId /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScDeleteEntity(BSTR EntityName)
{
  _TDispID _dispid(*this, OLETEXT("ScDeleteEntity"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = EntityName /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScGetLongData(long Type, VARIANT* Data, BSTR FileName)
{
  _TDispID _dispid(*this, OLETEXT("ScGetLongData"), DISPID(30));
  TAutoArgs<3> _args;
  _args[1] = Type /*[VT_I4:0]*/;
  _args[2] = Data /*[VT_VARIANT:1]*/;
  _args[3] = FileName /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScGetConnectionStatus()
{
  _TDispID _dispid(*this, OLETEXT("ScGetConnectionStatus"), DISPID(31));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScSetStringValue(long Type, BSTR Value)
{
  _TDispID _dispid(*this, OLETEXT("ScSetStringValue"), DISPID(32));
  TAutoArgs<2> _args;
  _args[1] = Type /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScGetStringValue(long Type, BSTR* Value)
{
  _TDispID _dispid(*this, OLETEXT("ScGetStringValue"), DISPID(33));
  TAutoArgs<2> _args;
  _args[1] = Type /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScShutDown()
{
  _TDispID _dispid(*this, OLETEXT("ScShutDown"), DISPID(34));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScGetOpticMatrix(long Index, double* Value)
{
  _TDispID _dispid(*this, OLETEXT("ScGetOpticMatrix"), DISPID(35));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = Value /*[VT_R8:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScMoveAbs(double X, double Y, double Z)
{
  _TDispID _dispid(*this, OLETEXT("ScMoveAbs"), DISPID(36));
  TAutoArgs<3> _args;
  _args[1] = X /*[VT_R8:0]*/;
  _args[2] = Y /*[VT_R8:0]*/;
  _args[3] = Z /*[VT_R8:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScSwitchLaser(long LaserOnOff)
{
  _TDispID _dispid(*this, OLETEXT("ScSwitchLaser"), DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = LaserOnOff /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScSetPen(long pen)
{
  _TDispID _dispid(*this, OLETEXT("ScSetPen"), DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = pen /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScGetPen(long* pen)
{
  _TDispID _dispid(*this, OLETEXT("ScGetPen"), DISPID(39));
  TAutoArgs<1> _args;
  _args[1] = pen /*[VT_I4:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScShowApp(long Show)
{
  _TDispID _dispid(*this, OLETEXT("ScShowApp"), DISPID(40));
  TAutoArgs<1> _args;
  _args[1] = Show /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScSetHead(long Head)
{
  _TDispID _dispid(*this, OLETEXT("ScSetHead"), DISPID(41));
  TAutoArgs<1> _args;
  _args[1] = Head /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScGetHead(long* Head)
{
  _TDispID _dispid(*this, OLETEXT("ScGetHead"), DISPID(42));
  TAutoArgs<1> _args;
  _args[1] = Head /*[VT_I4:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScSaveJob(BSTR FileName, long Flags)
{
  _TDispID _dispid(*this, OLETEXT("ScSaveJob"), DISPID(43));
  TAutoArgs<2> _args;
  _args[1] = FileName /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScSetEntityDoubleData(BSTR EntityName, long DataId, double Data)
{
  _TDispID _dispid(*this, OLETEXT("ScSetEntityDoubleData"), DISPID(44));
  TAutoArgs<3> _args;
  _args[1] = EntityName /*[VT_BSTR:0]*/;
  _args[2] = DataId /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_R8:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScGetEntityDoubleData(BSTR EntityName, long DataId, double* Data)
{
  _TDispID _dispid(*this, OLETEXT("ScGetEntityDoubleData"), DISPID(45));
  TAutoArgs<3> _args;
  _args[1] = EntityName /*[VT_BSTR:0]*/;
  _args[2] = DataId /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_R8:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScSetEntityStringData(BSTR EntityName, long DataId, BSTR Data)
{
  _TDispID _dispid(*this, OLETEXT("ScSetEntityStringData"), DISPID(46));
  TAutoArgs<3> _args;
  _args[1] = EntityName /*[VT_BSTR:0]*/;
  _args[2] = DataId /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScGetEntityStringData(BSTR EntityName, long DataId, BSTR* Data)
{
  _TDispID _dispid(*this, OLETEXT("ScGetEntityStringData"), DISPID(47));
  TAutoArgs<3> _args;
  _args[1] = EntityName /*[VT_BSTR:0]*/;
  _args[2] = DataId /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScSetStringLongValue(long Type, BSTR SValue, long LValue)
{
  _TDispID _dispid(*this, OLETEXT("ScSetStringLongValue"), DISPID(48));
  TAutoArgs<3> _args;
  _args[1] = Type /*[VT_I4:0]*/;
  _args[2] = SValue /*[VT_BSTR:0]*/;
  _args[3] = LValue /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScSetStringDblValue(long Type, BSTR SValue, double DValue)
{
  _TDispID _dispid(*this, OLETEXT("ScSetStringDblValue"), DISPID(49));
  TAutoArgs<3> _args;
  _args[1] = Type /*[VT_I4:0]*/;
  _args[2] = SValue /*[VT_BSTR:0]*/;
  _args[3] = DValue /*[VT_R8:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScGetStringDblValue(long Type, BSTR SValue, double* RValue)
{
  _TDispID _dispid(*this, OLETEXT("ScGetStringDblValue"), DISPID(50));
  TAutoArgs<3> _args;
  _args[1] = Type /*[VT_I4:0]*/;
  _args[2] = SValue /*[VT_BSTR:0]*/;
  _args[3] = RValue /*[VT_R8:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScGetIDStringData(long Type, long Index, BSTR* Data)
{
  _TDispID _dispid(*this, OLETEXT("ScGetIDStringData"), DISPID(51));
  TAutoArgs<3> _args;
  _args[1] = Type /*[VT_I4:0]*/;
  _args[2] = Index /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScOpenTCPConnection(BSTR RecipientAddr, long RecipientPort)
{
  _TDispID _dispid(*this, OLETEXT("ScOpenTCPConnection"), DISPID(52));
  TAutoArgs<2> _args;
  _args[1] = RecipientAddr /*[VT_BSTR:0]*/;
  _args[2] = RecipientPort /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScOpenUDPConnection(BSTR SenderAddr, long SenderPort, 
                                                        BSTR RecipientAddr, long RecipientPort)
{
  _TDispID _dispid(*this, OLETEXT("ScOpenUDPConnection"), DISPID(53));
  TAutoArgs<4> _args;
  _args[1] = SenderAddr /*[VT_BSTR:0]*/;
  _args[2] = SenderPort /*[VT_I4:0]*/;
  _args[3] = RecipientAddr /*[VT_BSTR:0]*/;
  _args[4] = RecipientPort /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScOpticMatrixScale(double ScaleX, double ScaleY)
{
  _TDispID _dispid(*this, OLETEXT("ScOpticMatrixScale"), DISPID(54));
  TAutoArgs<2> _args;
  _args[1] = ScaleX /*[VT_R8:0]*/;
  _args[2] = ScaleY /*[VT_R8:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScSetPixelMapForPen(long pen, long pixel_zone0, long pixel_zone1
                                                        , long pixel_zone2, long pixel_zone3, 
                                                        long pixel_zone4, long pixel_zone5)
{
  _TDispID _dispid(*this, OLETEXT("ScSetPixelMapForPen"), DISPID(55));
  TAutoArgs<7> _args;
  _args[1] = pen /*[VT_I4:0]*/;
  _args[2] = pixel_zone0 /*[VT_I4:0]*/;
  _args[3] = pixel_zone1 /*[VT_I4:0]*/;
  _args[4] = pixel_zone2 /*[VT_I4:0]*/;
  _args[5] = pixel_zone3 /*[VT_I4:0]*/;
  _args[6] = pixel_zone4 /*[VT_I4:0]*/;
  _args[7] = pixel_zone5 /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScSetMode(long Mode)
{
  _TDispID _dispid(*this, OLETEXT("ScSetMode"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = Mode /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScGetMode(long* Mode)
{
  _TDispID _dispid(*this, OLETEXT("ScGetMode"), DISPID(57));
  TAutoArgs<1> _args;
  _args[1] = Mode /*[VT_I4:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScDuplicateEntity(BSTR EntityName, BSTR DuplicatedEntityName)
{
  _TDispID _dispid(*this, OLETEXT("ScDuplicateEntity"), DISPID(58));
  TAutoArgs<2> _args;
  _args[1] = EntityName /*[VT_BSTR:0]*/;
  _args[2] = DuplicatedEntityName /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScProcessFlashJob(BSTR Name, long JobNum, long Mode, long Flags)
{
  _TDispID _dispid(*this, OLETEXT("ScProcessFlashJob"), DISPID(59));
  TAutoArgs<4> _args;
  _args[1] = Name /*[VT_BSTR:0]*/;
  _args[2] = JobNum /*[VT_I4:0]*/;
  _args[3] = Mode /*[VT_I4:0]*/;
  _args[4] = Flags /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> BSTR __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScFlashCommand(BSTR Command, long Flags, BSTR* Return)
{
  _TDispID _dispid(*this, OLETEXT("ScFlashCommand"), DISPID(60));
  TAutoArgs<3> _args;
  _args[1] = Command /*[VT_BSTR:0]*/;
  _args[2] = Flags /*[VT_I4:0]*/;
  _args[3] = Return /*[VT_BSTR:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScSetIDStringData(long Type, long Index, BSTR Data)
{
  _TDispID _dispid(*this, OLETEXT("ScSetIDStringData"), DISPID(61));
  TAutoArgs<3> _args;
  _args[1] = Type /*[VT_I4:0]*/;
  _args[2] = Index /*[VT_I4:0]*/;
  _args[3] = Data /*[VT_BSTR:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScExport(BSTR EntityName, BSTR FileName, BSTR Type, 
                                             double Resolution, long Flags)
{
  _TDispID _dispid(*this, OLETEXT("ScExport"), DISPID(62));
  TAutoArgs<5> _args;
  _args[1] = EntityName /*[VT_BSTR:0]*/;
  _args[2] = FileName /*[VT_BSTR:0]*/;
  _args[3] = Type /*[VT_BSTR:0]*/;
  _args[4] = Resolution /*[VT_R8:0]*/;
  _args[5] = Flags /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScSlice(BSTR EntityName, BSTR LayerSolidName, 
                                            double sliceThickness, long doSliceOnlySelected, 
                                            long doReverseDirection)
{
  _TDispID _dispid(*this, OLETEXT("ScSlice"), DISPID(63));
  TAutoArgs<5> _args;
  _args[1] = EntityName /*[VT_BSTR:0]*/;
  _args[2] = LayerSolidName /*[VT_BSTR:0]*/;
  _args[3] = sliceThickness /*[VT_R8:0]*/;
  _args[4] = doSliceOnlySelected /*[VT_I4:0]*/;
  _args[5] = doReverseDirection /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScSetPenPathForPen(short* pen, short* enable, short* penToUse1, 
                                                       int* loopOfPenToUse1, short* penToUse2, 
                                                       int* loopOfPenToUse2, short* penToUse3, 
                                                       int* loopOfPenToUse3, short* penToUse4, 
                                                       int* loopOfPenToUse4, short* penToUse5, 
                                                       int* loopOfPenToUse5)
{
  _TDispID _dispid(*this, OLETEXT("ScSetPenPathForPen"), DISPID(64));
  TAutoArgs<12> _args;
  _args[1] = pen /*[VT_I2:1]*/;
  _args[2] = enable /*[VT_I2:1]*/;
  _args[3] = penToUse1 /*[VT_I2:1]*/;
  _args[4] = loopOfPenToUse1 /*[VT_INT:1]*/;
  _args[5] = penToUse2 /*[VT_I2:1]*/;
  _args[6] = loopOfPenToUse2 /*[VT_INT:1]*/;
  _args[7] = penToUse3 /*[VT_I2:1]*/;
  _args[8] = loopOfPenToUse3 /*[VT_INT:1]*/;
  _args[9] = penToUse4 /*[VT_I2:1]*/;
  _args[10] = loopOfPenToUse4 /*[VT_INT:1]*/;
  _args[11] = penToUse5 /*[VT_I2:1]*/;
  _args[12] = loopOfPenToUse5 /*[VT_INT:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScGetPenPathForPen(short* pen, short* enable, short* penToUse1, 
                                                       int* loopOfPenToUse1, short* penToUse2, 
                                                       int* loopOfPenToUse2, short* penToUse3, 
                                                       int* loopOfPenToUse3, short* penToUse4, 
                                                       int* loopOfPenToUse4, short* penToUse5, 
                                                       int* loopOfPenToUse5)
{
  _TDispID _dispid(*this, OLETEXT("ScGetPenPathForPen"), DISPID(65));
  TAutoArgs<12> _args;
  _args[1] = pen /*[VT_I2:1]*/;
  _args[2] = enable /*[VT_I2:1]*/;
  _args[3] = penToUse1 /*[VT_I2:1]*/;
  _args[4] = loopOfPenToUse1 /*[VT_INT:1]*/;
  _args[5] = penToUse2 /*[VT_I2:1]*/;
  _args[6] = loopOfPenToUse2 /*[VT_INT:1]*/;
  _args[7] = penToUse3 /*[VT_I2:1]*/;
  _args[8] = loopOfPenToUse3 /*[VT_INT:1]*/;
  _args[9] = penToUse4 /*[VT_I2:1]*/;
  _args[10] = loopOfPenToUse4 /*[VT_INT:1]*/;
  _args[11] = penToUse5 /*[VT_I2:1]*/;
  _args[12] = loopOfPenToUse5 /*[VT_INT:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScRotateEntity3D(BSTR EntityName, double px, double py, 
                                                     double pz, double vx, double vy, double vz, 
                                                     double Angle)
{
  _TDispID _dispid(*this, OLETEXT("ScRotateEntity3D"), DISPID(66));
  TAutoArgs<8> _args;
  _args[1] = EntityName /*[VT_BSTR:0]*/;
  _args[2] = px /*[VT_R8:0]*/;
  _args[3] = py /*[VT_R8:0]*/;
  _args[4] = pz /*[VT_R8:0]*/;
  _args[5] = vx /*[VT_R8:0]*/;
  _args[6] = vy /*[VT_R8:0]*/;
  _args[7] = vz /*[VT_R8:0]*/;
  _args[8] = Angle /*[VT_R8:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScGetEntityOutline2D(BSTR EntityName, double* MinX, double* MinY
                                                         , double* MaxX, double* MaxY)
{
  _TDispID _dispid(*this, OLETEXT("ScGetEntityOutline2D"), DISPID(67));
  TAutoArgs<5> _args;
  _args[1] = EntityName /*[VT_BSTR:0]*/;
  _args[2] = MinX /*[VT_R8:1]*/;
  _args[3] = MinY /*[VT_R8:1]*/;
  _args[4] = MaxX /*[VT_R8:1]*/;
  _args[5] = MaxY /*[VT_R8:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> long __fastcall
_DSamlight_client_ctrl_ocxDispT<T>::ScGetEntityOutline3D(BSTR EntityName, double* MinX, double* MinY
                                                         , double* MaxX, double* MaxY, double* MinZ
                                                         , double* MaxZ)
{
  _TDispID _dispid(*this, OLETEXT("ScGetEntityOutline3D"), DISPID(68));
  TAutoArgs<7> _args;
  _args[1] = EntityName /*[VT_BSTR:0]*/;
  _args[2] = MinX /*[VT_R8:1]*/;
  _args[3] = MinY /*[VT_R8:1]*/;
  _args[4] = MaxX /*[VT_R8:1]*/;
  _args[5] = MaxY /*[VT_R8:1]*/;
  _args[6] = MinZ /*[VT_R8:1]*/;
  _args[7] = MaxZ /*[VT_R8:1]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  _DSamlight_client_ctrl_ocxEvents
// Flags:     (4096) Dispatchable
// GUID:      {5F3246AD-5086-45E1-A3DA-CB9B0BA234ED}
// *********************************************************************//
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ScSamlightClientCtrl
// Event Interface : _DSamlight_client_ctrl_ocxEvents
// *********************************************************************//
template <class T>
class TEvents_ScSamlightClientCtrl : public IConnectionPointImpl<T,
                                                 &DIID__DSamlight_client_ctrl_ocxEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
protected:
  _DSamlight_client_ctrl_ocxEventsDisp m_EventIntfObj;
};

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : ScConnectionToolCtrl
// Event Interface : SC_DConnectionToolEvents
// *********************************************************************//
template <class T>
class TEvents_ScConnectionToolCtrl : public IConnectionPointImpl<T,
                                                 &DIID_SC_DConnectionToolEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire_ScReceived(long MessageSize);
protected:
  SC_DConnectionToolEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_ScConnectionToolCtrl<T>::Fire_ScReceived(long MessageSize)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ScReceived(MessageSize);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Samlight_client_ctrl_ocxlib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Samlight_client_ctrl_ocxlib_tlb;
#endif

#pragma option pop

#endif // SAMLIGHT_CLIENT_CTRL_OCXLib_TLBH
