// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 2016/10/23 19:34:00 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Windows\SysWOW64\PcommServer.exe (1)
// LIBID: {50ECCF67-B73C-431B-A53D-9EDDAF3CE611}
// LCID: 0
// Helpfile: 
// HelpString: PcommServer 1.0 Type Library
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// ************************************************************************ //
#ifndef   PCOMMSERVERLib_TLBH
#define   PCOMMSERVERLib_TLBH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Pcommserverlib_tlb
{

// *********************************************************************//
// HelpString: PcommServer 1.0 Type Library
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_PCOMMSERVERLib;
extern __declspec (package) const GUID GUID_DEVPMACTYPE;
extern __declspec (package) const GUID GUID_DEVPMACFIRMWARETYPE;
extern __declspec (package) const GUID GUID_DEVLOCATIONTYPE;
extern __declspec (package) const GUID GUID_DEVASCIIMODE;
extern __declspec (package) const GUID GUID_DEVVBGWFORMAT;
extern __declspec (package) const GUID GUID_DEVBGVREADSTATUS;
extern __declspec (package) const GUID GUID_DEVPLC_STATUS_STRUCT;
extern __declspec (package) const GUID GUID_DEVPLCC_STATUS_STRUCT;
extern __declspec (package) const GUID GUID_DEVTOTAL_PLC_STATUS_STRUCT;
extern __declspec (package) const GUID GUID_DEVGATMODE;
extern __declspec (package) const GUID GUID_DEVWTG_EX;
extern __declspec (package) const GUID GUID_DEVGATHER_INFO;
extern __declspec (package) const GUID GUID_DEVGATHER_HEADER;
extern __declspec (package) const GUID GUID_DEVFEEDBACKTYPE;
extern __declspec (package) const GUID GUID_DEVULTRALIGHT_INFO;
extern __declspec (package) const GUID GUID_DEVPROGRAMMODE;
extern __declspec (package) const GUID GUID_DEVMOTION;
extern __declspec (package) const GUID GUID_DEVMOTIONMODE;
extern __declspec (package) const GUID GUID_DEVDPRBINROTSTATUS;
extern __declspec (package) const GUID GUID_DEVFGMOTORTURBO;
extern __declspec (package) const GUID GUID_DEVFGMOTOR;
extern __declspec (package) const GUID GUID_DEVBGCOORD;
extern __declspec (package) const GUID GUID_DEVBGCOORDTURBO;
extern __declspec (package) const GUID GUID_DEVPOSDATASTRUCT;
extern __declspec (package) const GUID GUID_DEVDATA;
extern __declspec (package) const GUID GUID___MIDL___MIDL_itf_PmacServer_0000_0001;
extern __declspec (package) const GUID GUID_DEVPOSDATA;
extern __declspec (package) const GUID GUID_pmacStripPlotDATA;
extern __declspec (package) const GUID GUID_DEVMSTURBO;
extern __declspec (package) const GUID GUID_DEVMSNONTURBO;
extern __declspec (package) const GUID GUID_DEVGSTURBO;
extern __declspec (package) const GUID GUID_DEVGSNONTURBO;
extern __declspec (package) const GUID GUID_DEVCSTURBO;
extern __declspec (package) const GUID GUID_DEVCSNONTURBO;
extern __declspec (package) const GUID GUID_DEVUPLOAD;
extern __declspec (package) const GUID IID_IPmacDevice;
extern __declspec (package) const GUID DIID__IPmacDeviceEvents;
extern __declspec (package) const GUID CLSID_PmacDevice;
extern __declspec (package) const GUID GUID_NCPOSTYPE;
extern __declspec (package) const GUID GUID_NCMODE;
extern __declspec (package) const GUID GUID_NCAXISSELECT;
extern __declspec (package) const GUID GUID_NCJOGSELECT;
extern __declspec (package) const GUID GUID_NCSPEEDSELECT;
extern __declspec (package) const GUID GUID_NCSPINDLESELECT;
extern __declspec (package) const GUID GUID_NCCLNTSELECT;
extern __declspec (package) const GUID GUID_NCBUFFERMODE;
extern __declspec (package) const GUID GUID_NCTOOLMODE;
extern __declspec (package) const GUID GUID_NCERRORMODE;
extern __declspec (package) const GUID GUID_NCERRORTYPE;
extern __declspec (package) const GUID GUID_NCTIMEBASEMODE;
extern __declspec (package) const GUID GUID_NCFEEDRATEMODE;
extern __declspec (package) const GUID GUID_NCFIVEAXISMODE;
extern __declspec (package) const GUID GUID_NCMACH_STATE_TYPE;
extern __declspec (package) const GUID GUID_NCMACHINETYPE;
extern __declspec (package) const GUID GUID_NCADDRESS;
extern __declspec (package) const GUID GUID_NCTOOLTYPE;
extern __declspec (package) const GUID GUID_NCMATERIALTYPE;
extern __declspec (package) const GUID GUID_NCTOOLHAND;
extern __declspec (package) const GUID GUID_NCTOOLDIRECTION;
extern __declspec (package) const GUID GUID_NCTOOLOFSTYPE;
extern __declspec (package) const GUID GUID_NCCOORDTYPE;
extern __declspec (package) const GUID GUID_NCTOOL;
extern __declspec (package) const GUID GUID_NCTOOLLIFE;
extern __declspec (package) const GUID GUID_NCDATA;
extern __declspec (package) const GUID IID_IPmacNC;
extern __declspec (package) const GUID DIID__IPmacNCEvents;
extern __declspec (package) const GUID CLSID_PmacNC;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      DEVPMACTYPE;
enum      DEVPMACFIRMWARETYPE;
enum      DEVLOCATIONTYPE;
enum      DEVASCIIMODE;
struct    tagDEVVBGWFORMAT;
typedef   tagDEVVBGWFORMAT DEVVBGWFORMAT;

struct    tagDEVBGVREADSTATUS;
typedef   tagDEVBGVREADSTATUS DEVBGVREADSTATUS;

struct    tagDEVPLC_STATUS_STRUCT;
typedef   tagDEVPLC_STATUS_STRUCT DEVPLC_STATUS_STRUCT;

struct    tagDEVPLCC_STATUS_STRUCT;
typedef   tagDEVPLCC_STATUS_STRUCT DEVPLCC_STATUS_STRUCT;

struct    tagDEVTOTAL_PLC_STATUS_STRUCT;
typedef   tagDEVTOTAL_PLC_STATUS_STRUCT DEVTOTAL_PLC_STATUS_STRUCT;

enum      DEVGATMODE;
struct    tagDEVWTG_EX;
typedef   tagDEVWTG_EX DEVWTG_EX;

struct    tagDEVGATHER_INFO;
typedef   tagDEVGATHER_INFO DEVGATHER_INFO;

struct    tagDEVGATHER_HEADER;
typedef   tagDEVGATHER_HEADER DEVGATHER_HEADER;

enum      DEVFEEDBACKTYPE;
struct    tagDEVULTRALIGHT_INFO;
typedef   tagDEVULTRALIGHT_INFO DEVULTRALIGHT_INFO;

enum      DEVPROGRAMMODE;
enum      DEVMOTION;
enum      DEVMOTIONMODE;
enum      DEVDPRBINROTSTATUS;
struct    tagDEVFGMOTORTURBO;
typedef   tagDEVFGMOTORTURBO DEVFGMOTORTURBO;

struct    tagDEVFGMOTOR;
typedef   tagDEVFGMOTOR DEVFGMOTOR;

struct    tagDEVBGCOORD;
typedef   tagDEVBGCOORD DEVBGCOORD;

struct    tagDEVBGCOORDTURBO;
typedef   tagDEVBGCOORDTURBO DEVBGCOORDTURBO;

struct    tagDEVPOSDATASTRUCT;
typedef   tagDEVPOSDATASTRUCT DEVPOSDATASTRUCT;

struct    tagDEVDATA;
typedef   tagDEVDATA DEVDATA;

union     __MIDL___MIDL_itf_PmacServer_0000_0001;
struct    tagDEVPOSDATA;
typedef   tagDEVPOSDATA DEVPOSDATA;

struct    tagpmacStripPlotDATA;
typedef   tagpmacStripPlotDATA pmacStripPlotDATA;

struct    tagDEVMSTURBO;
typedef   tagDEVMSTURBO DEVMSTURBO;

struct    tagDEVMSNONTURBO;
typedef   tagDEVMSNONTURBO DEVMSNONTURBO;

struct    tagDEVGSTURBO;
typedef   tagDEVGSTURBO DEVGSTURBO;

struct    tagDEVGSNONTURBO;
typedef   tagDEVGSNONTURBO DEVGSNONTURBO;

struct    tagDEVCSTURBO;
typedef   tagDEVCSTURBO DEVCSTURBO;

struct    tagDEVCSNONTURBO;
typedef   tagDEVCSNONTURBO DEVCSNONTURBO;

struct    tagDEVUPLOAD;
typedef   tagDEVUPLOAD DEVUPLOAD;

enum      NCPOSTYPE;
enum      NCMODE;
enum      NCAXISSELECT;
enum      NCJOGSELECT;
enum      NCSPEEDSELECT;
enum      NCSPINDLESELECT;
enum      NCCLNTSELECT;
enum      NCBUFFERMODE;
enum      NCTOOLMODE;
enum      NCERRORMODE;
enum      NCERRORTYPE;
enum      NCTIMEBASEMODE;
enum      NCFEEDRATEMODE;
enum      NCFIVEAXISMODE;
enum      NCMACH_STATE_TYPE;
enum      NCMACHINETYPE;
enum      NCADDRESS;
enum      NCTOOLTYPE;
enum      NCMATERIALTYPE;
enum      NCTOOLHAND;
enum      NCTOOLDIRECTION;
enum      NCTOOLOFSTYPE;
enum      NCCOORDTYPE;
struct    tagNCTOOL;
typedef   tagNCTOOL NCTOOL;

struct    tagNCTOOLLIFE;
typedef   tagNCTOOLLIFE NCTOOLLIFE;

struct    tagNCDATA;
typedef   tagNCDATA NCDATA;

interface DECLSPEC_UUID("{8A00B576-9C14-425B-8878-493C91D8DE5C}") IPmacDevice;
typedef TComInterface<IPmacDevice, &IID_IPmacDevice> IPmacDevicePtr;

interface DECLSPEC_UUID("{D1C5C7C8-5E0C-495E-9AAF-85B146DA5F13}") _IPmacDeviceEvents;
typedef TComInterface<_IPmacDeviceEvents, &DIID__IPmacDeviceEvents> _IPmacDeviceEventsPtr;

interface DECLSPEC_UUID("{0A322163-C2E1-4152-ADED-91740ACE7513}") IPmacNC;
typedef TComInterface<IPmacNC, &IID_IPmacNC> IPmacNCPtr;

interface DECLSPEC_UUID("{32C9ADDE-9F29-4658-8EC3-F1B8395FE19F}") _IPmacNCEvents;
typedef TComInterface<_IPmacNCEvents, &DIID__IPmacNCEvents> _IPmacNCEventsPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef IPmacDevice PmacDevice;
typedef IPmacDevicePtr PmacDevicePtr;
typedef IPmacNC PmacNC;
typedef IPmacNCPtr PmacNCPtr;

#define LIBID_OF_PmacDevice (&LIBID_PCOMMSERVERLib)
#define LIBID_OF_PmacNC (&LIBID_PCOMMSERVERLib)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum DEVPMACTYPE
{
  DEV_PT_PMAC1 = 1, 
  DEV_PT_PMAC2 = 2, 
  DEV_PT_PMACUL = 3, 
  DEV_PT_GEOPMAC = 4, 
  DEV_PT_PMAC = 5, 
  DEV_PT_PMAC1T = 6, 
  DEV_PT_PMAC2T = 7, 
  DEV_PT_PMACUT = 8, 
  DEV_PT_UMAC = 9, 
  DEV_PT_QMAC = 10, 
  DEV_PT_PMAC1TSM = 11, 
  DEV_PT_PMAC2TSM = 12, 
  DEV_PT_TURBOBRICK = 13, 
  DEV_PT_GEOBRICK = 14
} DEVPMACTYPE;

typedef enum DEVPMACFIRMWARETYPE
{
  DEV_PID = 1, 
  DEV_ESA = 2, 
  DEV_LHB = 3
} DEVPMACFIRMWARETYPE;

typedef enum DEVLOCATIONTYPE
{
  DEV_LT_UNKNOWN = 0, 
  DEV_LT_ISA = 1, 
  DEV_LT_SER = 2, 
  DEV_LT_ETH = 3, 
  DEV_LT_PCI = 4, 
  DEV_LT_USB = 5, 
  DEV_LT_LAST = 6
} DEVLOCATIONTYPE;

typedef enum DEVASCIIMODE
{
  DEV_BUS = 0, 
  DEV_DPR = 1
} DEVASCIIMODE;

typedef enum DEVGATMODE
{
  DEVGAT_RAM_NOWRAP = 0, 
  DEVGAT_RAM_WRAP = 1, 
  DEVGAT_DPR_NOWRAP = 2, 
  DEVGAT_DPR_WRAP = 3
} DEVGATMODE;

typedef enum DEVFEEDBACKTYPE
{
  DEVFB_RESOLVER = 0, 
  DEVFB_ABSOLUTE = 1, 
  DEVFB_UVW = 2, 
  DEVFB_INCREMENTAL = 3, 
  DEVFB_MLDT = 4, 
  DEVFB_ANALOG = 5
} DEVFEEDBACKTYPE;

typedef enum DEVPROGRAMMODE
{
  DEV_PRG_STOP = 0, 
  DEV_PRG_RUN = 1, 
  DEV_PRG_STEP = 2, 
  DEV_PRG_HOLD = 3, 
  DEV_PRG_JOGHOLD = 4, 
  DEV_PRG_JOGSTOP = 5
} DEVPROGRAMMODE;

typedef enum DEVMOTION
{
  DEV_MOTION_INPOS = 0, 
  DEV_MOTION_JOG = 1, 
  DEV_MOTION_RUNNING = 2, 
  DEV_MOTION_HOMING = 3, 
  DEV_MOTION_HANDLE = 4, 
  DEV_MOTION_OPENLOOP = 5, 
  DEV_MOTION_DISABLED = 6
} DEVMOTION;

typedef enum DEVMOTIONMODE
{
  DEV_MOTIONMODE_LINEAR = 0, 
  DEV_MOTIONMODE_RAPID = 1, 
  DEV_MOTIONMODE_CIRCW = 2, 
  DEV_MOTIONMODE_CIRCCW = 3, 
  DEV_MOTIONMODE_SPLINE = 4, 
  DEV_MOTIONMODE_PVT = 5
} DEVMOTIONMODE;

typedef enum DEVDPRBINROTSTATUS
{
  DEV_DPRERROR = 0xFFFFFFFF, 
  DEV_DPROK = 0, 
  DEV_DPRBUFBSY = 1, 
  DEV_DPREOF = 2
} DEVDPRBINROTSTATUS;

typedef enum NCPOSTYPE
{
  NC_ABSOLUTE = 0, 
  NC_RELATIVE = 1, 
  NC_MACHINE = 2, 
  NC_COMMANDED = 3, 
  NC_DISTTOGO = 4, 
  NC_FERR = 5
} NCPOSTYPE;

typedef enum NCMODE
{
  NC_MODE_UNKNOWN = 0, 
  NC_MODE_AUTO = 1, 
  NC_MODE_MANUAL = 2, 
  NC_MODE_MDI = 3, 
  NC_MODE_LAST = 4
} NCMODE;

typedef enum NCAXISSELECT
{
  NC_SELECT_UNKNOWN = 0, 
  NC_SELECTX = 1, 
  NC_SELECTY = 2, 
  NC_SELECTZ = 3, 
  NC_SELECTA = 4, 
  NC_SELECTB = 5, 
  NC_SELECTC = 6, 
  NC_SELECTU = 7, 
  NC_SELECTV = 8, 
  NC_SELECTW = 9, 
  NC_SELECTLAST = 10
} NCAXISSELECT;

typedef enum NCJOGSELECT
{
  NC_JOG_UNKNOWN = 0, 
  NC_JOG_HANDWHEEL = 1, 
  NC_JOG_INCREMENTAL = 2, 
  NC_JOG_CONTINUOUS = 3, 
  NC_JOG_HOME = 4, 
  NC_JOG_LAST = 5
} NCJOGSELECT;

typedef enum NCSPEEDSELECT
{
  NC_SPEED_UNKNOWN = 0, 
  NC_SPEED_LOW = 1, 
  NC_SPEED_MEDL = 2, 
  NC_SPEED_MEDIUM = 3, 
  NC_SPEED_MEDH = 4, 
  NC_SPEED_HIGH = 5, 
  NC_SPEED_LAST = 6
} NCSPEEDSELECT;

typedef enum NCSPINDLESELECT
{
  NC_SPINDLE_UNKNOWN = 0, 
  NC_SPINDLE_CCW = 1, 
  NC_SPINDLE_OFF = 2, 
  NC_SPINDLE_CW = 3, 
  NC_SPINDLE_ORIENT1 = 4, 
  NC_SPINDLE_ORIENT2 = 5, 
  NC_SPINDLE_LAST = 6
} NCSPINDLESELECT;

typedef enum NCCLNTSELECT
{
  NC_COOLANT_UNKNOWN = 0, 
  NC_COOLANT_AUTO = 1, 
  NC_COOLANT_FLOOD = 2, 
  NC_COOLANT_MIST = 3, 
  NC_COOLANT_BOTH = 4, 
  NC_COOLANT_LAST = 5
} NCCLNTSELECT;

typedef enum NCBUFFERMODE
{
  NC_PARSEDTOBINARY = 0, 
  NC_FILETOBINARY = 1, 
  NC_RESETBUFFER = 2
} NCBUFFERMODE;

typedef enum NCTOOLMODE
{
  NC_TOOL_UNKNOWN = 0, 
  NC_TOOL_CHANGE = 1, 
  NC_TOOL_CAROUSELINC = 2, 
  NC_TOOL_CAROUSELDEC = 3, 
  NC_TOOL_RELEASE = 4, 
  NC_TOOL_ENGAGE = 5, 
  NC_TOOL_LAST = 6
} NCTOOLMODE;

typedef enum NCERRORMODE
{
  NC_ERR_MESSAGE = 0, 
  NC_ERR_WARN = 1, 
  NC_ERR_STOP = 2, 
  NC_ERR_FATAL = 3
} NCERRORMODE;

typedef enum NCERRORTYPE
{
  NC_ERR_SYSTEM = 0, 
  NC_ERR_MOTOR = 1, 
  NC_ERR_CODE = 2, 
  NC_ERR_COMMON = 3, 
  NC_ERR_PLC = 4, 
  NC_ERR_OPERMSG = 5
} NCERRORTYPE;

typedef enum NCTIMEBASEMODE
{
  NC_TIMEBASE_CUT = 0, 
  NC_TIMEBASE_RAPID = 1, 
  NC_TIMEBASE_THREAD = 2, 
  NC_TIMEBASE_FPR = 3, 
  NC_TIMEBASE_LAST = 4
} NCTIMEBASEMODE;

typedef enum NCFEEDRATEMODE
{
  NC_FEEDRATE_FPM = 0, 
  NC_FEEDRATE_INVERSE = 1, 
  NC_FEEDRATE_LAST = 2
} NCFEEDRATEMODE;

typedef enum NCFIVEAXISMODE
{
  NC_FIVEAXIS_DISABLED = 0, 
  NC_FIVEAXIS_AC = 1, 
  NC_FIVEAXIS_BC = 2, 
  NC_FIVEAXIS_AB = 3, 
  NC_FIVEAXIS_A = 4, 
  NC_FIVEAXIS_B = 5, 
  NC_FIVEAXIS_C = 6
} NCFIVEAXISMODE;

typedef enum NCMACH_STATE_TYPE
{
  NC_MCH_STATE_MANUAL = 0, 
  NC_MCH_STATE_MDI = 1, 
  NC_MCH_STATE_AUTO = 2
} NCMACH_STATE_TYPE;

typedef enum NCMACHINETYPE
{
  NC_UNKNOWN = 0, 
  NC_MILL = 1, 
  NC_LATHE = 2, 
  NC_GRINDER = 3, 
  NC_LASER = 4, 
  NC_EDM = 5
} NCMACHINETYPE;

typedef enum NCADDRESS
{
  NC_ADR_A = 0, 
  NC_ADR_B = 1, 
  NC_ADR_C = 2, 
  NC_ADR_X = 3, 
  NC_ADR_Y = 4, 
  NC_ADR_Z = 5, 
  NC_ADR_U = 6, 
  NC_ADR_V = 7, 
  NC_ADR_W = 8, 
  NC_ADR_E = 9, 
  NC_ADR_F = 10, 
  NC_ADR_G = 11, 
  NC_ADR_H = 12, 
  NC_ADR_D = 13, 
  NC_ADR_I = 14, 
  NC_ADR_J = 15, 
  NC_ADR_K = 16, 
  NC_ADR_L = 17, 
  NC_ADR_P = 18, 
  NC_ADR_Q = 19, 
  NC_ADR_M = 20, 
  NC_ADR_N = 21, 
  NC_ADR_O = 22, 
  NC_ADR_R = 23, 
  NC_ADR_S = 24, 
  NC_ADR_T = 25, 
  NC_ADR_UNKNOWN = 26
} NCADDRESS;

typedef enum NCTOOLTYPE
{
  NC_TOOLTYPE_UNKNOWN = 0, 
  NC_TOOLTYPE_ENDMILL = 1, 
  NC_TOOLTYPE_BALLMILL = 2, 
  NC_TOOLTYPE_DRILL = 3, 
  NC_TOOLTYPE_CSINK = 4, 
  NC_TOOLTYPE_CDRILL = 5, 
  NC_TOOLTYPE_INSERTMILL = 6, 
  NC_TOOLTYPE_LATHEINSERT = 7, 
  NC_TOOLTYPE_LAST_TOOL_TYPE = 8
} NCTOOLTYPE;

typedef enum NCMATERIALTYPE
{
  NC_MATERIAL_UNKNOWN = 0, 
  NC_MATERIAL_HSS = 1, 
  NC_MATERIAL_CARBIDE = 2, 
  NC_MATERIAL_LAST_MATERIAL_TYPE = 3
} NCMATERIALTYPE;

typedef enum NCTOOLHAND
{
  NC_TOOLHAND_Neutral = 0, 
  NC_TOOLHAND_Left = 1, 
  NC_TOOLHAND_Right = 2
} NCTOOLHAND;

typedef enum NCTOOLDIRECTION
{
  NC_TOOLDIRECTION_NEUTRAL = 0, 
  NC_TOOLDIRECTION_45 = 1, 
  NC_TOOLDIRECTION_135 = 2, 
  NC_TOOLDIRECTION_225 = 3, 
  NC_TOOLDIRECTION_315 = 4, 
  NC_TOOLDIRECTION_0 = 5, 
  NC_TOOLDIRECTION_90 = 6, 
  NC_TOOLDIRECTION_180 = 7, 
  NC_TOOLDIRECTION_270 = 8, 
  NC_TOOLDIRECTION_END = 9
} NCTOOLDIRECTION;

typedef enum NCTOOLOFSTYPE
{
  NC_TOOLOFSTYPE_GEOMETRY = 0, 
  NC_TOOLOFSTYPE_WEAR = 1, 
  NC_TOOLOFSTYPE_LENGTH = 2, 
  NC_TOOLOFSTYPE_DIAMETER = 3, 
  NC_TOOLOFSTYPE_ORIENTATION = 4, 
  NC_TOOLOFSTYPE_CUTTERCOMPENSATION = 5, 
  NC_TOOLOFSTYPE_POCKET = 6, 
  NC_TOOLOFSTYPE_PIVOTLENGTH = 7, 
  NC_TOOLOFSTYPE_CUTTERCOMPWEAR = 8, 
  NC_TOOLOFSTYPE_GROUPFAMILY = 9, 
  NC_TOOLOFSTYPE_LIFECOUNT = 10, 
  NC_TOOLOFSTYPE_LIFETIME = 11
} NCTOOLOFSTYPE;

typedef enum NCCOORDTYPE
{
  NC_COORDTYPE_G54 = 0, 
  NC_COORDTYPE_G55 = 1, 
  NC_COORDTYPE_G56 = 2, 
  NC_COORDTYPE_G57 = 3, 
  NC_COORDTYPE_G58 = 4, 
  NC_COORDTYPE_G59 = 5, 
  NC_COORDTYPE_G92 = 6, 
  NC_COORDTYPE_COMMON = 7, 
  NC_COORDTYPE_TOOL = 8, 
  NC_COORDTYPE_INTERM = 9, 
  NC_COORDTYPE_SCALE = 10, 
  NC_COORDTYPE_MIRROR = 11, 
  NC_COORDTYPE_ROTATION = 12, 
  NC_COORDTYPE_CENTER_ROT = 13, 
  NC_COORDTYPE_G54_LOCAL = 14, 
  NC_COORDTYPE_G55_LOCAL = 15, 
  NC_COORDTYPE_G56_LOCAL = 16, 
  NC_COORDTYPE_G57_LOCAL = 17, 
  NC_COORDTYPE_G58_LOCAL = 18, 
  NC_COORDTYPE_G59_LOCAL = 19, 
  NC_COORDTYPE_PRODUCT = 20, 
  NC_COORDTYPE_OFFSET_REL = 21, 
  NC_COORDTYPE_OFFSET_ABS = 22, 
  NC_COORDTYPE_CENTER_SCALE = 23, 
  NC_COORDTYPE_G53P1 = 24, 
  NC_COORDTYPE_G54P1 = 25
} NCCOORDTYPE;


// *********************************************************************//
// Declaration of Structures and Unions defined in Type Library           
// *********************************************************************//
struct tagDEVVBGWFORMAT
{
  long type_addr;
  long data1;
  long data2;
};

struct tagDEVBGVREADSTATUS
{
  unsigned_short num_entries;
  unsigned_short num_data;
  unsigned_short addr_offset;
  unsigned_short data_offset;
};

struct tagDEVPLC_STATUS_STRUCT
{
  long plc_enabled;
  long plc_start_addr;
  long plc_end_addr;
  long plc_size;
};

struct tagDEVPLCC_STATUS_STRUCT
{
  long plcc_loaded;
  long plcc_enabled;
  long plcc_start_addr;
  long plcc_end_addr;
  long plcc_size;
};

struct tagDEVTOTAL_PLC_STATUS_STRUCT
{
  long num_plc;
  long num_plcc;
  long I5;
  Pcommserverlib_tlb::DEVPLC_STATUS_STRUCT plc[32];
  Pcommserverlib_tlb::DEVPLCC_STATUS_STRUCT plcc[32];
};

struct tagDEVWTG_EX
{
  unsigned DEVCOM_TO_G;
  unsigned DEVENC_TO_G;
  unsigned DEVDAC_TO_G;
  unsigned DEVCUR_TO_G;
};

struct tagDEVGATHER_INFO
{
  VARIANT_BOOL bGatherEnabled;
  BSTR szGatherAdr;
  long lGatherSize;
  double dGatherScale;
  LPSAFEARRAY saGatherData;
};

struct tagDEVGATHER_HEADER
{
  unsigned_long size;
  double ulGatherSampleTime;
  unsigned uGatherPeriod;
  unsigned_long dwGatherMask;
  unsigned_long dwGatherMask2;
  unsigned uGatherSources;
  unsigned uGatherSamples;
  unsigned uGatherSampleLen;
  long bGatherEnabled[48];
  signed_char szGatherAdr[48][15];
  unsigned uGatherSize[48];
  double* pGatherData[48];
  double dGatherScale[48];
};

struct tagDEVULTRALIGHT_INFO
{
  unsigned_long dwNumActiveNodes;
  unsigned_long dwNumMACROStations;
  unsigned_long dwNodeActive[64];
  unsigned_long dwIsIONode[64];
  unsigned_long dwMACROStationID[64];
};

struct tagDEVFGMOTORTURBO
{
  __int64 pepos;
  long pdac;
  long sstatus;
  long msstatus;
  __int64 bpos;
  long fvel;
  __int64 hwpos;
  __int64 pos;
};

struct tagDEVFGMOTOR
{
  __int64 dpos;
  __int64 apos;
  __int64 hwpos;
  __int64 cpos;
  long pdac;
  long sstatus;
  long fvel;
  long movtim;
  long mspare[3];
};

struct tagDEVBGCOORD
{
  __int64 mpos;
  __int64 bpos;
  long mstatus;
  __int64 cstatus;
  __int64 cpos[9];
  long pstatus;
  long pr;
  long timrem;
  long tats;
  long pe;
  long fvel;
};

struct tagDEVBGCOORDTURBO
{
  __int64 ffdrate;
  long fdpot;
  short fdadr;
  short fdhld;
  long cstatus;
  __int64 cpos[9];
  long pstatus;
  long pr;
  long timrem;
  long tats;
  long pe;
  long spares[3];
};

struct tagDEVPOSDATASTRUCT
{
  double servocount;
  double x;
  double y;
  double z;
  double xfe;
  double yfe;
  double zfe;
  double feMag;
};

struct tagDEVDATA
{
  double servoTime;
  LPSAFEARRAY commandedPosition;
  LPSAFEARRAY commandedVelocity;
  LPSAFEARRAY commandedAcceleration;
  LPSAFEARRAY actualPosition;
  LPSAFEARRAY actualAverageVelocity;
  LPSAFEARRAY actualAcceleration;
  LPSAFEARRAY followingError;
  LPSAFEARRAY servoCommand;
};

union  __MIDL___MIDL_itf_PmacServer_0000_0001
{
  double d[32];
  Pcommserverlib_tlb::DEVPOSDATASTRUCT s;
};

struct tagDEVPOSDATA
{
  long tag_type;
  Pcommserverlib_tlb::__MIDL___MIDL_itf_PmacServer_0000_0001 U1;
};

struct tagpmacStripPlotDATA
{
  double servoTime;
  double commandedPosition[32];
  double commandedVelocity[32];
  double commandedAcceleration[32];
  double actualPosition[32];
  double actualAverageVelocity[32];
  double actualAcceleration[32];
  double followingError[32];
  double servoCommand[32];
};

struct tagDEVMSTURBO
{
  VARIANT_BOOL mst_motor_active;
  VARIANT_BOOL mst_neg_end_limit_set;
  VARIANT_BOOL mst_pos_end_limt_set;
  VARIANT_BOOL mst_ext_servo_algo_ena;
  VARIANT_BOOL mst_amplifier_enable;
  VARIANT_BOOL mst_open_loop_mode;
  VARIANT_BOOL mst_move_time_active;
  VARIANT_BOOL mst_integrate_mode;
  VARIANT_BOOL mst_dwell_in_progress;
  VARIANT_BOOL mst_data_block_error;
  VARIANT_BOOL mst_desired_velocity_0;
  VARIANT_BOOL mst_abort_decelerate_progs;
  VARIANT_BOOL mst_block_request;
  VARIANT_BOOL mst_home_search_progs;
  VARIANT_BOOL mst_user_written_phase_ena;
  VARIANT_BOOL mst_user_written_servo_ena;
  VARIANT_BOOL mst_y_addrs_commute;
  VARIANT_BOOL mst_commutation_enable;
  VARIANT_BOOL mst_pos_follow_offset_mode;
  VARIANT_BOOL mst_pos_follow_enable;
  VARIANT_BOOL mst_capture_error_anable;
  VARIANT_BOOL mst_software_capt_enable;
  VARIANT_BOOL mst_sign_magnitude_servo;
  VARIANT_BOOL mst_rapid_max_velocity;
  VARIANT_BOOL mst_cs_1_bit_3;
  VARIANT_BOOL mst_cs_1_bit_2;
  VARIANT_BOOL mst_cs_1_bit_1;
  VARIANT_BOOL mst_cs_1_bit_0;
  VARIANT_BOOL mst_cs_axis_def_bit_3;
  VARIANT_BOOL mst_cs_axis_def_bit_2;
  VARIANT_BOOL mst_cs_axis_def_bit_1;
  VARIANT_BOOL mst_cs_axis_def_bit_0;
  VARIANT_BOOL mst_assigned_to_cs;
  VARIANT_BOOL mst_reserver_for_future;
  VARIANT_BOOL mst_forground_in_position;
  VARIANT_BOOL mst_desired_position_stop;
  VARIANT_BOOL mst_stop_on_position_limit;
  VARIANT_BOOL mst_home_complete;
  VARIANT_BOOL mst_motor_phase_request;
  VARIANT_BOOL mst_phasing_search_error;
  VARIANT_BOOL mst_tigger_move;
  VARIANT_BOOL mst_integ_fatal_following_err;
  VARIANT_BOOL mst_i2t_amp_fault_error;
  VARIANT_BOOL mst_backlash_direction_flag;
  VARIANT_BOOL mst_amp_fault_error;
  VARIANT_BOOL mst_fault_error_exceeded;
  VARIANT_BOOL mst_warning_error_exceeded;
  VARIANT_BOOL mst_in_postion_true;
};

struct tagDEVMSNONTURBO
{
  VARIANT_BOOL msnt_motor_active;
  VARIANT_BOOL msnt_neg_end_limit_set;
  VARIANT_BOOL msnt_pos_end_limit_set;
  VARIANT_BOOL msnt_handwheel_enable;
  VARIANT_BOOL msnt_phased_motor;
  VARIANT_BOOL msnt_open_loop_mode;
  VARIANT_BOOL msnt_running_a_program;
  VARIANT_BOOL msnt_integrate_mode;
  VARIANT_BOOL msnt_dwell_in_progress;
  VARIANT_BOOL msnt_data_block_error;
  VARIANT_BOOL msnt_desired_velocity_0;
  VARIANT_BOOL msnt_abort_deceleration;
  VARIANT_BOOL msnt_block_request;
  VARIANT_BOOL msnt_home_search_active;
  VARIANT_BOOL msnt_insternal_x9;
  VARIANT_BOOL msnt_insternal_x8;
  VARIANT_BOOL msnt_insternal_x7;
  VARIANT_BOOL msnt_insternal_x6;
  VARIANT_BOOL msnt_insternal_x5;
  VARIANT_BOOL msnt_insternal_x4;
  VARIANT_BOOL msnt_insternal_x3;
  VARIANT_BOOL msnt_insternal_x2;
  VARIANT_BOOL msnt_insternal_x1;
  VARIANT_BOOL msnt_insternal_x0;
  VARIANT_BOOL msnt_assigned_to_cs;
  VARIANT_BOOL msnt_cs_1_bit_2;
  VARIANT_BOOL msnt_cs_1_bit_1;
  VARIANT_BOOL msnt_cs_1_bit_0;
  VARIANT_BOOL msnt_reserved_y19;
  VARIANT_BOOL msnt_reserved_y18;
  VARIANT_BOOL msnt_reserved_y17;
  VARIANT_BOOL msnt_reserved_y16;
  VARIANT_BOOL msnt_reserved_y15;
  VARIANT_BOOL msnt_amplifier_enabled;
  VARIANT_BOOL msnt_reserved_y13;
  VARIANT_BOOL msnt_reserved_y12;
  VARIANT_BOOL msnt_stop_on_position_limit;
  VARIANT_BOOL msnt_home_complete;
  VARIANT_BOOL msnt_reserved_y9;
  VARIANT_BOOL msnt_phasing_search_error;
  VARIANT_BOOL msnt_tigger_move;
  VARIANT_BOOL msnt_integ_fatal_follow_err;
  VARIANT_BOOL msnt_i2t_amp_fault_error;
  VARIANT_BOOL msnt_backlash_direction_flag;
  VARIANT_BOOL msnt_amp_fault_error;
  VARIANT_BOOL msnt_fault_following_error;
  VARIANT_BOOL msnt_warning_following_error;
  VARIANT_BOOL msnt_in_position_true;
};

struct tagDEVGSTURBO
{
  VARIANT_BOOL gst_main_error;
  VARIANT_BOOL gst_rti_reentry_error;
  VARIANT_BOOL gst_cpu_type_1;
  VARIANT_BOOL gst_servo_error;
  VARIANT_BOOL gst_data_gath_enabled;
  VARIANT_BOOL gst_reserved_x18;
  VARIANT_BOOL gst_gather_external_trig;
  VARIANT_BOOL gst_small_mem_turbo_pmac;
  VARIANT_BOOL gst_internal_15;
  VARIANT_BOOL gst_compensate_table_on;
  VARIANT_BOOL gst_general_checksum_err;
  VARIANT_BOOL gst_firmware_checksum_err;
  VARIANT_BOOL gst_dpram_error;
  VARIANT_BOOL gst_earom_error;
  VARIANT_BOOL gst_real_time_interr_warn;
  VARIANT_BOOL gst_illeagal_l_var_def;
  VARIANT_BOOL gst_servo_macro_ic_config_err;
  VARIANT_BOOL gst_tws_var_partity_error;
  VARIANT_BOOL gst_macro_comm_error;
  VARIANT_BOOL gst_macro_ring_error;
  VARIANT_BOOL gst_no_phase_clock_error;
  VARIANT_BOOL gst_reserved_x2;
  VARIANT_BOOL gst_all_cards_add_serially;
  VARIANT_BOOL gst_this_cards_add_serially;
  VARIANT_BOOL gst_turbo_ultralite;
  VARIANT_BOOL gst_turbo_vme;
  VARIANT_BOOL gst_cpu_type;
  VARIANT_BOOL gst_binary_rotary_buff_open;
  VARIANT_BOOL gst_motion_buffer_open;
  VARIANT_BOOL gst_ascii_rotary_buffer_open;
  VARIANT_BOOL gst_plc_buffer_open;
  VARIANT_BOOL gst_umac_turbo;
  VARIANT_BOOL gst_internal_y15;
  VARIANT_BOOL gst_internal_y14;
  VARIANT_BOOL gst_reserved_y13;
  VARIANT_BOOL gst_reserved_y12;
  VARIANT_BOOL gst_fixed_buffer_full;
  VARIANT_BOOL gst_macro_ring_test_enable;
  VARIANT_BOOL gst_ring_active;
  VARIANT_BOOL gst_modbus_active;
  VARIANT_BOOL gst_reserved_y7;
  VARIANT_BOOL gst_reserved_y6;
  VARIANT_BOOL gst_macro_ring_rcvd_break_msg;
  VARIANT_BOOL gst_macro_ring_break;
  VARIANT_BOOL gst_macro_ring_syn_pack_fault;
  VARIANT_BOOL gst_reserved_y2;
  VARIANT_BOOL gst_reserved_y1;
  VARIANT_BOOL gst_e_stop;
};

struct tagDEVGSNONTURBO
{
  VARIANT_BOOL gsnt_real_time_interr_active;
  VARIANT_BOOL gsnt_real_time_interr_reentry;
  VARIANT_BOOL gsnt_servo_active;
  VARIANT_BOOL gsnt_servo_error;
  VARIANT_BOOL gsnt_data_gather_enabled;
  VARIANT_BOOL gsnt_gather_on_next_servo;
  VARIANT_BOOL gsnt_gather_on_enternal_trig;
  VARIANT_BOOL gsnt_reserved_x16;
  VARIANT_BOOL gsnt_reserved_x15;
  VARIANT_BOOL gsnt_compensate_table_open;
  VARIANT_BOOL gsnt_general_checksum_err;
  VARIANT_BOOL gsnt_firmware_checksum_err;
  VARIANT_BOOL gsnt_dpram_error;
  VARIANT_BOOL gsnt_earom_error;
  VARIANT_BOOL gsnt_internal_x9;
  VARIANT_BOOL gsnt_internal_x8;
  VARIANT_BOOL gsnt_internal_x7;
  VARIANT_BOOL gsnt_tws_var_parity_error;
  VARIANT_BOOL gsnt_marco_aux_error;
  VARIANT_BOOL gsnt_reserved_x4;
  VARIANT_BOOL gsnt_reserved_x3;
  VARIANT_BOOL gsnt_reserved_x2;
  VARIANT_BOOL gsnt_all_cards_add_serially;
  VARIANT_BOOL gsnt_this_cards_add_serially;
  VARIANT_BOOL gsnt_extended_read;
  VARIANT_BOOL gsnt_host_port_comm_mode;
  VARIANT_BOOL gsnt_internal_y21;
  VARIANT_BOOL gsnt_internal_y20;
  VARIANT_BOOL gsnt_motion_buffer_open;
  VARIANT_BOOL gsnt_rotary_buffer_open;
  VARIANT_BOOL gsnt_plc_buffer_open;
  VARIANT_BOOL gsnt_plc_command;
  VARIANT_BOOL gsnt_vme_port_comm_mode;
  VARIANT_BOOL gsnt_internal_y14;
  VARIANT_BOOL gsnt_internal_y13;
  VARIANT_BOOL gsnt_internal_y12;
  VARIANT_BOOL gsnt_fixed_buffer_full;
  VARIANT_BOOL gsnt_internal_y10;
  VARIANT_BOOL gsnt_internal_y9;
  VARIANT_BOOL gsnt_internal_y8;
  VARIANT_BOOL gsnt_reserved_y7;
  VARIANT_BOOL gsnt_reserved_y6;
  VARIANT_BOOL gsnt_reserved_y5;
  VARIANT_BOOL gsnt_reserved_y4;
  VARIANT_BOOL gsnt_reserved_y3;
  VARIANT_BOOL gsnt_reserved_y2;
  VARIANT_BOOL gsnt_reserved_y1;
  VARIANT_BOOL gsnt_reserved_y0;
};

struct tagDEVCSTURBO
{
  VARIANT_BOOL cst_z_axis_used_in_feedrate;
  VARIANT_BOOL cst_z_axis_increment_mode;
  VARIANT_BOOL cst_y_axis_used_in_feedrate;
  VARIANT_BOOL cst_y_axis_increment_mode;
  VARIANT_BOOL cst_x_axis_used_in_feedrate;
  VARIANT_BOOL cst_x_axis_increment_mode;
  VARIANT_BOOL cst_w_axis_used_in_feedrate;
  VARIANT_BOOL cst_w_axis_increment_mode;
  VARIANT_BOOL cst_v_axis_used_in_feedrate;
  VARIANT_BOOL cst_v_axis_increment_mode;
  VARIANT_BOOL cst_u_axis_used_in_feedrate;
  VARIANT_BOOL cst_u_axis_increment_mode;
  VARIANT_BOOL cst_c_axis_used_in_feedrate;
  VARIANT_BOOL cst_c_axis_increment_mode;
  VARIANT_BOOL cst_b_axis_used_in_feedrate;
  VARIANT_BOOL cst_b_axis_increment_mode;
  VARIANT_BOOL cst_a_axis_used_in_feedrate;
  VARIANT_BOOL cst_a_axis_increment_mode;
  VARIANT_BOOL cst_radius_vec_incr_mode;
  VARIANT_BOOL cst_continuous_motion_req;
  VARIANT_BOOL cst_move_spec_by_time;
  VARIANT_BOOL cst_continous_motion_mode;
  VARIANT_BOOL cst_single_step_mode;
  VARIANT_BOOL cst_running_program;
  VARIANT_BOOL cst_lookahead_in_progres;
  VARIANT_BOOL cst_run_time_error;
  VARIANT_BOOL cst_internal_move_in_stack;
  VARIANT_BOOL cst_amp_fault_error;
  VARIANT_BOOL cst_fatal_following_error;
  VARIANT_BOOL cst_waring_follwoing_error;
  VARIANT_BOOL cst_in_position;
  VARIANT_BOOL cst_rotary_buffer_full;
  VARIANT_BOOL cst_delayed_calc_flag;
  VARIANT_BOOL cst_end_of_block_stop_progs;
  VARIANT_BOOL cst_intnal_sync_m_var_one_shot;
  VARIANT_BOOL cst_intnal_dwell_move_buffered;
  VARIANT_BOOL cst_cttr_comp_outside_corner;
  VARIANT_BOOL cst_cttr_comp_stop_req;
  VARIANT_BOOL cst_cttr_comp_move_buffered;
  VARIANT_BOOL cst_pre_jog_move_in_progs;
  VARIANT_BOOL cst_segmented_move_in_progs;
  VARIANT_BOOL cst_segment_accel_flag;
  VARIANT_BOOL cst_segment_stop_request;
  VARIANT_BOOL cst_pvt_spline_move_mode;
  VARIANT_BOOL cst_cutter_comp_left;
  VARIANT_BOOL cst_cutter_comp_on;
  VARIANT_BOOL cst_ccw_circle_rapid_move_mode;
  VARIANT_BOOL cst_circle_spline_move_mode;
  VARIANT_BOOL cst_lhb_wrap;
  VARIANT_BOOL cst_internal_y22;
  VARIANT_BOOL cst_internal_y21;
  VARIANT_BOOL cst_internal_y20;
  VARIANT_BOOL cst_lhb_sync_m_var_overflow;
  VARIANT_BOOL cst_lhb_direction;
  VARIANT_BOOL cst_lhb_stop;
  VARIANT_BOOL cst_lhb_change;
  VARIANT_BOOL cst_lhb_last_segment;
  VARIANT_BOOL cst_lhb_recalculate;
  VARIANT_BOOL cst_lhb_flush;
  VARIANT_BOOL cst_lhb_lasr_move;
  VARIANT_BOOL cst_lhb_single_segment_request;
  VARIANT_BOOL cst_lhb_change_request;
  VARIANT_BOOL cst_lhb_move_request;
  VARIANT_BOOL cst_lhb_direction_request;
  VARIANT_BOOL cst_reserved_y7;
  VARIANT_BOOL cst_reserved_y6;
  VARIANT_BOOL cst_reserved_y5;
  VARIANT_BOOL cst_reserved_y4;
  VARIANT_BOOL cst_radius_error;
  VARIANT_BOOL cst_prog_resume_error;
  VARIANT_BOOL cst_desired_pos_limit_stop;
  VARIANT_BOOL cst_in_prog_pmatch;
};

struct tagDEVCSNONTURBO
{
  VARIANT_BOOL csnt_z_axis_used_in_feedrate;
  VARIANT_BOOL csnt_z_axis_increment_mode;
  VARIANT_BOOL csnt_y_axis_used_in_feedrate;
  VARIANT_BOOL csnt_y_axis_increment_mode;
  VARIANT_BOOL csnt_x_axis_used_in_feedrate;
  VARIANT_BOOL csnt_x_axis_increment_mode;
  VARIANT_BOOL csnt_w_axis_used_in_feedrate;
  VARIANT_BOOL csnt_w_axis_increment_mode;
  VARIANT_BOOL csnt_v_axis_used_in_feedrate;
  VARIANT_BOOL csnt_v_axis_increment_mode;
  VARIANT_BOOL csnt_u_axis_used_in_feedrate;
  VARIANT_BOOL csnt_u_axis_increment_mode;
  VARIANT_BOOL csnt_c_axis_used_in_feedrate;
  VARIANT_BOOL csnt_c_axis_increment_mode;
  VARIANT_BOOL csnt_b_axis_used_in_feedrate;
  VARIANT_BOOL csnt_b_axis_increment_mode;
  VARIANT_BOOL csnt_a_axis_used_in_feedrate;
  VARIANT_BOOL csnt_a_axis_increment_mode;
  VARIANT_BOOL csnt_radius_vec_incr_mode;
  VARIANT_BOOL csnt_continuous_motion_req;
  VARIANT_BOOL csnt_move_spec_by_time;
  VARIANT_BOOL csnt_continous_motion_mode;
  VARIANT_BOOL csnt_single_step_mode;
  VARIANT_BOOL csnt_running_program;
  VARIANT_BOOL csnt_program_hold_in_progress;
  VARIANT_BOOL csnt_run_time_error;
  VARIANT_BOOL csnt_circle_radius_error;
  VARIANT_BOOL csnt_amp_fault_error;
  VARIANT_BOOL csnt_fatal_following_err;
  VARIANT_BOOL csnt_waring_follwoing_err;
  VARIANT_BOOL csnt_in_position;
  VARIANT_BOOL csnt_rotary_buffer_full;
  VARIANT_BOOL csnt_delayed_calc_flag;
  VARIANT_BOOL csnt_end_of_block_stop_progs;
  VARIANT_BOOL csnt_intnal_sync_m_var_one_shot;
  VARIANT_BOOL csnt_intnal_dwell_move_buffered;
  VARIANT_BOOL csnt_cttr_comp_outside_corner;
  VARIANT_BOOL csnt_cttr_comp_stop_req;
  VARIANT_BOOL csnt_cttr_comp_move_buffered;
  VARIANT_BOOL csnt_pre_jog_move_in_progs;
  VARIANT_BOOL csnt_segmented_move;
  VARIANT_BOOL csnt_segment_accel_flag;
  VARIANT_BOOL csnt_segment_stop_request;
  VARIANT_BOOL csnt_pvt_spline_mode;
  VARIANT_BOOL csnt_cutter_comp_left;
  VARIANT_BOOL csnt_cutter_comp_on;
  VARIANT_BOOL csnt_ccw_circle_rapid_move_mode;
  VARIANT_BOOL csnt_circle_spline_move_mode;
};

struct tagDEVUPLOAD
{
  VARIANT_BOOL single_backup;
  VARIANT_BOOL user_backup;
  VARIANT_BOOL coord_sys;
  VARIANT_BOOL important_register;
  VARIANT_BOOL motion;
  VARIANT_BOOL plc;
  VARIANT_BOOL comp_tables;
  VARIANT_BOOL plcc;
  VARIANT_BOOL pvar;
  VARIANT_BOOL qvar;
  VARIANT_BOOL mvar;
  VARIANT_BOOL ivar;
  VARIANT_BOOL option_16;
  VARIANT_BOOL option_16e;
  VARIANT_BOOL macro;
  VARIANT_BOOL racro_ring_order;
};

struct tagNCTOOL
{
  long dwControl;
  long nCoord;
  Pcommserverlib_tlb::NCTOOLTYPE toolType;
  Pcommserverlib_tlb::NCMATERIALTYPE toolMaterial;
  long metricUnits;
  Pcommserverlib_tlb::NCTOOLHAND hand;
  Pcommserverlib_tlb::NCTOOLDIRECTION direction;
  long nToolNumber;
  long nPot;
  double diameter;
  double radius;
  double length;
  double pivotlength;
  double tipangle;
  double clrangle;
  double cornerrad;
  long diacomp;
  double comp;
  double compwear;
  double ofsx;
  double ofsy;
  double ofsz;
  double ofsu;
  double ofsv;
  double ofsw;
  double ofsa;
  double ofsb;
  double ofsc;
  double ofs2x;
  double ofs2y;
  double ofs2z;
  double ofs2u;
  double ofs2v;
  double ofs2w;
  double gx;
  double gy;
  double gz;
  double turretX;
  double turretZ;
  long groupfamily;
  double lifecount;
  double lifetime;
};

struct tagNCTOOLLIFE
{
  unsigned toolNo;
  unsigned groupfamily;
  double lifecount;
  double lifetime;
};

struct tagNCDATA
{
  double servoTime;
  double X_Absolute;
  double Y_Absolute;
  double Z_Absolute;
  double A_Absolute;
  double B_Absolute;
  double C_Absolute;
  double U_Absolute;
  double V_Absolute;
  double W_Absolute;
  double X_Relative;
  double Y_Relative;
  double Z_Relative;
  double A_Relative;
  double B_Relative;
  double C_Relative;
  double U_Relative;
  double V_Relative;
  double W_Relative;
  double X_Machine;
  double Y_Machine;
  double Z_Machine;
  double A_Machine;
  double B_Machine;
  double C_Machine;
  double U_Machine;
  double V_Machine;
  double W_Machine;
  double X_Program;
  double Y_Program;
  double Z_Program;
  double A_Program;
  double B_Program;
  double C_Program;
  double U_Program;
  double V_Program;
  double W_Program;
  double X_DistToGo;
  double Y_DistToGo;
  double Z_DistToGo;
  double A_DistToGo;
  double B_DistToGo;
  double C_DistToGo;
  double U_DistToGo;
  double V_DistToGo;
  double W_DistToGo;
  double X_FError;
  double Y_FError;
  double Z_FError;
  double A_FError;
  double B_FError;
  double C_FError;
  double U_FError;
  double V_FError;
  double W_FError;
  VARIANT_BOOL InPosition;
  double FeedrateCommanded;
  double FeedrateActual;
  double FeedrateOverride;
  double RapidOverride;
  double SpindleCommanded;
  double SpindleActual;
  double SpindleOverride;
  double SpindleMax;
  VARIANT_BOOL SpindleAtZero;
  VARIANT_BOOL SpindleAtSpeed;
  long ErrorLevel;
  VARIANT_BOOL SingleBlockOn;
  VARIANT_BOOL OptionalStopOn;
  VARIANT_BOOL BlockSkipOn;
  VARIANT_BOOL DryRunOn;
  BSTR CurrentProgramPath;
  long CurrentProgID;
  long CurrentProgLineCount;
  long CurrentProgLine;
  long CurrentProgParseLine;
  long CurrentProgRepeat;
  long CurrentProgRepeatCount;
  long CurrentTool;
  long NextTool;
  long ToolPot;
  VARIANT_BOOL CoolantFloodOn;
  VARIANT_BOOL CoolantMistOn;
  LPSAFEARRAY GCodeGroup;
  LPSAFEARRAY LocalVariable;
  LPSAFEARRAY CommonVariable;
  LPSAFEARRAY StaticVariable;
};

// *********************************************************************//
// Interface: IPmacDevice
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8A00B576-9C14-425B-8878-493C91D8DE5C}
// *********************************************************************//
interface IPmacDevice  : public IDispatch
{
public:
  // [1] method Open
  virtual HRESULT STDMETHODCALLTYPE Open(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [2] method Close
  virtual HRESULT STDMETHODCALLTYPE Close(long dwDevice/*[in]*/) = 0;
  // [5] method DataStart
  virtual HRESULT STDMETHODCALLTYPE DataStart(long dwDevice/*[in]*/, long resolution/*[in]*/, 
                                              long period/*[in]*/) = 0;
  // [6] method DataStop
  virtual HRESULT STDMETHODCALLTYPE DataStop(long dwDevice/*[in]*/) = 0;
  // [7] method DataCollect
  virtual HRESULT STDMETHODCALLTYPE DataCollect(long dwDevice/*[in]*/, VARIANT* pvArray/*[in,out]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [8] method DPRBackGroundVar
  virtual HRESULT STDMETHODCALLTYPE DPRBackGroundVar(long dwDevice/*[in]*/, VARIANT_BOOL bOn/*[in]*/) = 0;
  // [9] method DPRAddressRange
  virtual HRESULT STDMETHODCALLTYPE DPRAddressRange(long dwDevice/*[in]*/, 
                                                    VARIANT_BOOL bUpper/*[in]*/, 
                                                    VARIANT_BOOL bPC/*[in]*/, long* pVal/*[out]*/) = 0;
  // [10] method GetPmacType
  virtual HRESULT STDMETHODCALLTYPE GetPmacType(long dwDevice/*[in]*/, 
                                                Pcommserverlib_tlb::DEVPMACTYPE* pVal/*[out]*/) = 0;
  // [11] method DPRVarBufRemove
  virtual HRESULT STDMETHODCALLTYPE DPRVarBufRemove(long dwDevice/*[in]*/, long index/*[in]*/, 
                                                    VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [12] method DPRVarBufRead
  virtual HRESULT STDMETHODCALLTYPE DPRVarBufRead(long dwDevice/*[in]*/, long h/*[in]*/, 
                                                  long entryNum/*[in]*/, VARIANT* pVal/*[in,out]*/, 
                                                  VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [13] method DPRGetFloat
  virtual HRESULT STDMETHODCALLTYPE DPRGetFloat(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                                float* pVal/*[out]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [14] method DPRGetLong
  virtual HRESULT STDMETHODCALLTYPE DPRGetLong(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                               long* pVal/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [15] method DPRVarBufInit
  virtual HRESULT STDMETHODCALLTYPE DPRVarBufInit(long dwDevice/*[in]*/, 
                                                  VARIANT vAddressArray/*[in]*/, 
                                                  VARIANT vTypeArray/*[in]*/, long* pHandle/*[out]*/, 
                                                  VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [16] method DPRSetFloat
  virtual HRESULT STDMETHODCALLTYPE DPRSetFloat(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                                float newVal/*[in]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [17] method DPRSetLong
  virtual HRESULT STDMETHODCALLTYPE DPRSetLong(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                               long newVal/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [18] method DPRVarBufWrite
  virtual HRESULT STDMETHODCALLTYPE DPRVarBufWrite(long dwDevice/*[in]*/, VARIANT vData/*[in]*/, 
                                                   VARIANT vAddresses/*[in]*/, 
                                                   VARIANT vTypes/*[in]*/, long* pWritten/*[out]*/) = 0;
  // [19] method DPRFloat
  virtual HRESULT STDMETHODCALLTYPE DPRFloat(__int64 d/*[in]*/, double scale/*[in]*/, 
                                             double* pVal/*[out]*/) = 0;
  // [20] method GetRomVersion
  virtual HRESULT STDMETHODCALLTYPE GetRomVersion(long dwDevice/*[in]*/, BSTR* pVal/*[out]*/) = 0;
  // [21] method GetRomDate
  virtual HRESULT STDMETHODCALLTYPE GetRomDate(long dwDevice/*[in]*/, BSTR* pVal/*[out]*/) = 0;
  // [22] method GetPmacLocation
  virtual HRESULT STDMETHODCALLTYPE GetPmacLocation(long dwDevice/*[in]*/, 
                                                    Pcommserverlib_tlb::DEVLOCATIONTYPE* pVal/*[out]*/) = 0;
  // [23] method GetResponse
  virtual HRESULT STDMETHODCALLTYPE GetResponse(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                                BSTR* pAnswer/*[out]*/) = 0;
  // [26] method SelectDevice
  virtual HRESULT STDMETHODCALLTYPE SelectDevice(long hWindow/*[in]*/, long* pDeviceNumber/*[out]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [27] property DPRSize
  virtual HRESULT STDMETHODCALLTYPE get_DPRSize(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/) = 0;
  // [28] property DPRAvailable
  virtual HRESULT STDMETHODCALLTYPE get_DPRAvailable(long dwDevice/*[in]*/, 
                                                     VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [29] method SetChecksums
  virtual HRESULT STDMETHODCALLTYPE SetChecksums(long dwDevice/*[in]*/, VARIANT_BOOL bActive/*[in]*/) = 0;
  // [30] method GetControlResponse
  virtual HRESULT STDMETHODCALLTYPE GetControlResponse(long dwDevice/*[in]*/, short question/*[in]*/, 
                                                       BSTR* pAnswer/*[out]*/) = 0;
  // [31] property LastCommError
  virtual HRESULT STDMETHODCALLTYPE get_LastCommError(long dwDevice/*[in]*/, 
                                                      long* pVal/*[out,retval]*/) = 0;
  // [32] method GetLastCommErrorStr
  virtual HRESULT STDMETHODCALLTYPE GetLastCommErrorStr(long dwDevice/*[in]*/, BSTR* pVal/*[out]*/) = 0;
  // [33] method GetMacroIVariableLong
  virtual HRESULT STDMETHODCALLTYPE GetMacroIVariableLong(long dwDevice/*[in]*/, long node/*[in]*/, 
                                                          long num/*[in]*/, long def/*[in]*/, 
                                                          long* pVal/*[out]*/) = 0;
  // [37] property DoChecksums
  virtual HRESULT STDMETHODCALLTYPE get_DoChecksums(long dwDevice/*[in]*/, 
                                                    VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [37] property DoChecksums
  virtual HRESULT STDMETHODCALLTYPE set_DoChecksums(long dwDevice/*[in]*/, VARIANT_BOOL pVal/*[in]*/) = 0;
  // [38] method GetIVariableLong
  virtual HRESULT STDMETHODCALLTYPE GetIVariableLong(long dwDevice/*[in]*/, long num/*[in]*/, 
                                                     long def/*[in]*/, long* pVal/*[out]*/) = 0;
  // [39] method GetIVariableDouble
  virtual HRESULT STDMETHODCALLTYPE GetIVariableDouble(long dwDevice/*[in]*/, long num/*[in]*/, 
                                                       double def/*[in]*/, double* pVal/*[out]*/) = 0;
  // [40] method SetIVariableLong
  virtual HRESULT STDMETHODCALLTYPE SetIVariableLong(long dwDevice/*[in]*/, long num/*[in]*/, 
                                                     long newVal/*[in]*/) = 0;
  // [41] method SetIVariableDouble
  virtual HRESULT STDMETHODCALLTYPE SetIVariableDouble(long dwDevice/*[in]*/, long num/*[in]*/, 
                                                       double newVal/*[in]*/) = 0;
  // [42] method GetAsciiComm
  virtual HRESULT STDMETHODCALLTYPE GetAsciiComm(long dwDevice/*[in]*/, 
                                                 Pcommserverlib_tlb::DEVASCIIMODE* pVal/*[out]*/) = 0;
  // [43] method SetAsciiComm
  virtual HRESULT STDMETHODCALLTYPE SetAsciiComm(long dwDevice/*[in]*/, 
                                                 Pcommserverlib_tlb::DEVASCIIMODE newVal/*[in]*/) = 0;
  // [44] method GetVariableLong
  virtual HRESULT STDMETHODCALLTYPE GetVariableLong(long dwDevice/*[in]*/, short ch/*[in]*/, 
                                                    long num/*[in]*/, long def/*[in]*/, 
                                                    long* pVal/*[out]*/, 
                                                    VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [45] method GetVariableDouble
  virtual HRESULT STDMETHODCALLTYPE GetVariableDouble(long dwDevice/*[in]*/, short ch/*[in]*/, 
                                                      long num/*[in]*/, double def/*[in]*/, 
                                                      double* pVal/*[out]*/, 
                                                      VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [46] method SetVariableLong
  virtual HRESULT STDMETHODCALLTYPE SetVariableLong(long dwDevice/*[in]*/, short ch/*[in]*/, 
                                                    long num/*[in]*/, long newVal/*[in]*/, 
                                                    VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [47] method SetVariableDouble
  virtual HRESULT STDMETHODCALLTYPE SetVariableDouble(long dwDevice/*[in]*/, short ch/*[in]*/, 
                                                      long num/*[in]*/, double newVal/*[in]*/, 
                                                      VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [48] property InBootStrapMode
  virtual HRESULT STDMETHODCALLTYPE get_InBootStrapMode(long dwDevice/*[in]*/, 
                                                        VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [49] property MotionBufferOpen
  virtual HRESULT STDMETHODCALLTYPE get_MotionBufferOpen(long dwDevice/*[in]*/, 
                                                         VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [50] property RotaryBufferOpen
  virtual HRESULT STDMETHODCALLTYPE get_RotaryBufferOpen(long dwDevice/*[in]*/, 
                                                         VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [51] property IsTurbo
  virtual HRESULT STDMETHODCALLTYPE get_IsTurbo(long dwDevice/*[in]*/, 
                                                VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [52] method RestoreLinkList
  virtual HRESULT STDMETHODCALLTYPE RestoreLinkList(BSTR firmwareVersion/*[in]*/, 
                                                    VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [53] method BackupLinkList
  virtual HRESULT STDMETHODCALLTYPE BackupLinkList(long dwDevice/*[in]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [54] method SetCriticalIVars
  virtual HRESULT STDMETHODCALLTYPE SetCriticalIVars(long dwDevice/*[in]*/, 
                                                     VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [57] method GetLocAndEnum
  virtual HRESULT STDMETHODCALLTYPE GetLocAndEnum(long dwDevice/*[in]*/, long* pLoc/*[out]*/, 
                                                  long* pEnum/*[out]*/, 
                                                  VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [58] method GetProgramInfo
  virtual HRESULT STDMETHODCALLTYPE GetProgramInfo(long dwDevice/*[in]*/, VARIANT_BOOL bPlc/*[in]*/, 
                                                   long num/*[in]*/, long* pSAdr/*[out]*/, 
                                                   long* pFAdr/*[out]*/) = 0;
  // [59] method DownloadFile
  virtual HRESULT STDMETHODCALLTYPE DownloadFile(long dwDevice/*[in]*/, BSTR filePath/*[in]*/) = 0;
  // [60] method AbortDownload
  virtual HRESULT STDMETHODCALLTYPE AbortDownload(long dwDevice/*[in]*/) = 0;
  // [61] method DownloadFirmwareFile
  virtual HRESULT STDMETHODCALLTYPE DownloadFirmwareFile(long dwDevice/*[in]*/, 
                                                         BSTR filePath/*[in]*/, 
                                                         VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [62] method Download
  virtual HRESULT STDMETHODCALLTYPE Download(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                                             VARIANT_BOOL bMacro/*[in]*/, VARIANT_BOOL bMap/*[in]*/, 
                                             VARIANT_BOOL bLog/*[in]*/, VARIANT_BOOL bDnld/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [63] property Downloading
  virtual HRESULT STDMETHODCALLTYPE get_Downloading(long dwDevice/*[in]*/, 
                                                    VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [64] property MaxDownloadErrors
  virtual HRESULT STDMETHODCALLTYPE get_MaxDownloadErrors(long* pVal/*[out,retval]*/) = 0;
  // [64] property MaxDownloadErrors
  virtual HRESULT STDMETHODCALLTYPE set_MaxDownloadErrors(long pVal/*[in]*/) = 0;
  // [65] method CompilePLCC
  virtual HRESULT STDMETHODCALLTYPE CompilePLCC(long dwDevice/*[in]*/, BSTR inFilePath/*[in]*/, 
                                                BSTR outFilePath/*[in]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [66] method SendCommand
  virtual HRESULT STDMETHODCALLTYPE SendCommand(long dwDevice/*[in]*/, BSTR cmd/*[in]*/, 
                                                long* pstatus/*[out]*/) = 0;
  // [68] method GetPlcStatus
  virtual HRESULT STDMETHODCALLTYPE GetPlcStatus(long dwDevice/*[in]*/, long* pNumPlc/*[out]*/, 
                                                 long* pNumPlcc/*[out]*/, long* pI5/*[out]*/) = 0;
  // [69] method GetFirstPlcc
  virtual HRESULT STDMETHODCALLTYPE GetFirstPlcc(long dwDevice/*[in]*/, 
                                                 VARIANT_BOOL* pbLoaded/*[out]*/, 
                                                 VARIANT_BOOL* pbEnabled/*[out]*/, 
                                                 long* pStartAdr/*[out]*/, long* pLastAdr/*[out]*/, 
                                                 long* pSize/*[out]*/, VARIANT_BOOL* pbMore/*[out]*/) = 0;
  // [70] method GetNextPlcc
  virtual HRESULT STDMETHODCALLTYPE GetNextPlcc(long dwDevice/*[in]*/, 
                                                VARIANT_BOOL* pbLoaded/*[out]*/, 
                                                VARIANT_BOOL* pbEnabled/*[out]*/, 
                                                long* pStartAdr/*[out]*/, long* pLastAdr/*[out]*/, 
                                                long* pSize/*[out]*/, VARIANT_BOOL* pbMore/*[out]*/) = 0;
  // [71] method GetFirstPlc
  virtual HRESULT STDMETHODCALLTYPE GetFirstPlc(long dwDevice/*[in]*/, 
                                                VARIANT_BOOL* pbEnabled/*[out]*/, 
                                                long* pStartAdr/*[out]*/, long* pLastAdr/*[out]*/, 
                                                long* pSize/*[out]*/, VARIANT_BOOL* pbMore/*[out]*/) = 0;
  // [72] method GetNextPlc
  virtual HRESULT STDMETHODCALLTYPE GetNextPlc(long dwDevice/*[in]*/, 
                                               VARIANT_BOOL* pbEnabled/*[out]*/, 
                                               long* pStartAdr/*[out]*/, long* pLastAdr/*[out]*/, 
                                               long* pSize/*[out]*/, VARIANT_BOOL* pbMore/*[out]*/) = 0;
  // [73] property IsAnyPlcRunning
  virtual HRESULT STDMETHODCALLTYPE get_IsAnyPlcRunning(long dwDevice/*[in]*/, 
                                                        VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [74] method GetGlobalStatus
  virtual HRESULT STDMETHODCALLTYPE GetGlobalStatus(long dwDevice/*[in]*/, long* pStatusX/*[out]*/, 
                                                    long* pStatusY/*[out]*/, 
                                                    VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [75] method GetCoordStatus
  virtual HRESULT STDMETHODCALLTYPE GetCoordStatus(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                   long* pStatusX/*[out]*/, long* pStatusY/*[out]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [76] method GetMotorStatus
  virtual HRESULT STDMETHODCALLTYPE GetMotorStatus(long dwDevice/*[in]*/, long lMotor/*[in]*/, 
                                                   long* pStatusX/*[out]*/, long* pStatusY/*[out]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [77] property SysServoError
  virtual HRESULT STDMETHODCALLTYPE get_SysServoError(long dwDevice/*[in]*/, 
                                                      VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [78] property SysReEntryError
  virtual HRESULT STDMETHODCALLTYPE get_SysReEntryError(long dwDevice/*[in]*/, 
                                                        VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [79] property SysMemChecksumError
  virtual HRESULT STDMETHODCALLTYPE get_SysMemChecksumError(long dwDevice/*[in]*/, 
                                                            VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [80] property SysPromChecksumError
  virtual HRESULT STDMETHODCALLTYPE get_SysPromChecksumError(long dwDevice/*[in]*/, 
                                                             VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [81] property SysInposition
  virtual HRESULT STDMETHODCALLTYPE get_SysInposition(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                      VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [82] property SysWarnFError
  virtual HRESULT STDMETHODCALLTYPE get_SysWarnFError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                      VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [83] property SysFatalFError
  virtual HRESULT STDMETHODCALLTYPE get_SysFatalFError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                       VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [84] property SysRuntimeError
  virtual HRESULT STDMETHODCALLTYPE get_SysRuntimeError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                        VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [85] property SysCircleRadError
  virtual HRESULT STDMETHODCALLTYPE get_SysCircleRadError(long dwDevice/*[in]*/, 
                                                          long dwCoord/*[in]*/, 
                                                          VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [86] property SysAmpFaultError
  virtual HRESULT STDMETHODCALLTYPE get_SysAmpFaultError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                         VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [87] method GetCommandedPos
  virtual HRESULT STDMETHODCALLTYPE GetCommandedPos(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                    double scale/*[in]*/, double* pVal/*[out]*/) = 0;
  // [88] method GetPosition
  virtual HRESULT STDMETHODCALLTYPE GetPosition(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                double scale/*[in]*/, double* pVal/*[out]*/) = 0;
  // [89] method GetNetActualPosition
  virtual HRESULT STDMETHODCALLTYPE GetNetActualPosition(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                         double scale/*[in]*/, double* pVal/*[out]*/) = 0;
  // [90] method GetFollowError
  virtual HRESULT STDMETHODCALLTYPE GetFollowError(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                   double scale/*[in]*/, double* pVal/*[out]*/) = 0;
  // [91] method GetVelocity
  virtual HRESULT STDMETHODCALLTYPE GetVelocity(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                double scale/*[in]*/, double* pVal/*[out]*/) = 0;
  // [92] method GetMasterPos
  virtual HRESULT STDMETHODCALLTYPE GetMasterPos(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                 double scale/*[in]*/, double* pVal/*[out]*/) = 0;
  // [93] method GetCompensationPos
  virtual HRESULT STDMETHODCALLTYPE GetCompensationPos(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                       double scale/*[in]*/, double* pVal/*[out]*/) = 0;
  // [94] method GetTargetPos
  virtual HRESULT STDMETHODCALLTYPE GetTargetPos(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                 double scale/*[in]*/, double* pVal/*[out]*/) = 0;
  // [95] method GetBiasPos
  virtual HRESULT STDMETHODCALLTYPE GetBiasPos(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                               double scale/*[in]*/, double* pVal/*[out]*/) = 0;
  // [96] method GetProgExecPoint
  virtual HRESULT STDMETHODCALLTYPE GetProgExecPoint(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                     long* pVal/*[out]*/) = 0;
  // [97] method GetRotBufFull
  virtual HRESULT STDMETHODCALLTYPE GetRotBufFull(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                  VARIANT_BOOL* pVal/*[out]*/) = 0;
  // [98] property ProgramRunning
  virtual HRESULT STDMETHODCALLTYPE get_ProgramRunning(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                       VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [99] property ProgramStepping
  virtual HRESULT STDMETHODCALLTYPE get_ProgramStepping(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                        VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [100] property ProgramContMotion
  virtual HRESULT STDMETHODCALLTYPE get_ProgramContMotion(long dwDevice/*[in]*/, 
                                                          long dwCoord/*[in]*/, 
                                                          VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [101] property ProgramContRequest
  virtual HRESULT STDMETHODCALLTYPE get_ProgramContRequest(long dwDevice/*[in]*/, 
                                                           long dwCoord/*[in]*/, 
                                                           VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [102] property ProgramRemaining
  virtual HRESULT STDMETHODCALLTYPE get_ProgramRemaining(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                         long* pVal/*[out,retval]*/) = 0;
  // [103] property MotionBufOpen
  virtual HRESULT STDMETHODCALLTYPE get_MotionBufOpen(long dwDevice/*[in]*/, 
                                                      VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [105] property ProgramFeedMode
  virtual HRESULT STDMETHODCALLTYPE get_ProgramFeedMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                        VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [106] property MotorAmpEnabled
  virtual HRESULT STDMETHODCALLTYPE get_MotorAmpEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                        VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [107] property MotorWarnFError
  virtual HRESULT STDMETHODCALLTYPE get_MotorWarnFError(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                        VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [108] property MotorFatalFError
  virtual HRESULT STDMETHODCALLTYPE get_MotorFatalFError(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                         VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [109] property MotorAmpFault
  virtual HRESULT STDMETHODCALLTYPE get_MotorAmpFault(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                      VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [110] property MotorOnPositionLimit
  virtual HRESULT STDMETHODCALLTYPE get_MotorOnPositionLimit(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                             VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [111] property MotorHomeComplete
  virtual HRESULT STDMETHODCALLTYPE get_MotorHomeComplete(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                          VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [112] property MotorInPosition
  virtual HRESULT STDMETHODCALLTYPE get_MotorInPosition(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                        VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [113] property TimRemInMove
  virtual HRESULT STDMETHODCALLTYPE get_TimRemInMove(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                     long* pVal/*[out,retval]*/) = 0;
  // [114] property TimeRemInTATS
  virtual HRESULT STDMETHODCALLTYPE get_TimeRemInTATS(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                      long* pVal/*[out,retval]*/) = 0;
  // [115] property MotorDataBlockError
  virtual HRESULT STDMETHODCALLTYPE get_MotorDataBlockError(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                            VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [116] property MotorPhased
  virtual HRESULT STDMETHODCALLTYPE get_MotorPhased(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                    VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [117] property MotorEnabled
  virtual HRESULT STDMETHODCALLTYPE get_MotorEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                     VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [118] property MotorHandwheelEnabled
  virtual HRESULT STDMETHODCALLTYPE get_MotorHandwheelEnabled(long dwDevice/*[in]*/, 
                                                              long mtr/*[in]*/, 
                                                              VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [119] property MotorOpenLoop
  virtual HRESULT STDMETHODCALLTYPE get_MotorOpenLoop(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                      VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [120] property MotorOnNegLimit
  virtual HRESULT STDMETHODCALLTYPE get_MotorOnNegLimit(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                        VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [121] property MotorOnPosLimit
  virtual HRESULT STDMETHODCALLTYPE get_MotorOnPosLimit(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                        VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [122] method SetJogReturn
  virtual HRESULT STDMETHODCALLTYPE SetJogReturn(long dwDevice/*[in]*/, long mtr/*[in]*/) = 0;
  // [123] method GetWhyMotorNotMoving
  virtual HRESULT STDMETHODCALLTYPE GetWhyMotorNotMoving(long dwDevice/*[in]*/, long motor/*[in]*/, 
                                                         long* pVal/*[out]*/) = 0;
  // [124] method GetWhyMotorNotMovingStr
  virtual HRESULT STDMETHODCALLTYPE GetWhyMotorNotMovingStr(long err/*[in]*/, BSTR* pVal/*[in,out]*/) = 0;
  // [125] method GetWhyCSNotMoving
  virtual HRESULT STDMETHODCALLTYPE GetWhyCSNotMoving(long dwDevice/*[in]*/, long cs/*[in]*/, 
                                                      long* pVal/*[out]*/) = 0;
  // [126] method GetWhyCSNotMovingStr
  virtual HRESULT STDMETHODCALLTYPE GetWhyCSNotMovingStr(long err/*[in]*/, BSTR* pVal/*[in,out]*/) = 0;
  // [127] property BufferOpen
  virtual HRESULT STDMETHODCALLTYPE get_BufferOpen(long dwDevice/*[in]*/, 
                                                   VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [128] property GatherPeriod
  virtual HRESULT STDMETHODCALLTYPE get_GatherPeriod(long dwDevice/*[in]*/, 
                                                     long* pVal/*[out,retval]*/) = 0;
  // [128] property GatherPeriod
  virtual HRESULT STDMETHODCALLTYPE set_GatherPeriod(long dwDevice/*[in]*/, long pVal/*[in]*/) = 0;
  // [129] property GatherEnabled
  virtual HRESULT STDMETHODCALLTYPE get_GatherEnabled(long dwDevice/*[in]*/, long num/*[in]*/, 
                                                      VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [129] property GatherEnabled
  virtual HRESULT STDMETHODCALLTYPE set_GatherEnabled(long dwDevice/*[in]*/, long num/*[in]*/, 
                                                      VARIANT_BOOL pVal/*[in]*/) = 0;
  // [130] property GatherMode
  virtual HRESULT STDMETHODCALLTYPE get_GatherMode(long dwDevice/*[in]*/, 
                                                   Pcommserverlib_tlb::DEVGATMODE* pVal/*[out,retval]*/) = 0;
  // [130] property GatherMode
  virtual HRESULT STDMETHODCALLTYPE set_GatherMode(long dwDevice/*[in]*/, 
                                                   Pcommserverlib_tlb::DEVGATMODE pVal/*[in]*/) = 0;
  // [131] property GatherSampleTime
  virtual HRESULT STDMETHODCALLTYPE get_GatherSampleTime(long dwDevice/*[in]*/, 
                                                         double* pVal/*[out,retval]*/) = 0;
  // [131] property GatherSampleTime
  virtual HRESULT STDMETHODCALLTYPE set_GatherSampleTime(long dwDevice/*[in]*/, double pVal/*[in]*/) = 0;
  // [132] method GetNumGatherSources
  virtual HRESULT STDMETHODCALLTYPE GetNumGatherSources(long dwDevice/*[in]*/, long* pVal/*[out]*/) = 0;
  // [133] method GetNumGatherSamples
  virtual HRESULT STDMETHODCALLTYPE GetNumGatherSamples(long dwDevice/*[in]*/, long* pVal/*[out]*/) = 0;
  // [134] method SetGather
  virtual HRESULT STDMETHODCALLTYPE SetGather(long dwDevice/*[in]*/, long num/*[in]*/, 
                                              BSTR str/*[in]*/, VARIANT_BOOL bEnable/*[in]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [135] method SetQuickGather
  virtual HRESULT STDMETHODCALLTYPE SetQuickGather(long dwDevice/*[in]*/, long lComMask/*[in]*/, 
                                                   long lEncMask/*[in]*/, long lDacMask/*[in]*/, 
                                                   long lCurMask/*[in]*/, 
                                                   VARIANT_BOOL bEnable/*[in]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [136] method SetQuickGatherWithDirectCurrent
  virtual HRESULT STDMETHODCALLTYPE SetQuickGatherWithDirectCurrent(long dwDevice/*[in]*/, 
                                                                    long lComMask/*[in]*/, 
                                                                    long lEncMask/*[in]*/, 
                                                                    long lDacMask/*[in]*/, 
                                                                    long lCurMask/*[in]*/, 
                                                                    VARIANT_BOOL bEnable/*[in]*/, 
                                                                    VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [137] method GetGather
  virtual HRESULT STDMETHODCALLTYPE GetGather(long dwDevice/*[in]*/, long num/*[in]*/, 
                                              BSTR* pStr/*[in,out]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [138] method ClearGather
  virtual HRESULT STDMETHODCALLTYPE ClearGather(long dwDevice/*[in]*/) = 0;
  // [139] method InitGather
  virtual HRESULT STDMETHODCALLTYPE InitGather(long dwDevice/*[in]*/, long size/*[in]*/, 
                                               double msec/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [140] method ClearGatherData
  virtual HRESULT STDMETHODCALLTYPE ClearGatherData(long dwDevice/*[in]*/) = 0;
  // [141] method CollectGatherData
  virtual HRESULT STDMETHODCALLTYPE CollectGatherData(long dwDevice/*[in]*/, long* pSources/*[out]*/, 
                                                      long* pSamples/*[out]*/, 
                                                      VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [142] method GetGatherSamples
  virtual HRESULT STDMETHODCALLTYPE GetGatherSamples(long dwDevice/*[in]*/, long sourceNum/*[in]*/, 
                                                     VARIANT* pVariant/*[in,out]*/, 
                                                     VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [143] method GetGatherPoint
  virtual HRESULT STDMETHODCALLTYPE GetGatherPoint(long dwDevice/*[in]*/, long sourceNum/*[in]*/, 
                                                   long sampleNum/*[in]*/, double* pVal/*[out]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [144] method StartGather
  virtual HRESULT STDMETHODCALLTYPE StartGather(long dwDevice/*[in]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [145] method StopGather
  virtual HRESULT STDMETHODCALLTYPE StopGather(long dwDevice/*[in]*/) = 0;
  // [146] method InitPlotGather
  virtual HRESULT STDMETHODCALLTYPE InitPlotGather(long dwDevice/*[in]*/, long size/*[in]*/, 
                                                   long period/*[in]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [147] method ReadGatherFile
  virtual HRESULT STDMETHODCALLTYPE ReadGatherFile(long dwDevice/*[in]*/, BSTR bsFilePath/*[in]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [148] method WriteGatherFile
  virtual HRESULT STDMETHODCALLTYPE WriteGatherFile(long dwDevice/*[in]*/, BSTR bsFilePath/*[in]*/, 
                                                    VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [149] Converts a PMAC 48 bit L: string to a double
  virtual HRESULT STDMETHODCALLTYPE strtod48f(BSTR str/*[in]*/, double* pVal/*[out]*/) = 0;
  // [150] Converts a PMAC 48-bit D: string to a double
  virtual HRESULT STDMETHODCALLTYPE strtod48l(BSTR str/*[in]*/, double* pVal/*[out]*/) = 0;
  // [151] Converts a PMAC 24 bit integer. ('X:','Y:') to a double
  virtual HRESULT STDMETHODCALLTYPE strtod24(BSTR str/*[in]*/, double* pVal/*[out]*/) = 0;
  // [152] Converts a PMACIEEE 32-bit integer (2's compliment) ('DP:') to a double
  virtual HRESULT STDMETHODCALLTYPE strtod32dp(BSTR str/*[in]*/, double* pVal/*[out]*/) = 0;
  // [153] Converts a PMAC IEEE 32-bit floating point (F:) to a double
  virtual HRESULT STDMETHODCALLTYPE strto32f(BSTR str/*[in]*/, double* pVal/*[out]*/) = 0;
  // [154] method UploadMacroConfig
  virtual HRESULT STDMETHODCALLTYPE UploadMacroConfig(long dwDevice/*[in]*/, BSTR bsFilePath/*[in]*/, 
                                                      VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [155] method DownloadCurrentFeedbackTest
  virtual HRESULT STDMETHODCALLTYPE DownloadCurrentFeedbackTest(long dwDevice/*[in]*/, 
                                                                short mtr/*[in]*/, 
                                                                double pwmDutyCycle/*[in]*/, 
                                                                short pwmFreq/*[in]*/, 
                                                                VARIANT_BOOL bMacro/*[in]*/, 
                                                                VARIANT_BOOL bUltra/*[in]*/, 
                                                                VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [156] method ReadResultsFromCurrentFeedbackTest
  virtual HRESULT STDMETHODCALLTYPE ReadResultsFromCurrentFeedbackTest(long dwDevice/*[in]*/, 
                                                                       short mtr/*[in]*/, 
                                                                       long* pVal/*[out]*/) = 0;
  // [157] method DownloadVoltageSixStepTest
  virtual HRESULT STDMETHODCALLTYPE DownloadVoltageSixStepTest(long dwDevice/*[in]*/, 
                                                               short mtr/*[in]*/, 
                                                               double pwmDutyCycle/*[in]*/, 
                                                               VARIANT_BOOL bMacro/*[in]*/, 
                                                               VARIANT_BOOL bUltra/*[in]*/, 
                                                               VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [158] method ReadResultsFromSixStepTest
  virtual HRESULT STDMETHODCALLTYPE ReadResultsFromSixStepTest(long dwDevice/*[in]*/, 
                                                               VARIANT_BOOL bSipFirstStep/*[in]*/, 
                                                               VARIANT* pvStepArray/*[in,out]*/, 
                                                               long* pResult/*[out]*/) = 0;
  // [159] method DownloadCurrentSixStepTest
  virtual HRESULT STDMETHODCALLTYPE DownloadCurrentSixStepTest(long dwDevice/*[in]*/, 
                                                               short motor/*[in]*/, 
                                                               double pwmDutyCycle/*[in]*/, 
                                                               VARIANT_BOOL bMacro/*[in]*/, 
                                                               VARIANT_BOOL bUltra/*[in]*/, 
                                                               VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [160] method DownloadOpenLoopTest
  virtual HRESULT STDMETHODCALLTYPE DownloadOpenLoopTest(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                         short magnitude/*[in]*/, short time/*[in]*/, 
                                                         short reps/*[in]*/, 
                                                         VARIANT_BOOL bGatherCurrents/*[in]*/, 
                                                         VARIANT_BOOL bMacro/*[in]*/, 
                                                         VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [161] method DownloadOpenLoopTest1
  virtual HRESULT STDMETHODCALLTYPE DownloadOpenLoopTest1(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                          short magnitude/*[in]*/, 
                                                          short time/*[in]*/, short reps/*[in]*/, 
                                                          VARIANT_BOOL bGatherCurrents/*[in]*/, 
                                                          VARIANT_BOOL bMacro/*[in]*/, 
                                                          VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [162] method DownloadVelLimitPLC
  virtual HRESULT STDMETHODCALLTYPE DownloadVelLimitPLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                        long maxspd/*[in]*/, 
                                                        VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [163] method DownloadPosLimitPLC
  virtual HRESULT STDMETHODCALLTYPE DownloadPosLimitPLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                        VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [164] method DownloadUVWSixStepTest
  virtual HRESULT STDMETHODCALLTYPE DownloadUVWSixStepTest(long dwDevice/*[in]*/, 
                                                           short motor/*[in]*/, 
                                                           double pwmDutyCycle/*[in]*/, 
                                                           VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [165] method ReadResultsFromUVWSixStepTest
  virtual HRESULT STDMETHODCALLTYPE ReadResultsFromUVWSixStepTest(long dwDevice/*[in]*/, 
                                                                  VARIANT* pvArray/*[in,out]*/, 
                                                                  long* pResult/*[out]*/) = 0;
  // [166] method SetIVarForFeedback
  virtual HRESULT STDMETHODCALLTYPE SetIVarForFeedback(long dwDevice/*[in]*/, short ivar/*[in]*/, 
                                                       long address/*[in]*/, 
                                                       Pcommserverlib_tlb::DEVFEEDBACKTYPE fbType/*[in]*/, 
                                                       VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [167] method DownloadAndRunRoughPhasePLC
  virtual HRESULT STDMETHODCALLTYPE DownloadAndRunRoughPhasePLC(long dwDevice/*[in]*/, 
                                                                short motor/*[in]*/, 
                                                                VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [168] method CreateIncrementalFinePhasePLC
  virtual HRESULT STDMETHODCALLTYPE CreateIncrementalFinePhasePLC(long dwDevice/*[in]*/, 
                                                                  BSTR filePath/*[in]*/, 
                                                                  short PLCNumber/*[in]*/, 
                                                                  short motor/*[in]*/, 
                                                                  VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [169] method DoACurrentLoopStep
  virtual HRESULT STDMETHODCALLTYPE DoACurrentLoopStep(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                       short dwellTime/*[in]*/, 
                                                       long magnitude/*[in]*/, 
                                                       VARIANT_BOOL bAutoTune/*[in]*/, 
                                                       BSTR* pbsCTSCurrent/*[out]*/, 
                                                       double pwmDutyCycle/*[in]*/, 
                                                       short divisor/*[in]*/, 
                                                       VARIANT_BOOL bUltra/*[in]*/) = 0;
  // [170] method DoACurrentLoopStepBrush
  virtual HRESULT STDMETHODCALLTYPE DoACurrentLoopStepBrush(long dwDevice/*[in]*/, 
                                                            short motor/*[in]*/, 
                                                            short dwellTime/*[in]*/, 
                                                            long magnitude/*[in]*/, 
                                                            VARIANT_BOOL bAutoTune/*[in]*/, 
                                                            BSTR* pbsCTSCurrent/*[out]*/, 
                                                            double pwmDutyCycle/*[in]*/, 
                                                            short divisor/*[in]*/, 
                                                            VARIANT_BOOL bUltra/*[in]*/) = 0;
  // [171] method DoAPositionLoopStep
  virtual HRESULT STDMETHODCALLTYPE DoAPositionLoopStep(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                        short stepSize/*[in]*/, 
                                                        short stepTime/*[in]*/, 
                                                        VARIANT_BOOL bBiDirectional/*[in]*/, 
                                                        VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [172] method DoAParabolicMove
  virtual HRESULT STDMETHODCALLTYPE DoAParabolicMove(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                     long stepSize/*[in]*/, short stepTime/*[in]*/, 
                                                     VARIANT_BOOL bBiDirectional/*[in]*/, 
                                                     VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [173] method DoAGantryPositionLoopStep
  virtual HRESULT STDMETHODCALLTYPE DoAGantryPositionLoopStep(long dwDevice/*[in]*/, 
                                                              short motor/*[in]*/, 
                                                              short motor2/*[in]*/, 
                                                              short stepSize/*[in]*/, 
                                                              short stepTime/*[in]*/, 
                                                              VARIANT_BOOL bBiDirectional/*[in]*/, 
                                                              VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [174] method DoAGantryParabolicMove
  virtual HRESULT STDMETHODCALLTYPE DoAGantryParabolicMove(long dwDevice/*[in]*/, 
                                                           short motor/*[in]*/, short motor2/*[in]*/, 
                                                           long stepSize/*[in]*/, 
                                                           short stepTime/*[in]*/, 
                                                           VARIANT_BOOL bBiDirectional/*[in]*/, 
                                                           VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [175] method DoAGantryParabolic
  virtual HRESULT STDMETHODCALLTYPE DoAGantryParabolic(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                       short motor2/*[in]*/, 
                                                       VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [176] method ConvertWordToStringFloat
  virtual HRESULT STDMETHODCALLTYPE ConvertWordToStringFloat(BSTR word/*[in]*/, BSTR* pVal/*[out]*/) = 0;
  // [177] method ConvertWordToShort
  virtual HRESULT STDMETHODCALLTYPE ConvertWordToShort(BSTR word/*[in]*/, short offset/*[in]*/, 
                                                       short* pVal/*[out]*/) = 0;
  // [178] method ConvertWordToLong
  virtual HRESULT STDMETHODCALLTYPE ConvertWordToLong(BSTR word/*[in]*/, long* pVal/*[out]*/) = 0;
  // [179] method RestoreModifiedIVars
  virtual HRESULT STDMETHODCALLTYPE RestoreModifiedIVars(long dwDevice/*[in]*/, short motor/*[in]*/) = 0;
  // [180] method CalculateStepStatistics
  virtual HRESULT STDMETHODCALLTYPE CalculateStepStatistics(VARIANT* pvData/*[in,out]*/, 
                                                            long stepSize/*[in]*/, long I10/*[in]*/, 
                                                            long I19/*[in]*/, 
                                                            BSTR* pbsRiseTime/*[out]*/, 
                                                            BSTR* pbsPeakTime/*[out]*/, 
                                                            BSTR* pbsNatFreq/*[out]*/, 
                                                            BSTR* pbsOvershoot/*[out]*/, 
                                                            BSTR* pbsDamping/*[out]*/, 
                                                            BSTR* pbsSettleTime/*[out]*/) = 0;
  // [181] method LowPassFilterTheData
  virtual HRESULT STDMETHODCALLTYPE LowPassFilterTheData(VARIANT* pvData/*[in,out]*/, 
                                                         BSTR bsCurrent/*[in]*/) = 0;
  // [182] method DifferentiateTheData
  virtual HRESULT STDMETHODCALLTYPE DifferentiateTheData(VARIANT* pvData/*[in,out]*/, 
                                                         long I10/*[in]*/, long I19/*[in]*/, 
                                                         long* pMinVal/*[out]*/, 
                                                         long* pMaxVal/*[out]*/) = 0;
  // [183] method DownloadAutoTuningPLC
  virtual HRESULT STDMETHODCALLTYPE DownloadAutoTuningPLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                          VARIANT_BOOL bCurrentLoop/*[in]*/, 
                                                          VARIANT_BOOL bBypassJog/*[in]*/, 
                                                          VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [184] method DownloadGantryAutoTuningPLCP1
  virtual HRESULT STDMETHODCALLTYPE DownloadGantryAutoTuningPLCP1(long dwDevice/*[in]*/, 
                                                                  short motor/*[in]*/, 
                                                                  short motor2/*[in]*/, 
                                                                  VARIANT_BOOL bCurrentLoop/*[in]*/, 
                                                                  VARIANT_BOOL bBypassJog/*[in]*/, 
                                                                  VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [185] method DownloadGantryAutoTuningPLC
  virtual HRESULT STDMETHODCALLTYPE DownloadGantryAutoTuningPLC(long dwDevice/*[in]*/, 
                                                                short motor/*[in]*/, 
                                                                short motor2/*[in]*/, 
                                                                VARIANT_BOOL bCurrentLoop/*[in]*/, 
                                                                VARIANT_BOOL bBypassJog/*[in]*/, 
                                                                double MaxTravel/*[in]*/, 
                                                                long time/*[in]*/, 
                                                                VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [186] method MagEstimation
  virtual HRESULT STDMETHODCALLTYPE MagEstimation(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                                                  VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [187] method SlopeEstimation
  virtual HRESULT STDMETHODCALLTYPE SlopeEstimation(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                                                    VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [188] method SetCurrentGather
  virtual HRESULT STDMETHODCALLTYPE SetCurrentGather(long dwDevice/*[in]*/, long mask/*[in]*/, 
                                                     VARIANT_BOOL bEnable/*[in]*/, 
                                                     VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [189] method DownloadOpenLoopTestForPMAC1
  virtual HRESULT STDMETHODCALLTYPE DownloadOpenLoopTestForPMAC1(long dwDevice/*[in]*/, 
                                                                 short motor/*[in]*/, 
                                                                 short magnitude/*[in]*/, 
                                                                 short time/*[in]*/, 
                                                                 short reps/*[in]*/, 
                                                                 VARIANT_BOOL bGatherCurrents/*[in]*/, 
                                                                 VARIANT_BOOL bMacro/*[in]*/, 
                                                                 VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [190] method GetMacroNodes
  virtual HRESULT STDMETHODCALLTYPE GetMacroNodes(long dwDevice/*[in]*/, 
                                                  long* pNumMacroStations/*[out]*/, 
                                                  long* pNumActiveNodes/*[out]*/) = 0;
  // [191] method GetMacroNodeInfo
  virtual HRESULT STDMETHODCALLTYPE GetMacroNodeInfo(long dwDevice/*[in]*/, long modeNum/*[in]*/, 
                                                     VARIANT_BOOL* pbEnabled/*[out]*/, 
                                                     VARIANT_BOOL* pbIsIONode/*[out]*/, 
                                                     long* pID/*[out]*/) = 0;
  // [192] method SetMacroIVariableString
  virtual HRESULT STDMETHODCALLTYPE SetMacroIVariableString(long dwDevice/*[in]*/, long node/*[in]*/, 
                                                            long num/*[in]*/, 
                                                            BSTR bsMIVarValue/*[in]*/, 
                                                            VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [193] method GetMacroIVariableString
  virtual HRESULT STDMETHODCALLTYPE GetMacroIVariableString(long dwDevice/*[in]*/, long node/*[in]*/, 
                                                            long num/*[in]*/, BSTR bsDefault/*[in]*/, 
                                                            BSTR* pbsVal/*[out]*/) = 0;
  // [194] method GetCommandLogging
  virtual HRESULT STDMETHODCALLTYPE GetCommandLogging(long dwDevice/*[in]*/, 
                                                      VARIANT_BOOL* pbON/*[out]*/) = 0;
  // [195] method SetCommandLogging
  virtual HRESULT STDMETHODCALLTYPE SetCommandLogging(long dwDevice/*[in]*/, 
                                                      VARIANT_BOOL bOn/*[in]*/, 
                                                      BSTR bsFilePath/*[in]*/, 
                                                      VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [196] method GetEnumeration
  virtual HRESULT STDMETHODCALLTYPE GetEnumeration(long dwDevice/*[in]*/, long* pVal/*[out]*/) = 0;
  // [197] method GetControlValues
  virtual HRESULT STDMETHODCALLTYPE GetControlValues(long dwDevice/*[in]*/, short ctrlCh/*[in]*/, 
                                                     VARIANT* pVariant/*[in,out]*/, 
                                                     VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [198] method MultiDownload
  virtual HRESULT STDMETHODCALLTYPE MultiDownload(long dwDevice/*[in]*/, BSTR outFile/*[in]*/, 
                                                  BSTR iniFile/*[in]*/, BSTR userID/*[in]*/, 
                                                  VARIANT_BOOL bMacro/*[in]*/, 
                                                  VARIANT_BOOL bMap/*[in]*/, 
                                                  VARIANT_BOOL bLog/*[in]*/, 
                                                  VARIANT_BOOL bDnld/*[in]*/, 
                                                  VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [199] method AddDownloadFile
  virtual HRESULT STDMETHODCALLTYPE AddDownloadFile(long dwDevice/*[in]*/, BSTR iniFile/*[in]*/, 
                                                    BSTR userID/*[in]*/, BSTR dlFile/*[in]*/, 
                                                    VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [200] method RemoveDownloadFile
  virtual HRESULT STDMETHODCALLTYPE RemoveDownloadFile(long dwDevice/*[in]*/, BSTR iniFile/*[in]*/, 
                                                       BSTR userID/*[in]*/, BSTR dlFile/*[in]*/, 
                                                       VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [201] method RenumberFiles
  virtual HRESULT STDMETHODCALLTYPE RenumberFiles(long dwDevice/*[in]*/, long fileNumber/*[in]*/, 
                                                  BSTR iniFile/*[in]*/) = 0;
  // [202] method GetVariableStr
  virtual HRESULT STDMETHODCALLTYPE GetVariableStr(long dwDevice/*[in]*/, short ch/*[in]*/, 
                                                   long num/*[in]*/, BSTR* pVal/*[out]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [203] method DPRVarBufReadAll
  virtual HRESULT STDMETHODCALLTYPE DPRVarBufReadAll(long dwDevice/*[in]*/, long h/*[in]*/, 
                                                     VARIANT* pVal/*[in,out]*/, 
                                                     VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [204] method UltraLightAnalyze
  virtual HRESULT STDMETHODCALLTYPE UltraLightAnalyze(long dwDevice/*[in]*/, 
                                                      VARIANT* pVal/*[in,out]*/, 
                                                      long* pActiveNodes/*[out]*/) = 0;
  // [205] method GetPlcStatusStructure
  virtual HRESULT STDMETHODCALLTYPE GetPlcStatusStructure(long dwDevice/*[in]*/, 
                                                          VARIANT* pVal/*[in,out]*/, 
                                                          long* pPrograms/*[out]*/) = 0;
  // [206] method GetBitValue
  virtual HRESULT STDMETHODCALLTYPE GetBitValue(BSTR hexStr/*[in]*/, short bit/*[in]*/, 
                                                VARIANT_BOOL* pVal/*[out]*/) = 0;
  // [207] method GetNumDeviceKeys
  virtual HRESULT STDMETHODCALLTYPE GetNumDeviceKeys(long* pVal/*[out]*/) = 0;
  // [208] method DPRGetLongDouble
  virtual HRESULT STDMETHODCALLTYPE DPRGetLongDouble(long dwDevice/*[in]*/, long address/*[in]*/, 
                                                     double* pVal/*[out]*/, 
                                                     VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [209] method DPRGetFixedDouble
  virtual HRESULT STDMETHODCALLTYPE DPRGetFixedDouble(long dwDevice/*[in]*/, long address/*[in]*/, 
                                                      double* pVal/*[out]*/, 
                                                      VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [210] method DPRGetShort
  virtual HRESULT STDMETHODCALLTYPE DPRGetShort(long dwDevice/*[in]*/, long address/*[in]*/, 
                                                short* pVal/*[out]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [211] method DPRSetShort
  virtual HRESULT STDMETHODCALLTYPE DPRSetShort(long dwDevice/*[in]*/, long address/*[in]*/, 
                                                short newVal/*[in]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [212] method DPRDWordBitSet
  virtual HRESULT STDMETHODCALLTYPE DPRDWordBitSet(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                                   long bit/*[in]*/, VARIANT_BOOL* pVal/*[out]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [213] method DPRResetDWordBit
  virtual HRESULT STDMETHODCALLTYPE DPRResetDWordBit(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                                     long bit/*[in]*/, 
                                                     VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [214] method DPRSetDWordBit
  virtual HRESULT STDMETHODCALLTYPE DPRSetDWordBit(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                                   long bit/*[in]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [215] method GetFirmwareType
  virtual HRESULT STDMETHODCALLTYPE GetFirmwareType(long dwDevice/*[in]*/, 
                                                    Pcommserverlib_tlb::DEVPMACFIRMWARETYPE* pVal/*[out]*/) = 0;
  // [216] method GetResponseEx
  virtual HRESULT STDMETHODCALLTYPE GetResponseEx(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                                  VARIANT_BOOL bAddLF/*[in]*/, 
                                                  BSTR* pAnswer/*[out]*/, long* pstatus/*[out]*/) = 0;
  // [217] method DPRVarBufWriteEx
  virtual HRESULT STDMETHODCALLTYPE DPRVarBufWriteEx(long dwDevice/*[in]*/, VARIANT vData/*[in]*/, 
                                                     long* pWritten/*[out]*/) = 0;
  // [218] method DPRGetDWordMask
  virtual HRESULT STDMETHODCALLTYPE DPRGetDWordMask(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                                    long mask/*[in]*/, long* pVal/*[out]*/) = 0;
  // [219] method DPRSetDWordMask
  virtual HRESULT STDMETHODCALLTYPE DPRSetDWordMask(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                                    long mask/*[in]*/, long Val/*[in]*/) = 0;
  // [221] method DPRRotBufRemove
  virtual HRESULT STDMETHODCALLTYPE DPRRotBufRemove(long dwDevice/*[in]*/, long bufnum/*[in]*/) = 0;
  // [222] method DPRRotBufInit
  virtual HRESULT STDMETHODCALLTYPE DPRRotBufInit(long dwDevice/*[in]*/, 
                                                  VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [223] method DPRRotBufClr
  virtual HRESULT STDMETHODCALLTYPE DPRRotBufClr(long dwDevice/*[in]*/, long bufnum/*[in]*/) = 0;
  // [224] method DPRSetRotBuf
  virtual HRESULT STDMETHODCALLTYPE DPRSetRotBuf(long dwDevice/*[in]*/, VARIANT_BOOL on/*[in]*/) = 0;
  // [225] method DPRAsciiStrToRotEx
  virtual HRESULT STDMETHODCALLTYPE DPRAsciiStrToRotEx(long dwDevice/*[in]*/, BSTR inpstr/*[in]*/, 
                                                       long bufnum/*[in]*/, 
                                                       VARIANT_BOOL bSendRemaining/*[in]*/, 
                                                       long* pstatus/*[out]*/) = 0;
  // [226] method DPRAsciiStrToRot
  virtual HRESULT STDMETHODCALLTYPE DPRAsciiStrToRot(long dwDevice/*[in]*/, BSTR inpstr/*[in]*/, 
                                                     long bufnum/*[in]*/, long* pstatus/*[out]*/) = 0;
  // [227] method GetProgramMode
  virtual HRESULT STDMETHODCALLTYPE GetProgramMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                   Pcommserverlib_tlb::DEVPROGRAMMODE* pVal/*[out]*/) = 0;
  // [228] method GetProgramMotionMode
  virtual HRESULT STDMETHODCALLTYPE GetProgramMotionMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                         Pcommserverlib_tlb::DEVMOTIONMODE* pVal/*[out]*/) = 0;
  // [230] method MapDeviceNumToEnum
  virtual HRESULT STDMETHODCALLTYPE MapDeviceNumToEnum(long location/*[in]*/, 
                                                       long enumeration/*[in]*/, 
                                                       long* pDeviceNumber/*[out]*/) = 0;
  // [231] method MapLocAndEnumFromDeviceNum
  virtual HRESULT STDMETHODCALLTYPE MapLocAndEnumFromDeviceNum(long dwDevice/*[in]*/, 
                                                               long* pLocation/*[out]*/, 
                                                               long* pEnumeration/*[out]*/) = 0;
  // [232] method GetFeedRateAndMode
  virtual HRESULT STDMETHODCALLTYPE GetFeedRateAndMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                       double* pRate/*[out]*/, 
                                                       VARIANT_BOOL* pMode/*[out]*/) = 0;
  // [233] method GetMotorMotionMode
  virtual HRESULT STDMETHODCALLTYPE GetMotorMotionMode(long dwDevice/*[in]*/, long dwMotor/*[in]*/, 
                                                       Pcommserverlib_tlb::DEVMOTION* pVal/*[out]*/) = 0;
  // [234] method CommandLog
  virtual HRESULT STDMETHODCALLTYPE CommandLog(long dwDevice/*[in]*/, BSTR bStr/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [235] method DPRGetMem
  virtual HRESULT STDMETHODCALLTYPE DPRGetMem(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                              long bytes/*[in]*/, VARIANT* pVal/*[in,out]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [236] method DPRSetMem
  virtual HRESULT STDMETHODCALLTYPE DPRSetMem(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                              long bytes/*[in]*/, VARIANT Val/*[in]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [237] method GetResponseProgress
  virtual HRESULT STDMETHODCALLTYPE GetResponseProgress(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                                        VARIANT_BOOL bAddLF/*[in]*/, 
                                                        BSTR* pAnswer/*[out]*/, 
                                                        long* pstatus/*[out]*/) = 0;
  // [238] method Abort
  virtual HRESULT STDMETHODCALLTYPE Abort(long dwDevice/*[in]*/) = 0;
  // [239] property InterruptsEnabled
  virtual HRESULT STDMETHODCALLTYPE get_InterruptsEnabled(long dwDevice/*[in]*/, 
                                                          VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [239] property InterruptsEnabled
  virtual HRESULT STDMETHODCALLTYPE set_InterruptsEnabled(long dwDevice/*[in]*/, 
                                                          VARIANT_BOOL pVal/*[in]*/) = 0;
  // [240] property InterruptMask
  virtual HRESULT STDMETHODCALLTYPE get_InterruptMask(long dwDevice/*[in]*/, 
                                                      long* pVal/*[out,retval]*/) = 0;
  // [240] property InterruptMask
  virtual HRESULT STDMETHODCALLTYPE set_InterruptMask(long dwDevice/*[in]*/, long pVal/*[in]*/) = 0;
  // [241] method PmacSave, Issues a SAVE command to the PMAC
  virtual HRESULT STDMETHODCALLTYPE PmacSave(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                             long* pstatus/*[out]*/) = 0;
  // [242] method PmacReset, Issues a $$$ command to the PMAC
  virtual HRESULT STDMETHODCALLTYPE PmacReset(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                              VARIANT_BOOL bAsciiRingComm/*[in]*/, 
                                              long* pstatus/*[out]*/) = 0;
  // [244] method PhaseMotor
  virtual HRESULT STDMETHODCALLTYPE PhaseMotor(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                               long* pStatuss/*[out]*/) = 0;
  // [245] method GetControlResponseEx
  virtual HRESULT STDMETHODCALLTYPE GetControlResponseEx(long dwDevice/*[in]*/, 
                                                         short question/*[in]*/, 
                                                         BSTR* pAnswer/*[out]*/, 
                                                         long* pstatus/*[out]*/) = 0;
  // [246] property USMonitoringEnabled
  virtual HRESULT STDMETHODCALLTYPE get_USMonitoringEnabled(long dwDevice/*[in]*/, 
                                                            VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [246] property USMonitoringEnabled
  virtual HRESULT STDMETHODCALLTYPE set_USMonitoringEnabled(long dwDevice/*[in]*/, 
                                                            VARIANT_BOOL pVal/*[in]*/) = 0;
  // [247] property USMonitoringPeriod
  virtual HRESULT STDMETHODCALLTYPE get_USMonitoringPeriod(long dwDevice/*[in]*/, 
                                                           long* pVal/*[out,retval]*/) = 0;
  // [247] property USMonitoringPeriod
  virtual HRESULT STDMETHODCALLTYPE set_USMonitoringPeriod(long dwDevice/*[in]*/, long pVal/*[in]*/) = 0;
  // [248] method DPRTest
  virtual HRESULT STDMETHODCALLTYPE DPRTest(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [249] method AbortTest
  virtual HRESULT STDMETHODCALLTYPE AbortTest(long dwDevice/*[in]*/) = 0;
  // [250] method DPRGetMotorRpt
  virtual HRESULT STDMETHODCALLTYPE DPRGetMotorRpt(long dwDevice/*[in]*/, long motor/*[in]*/, 
                                                   Pcommserverlib_tlb::DEVFGMOTOR* pStruct/*[in,out]*/, 
                                                   long* pServo/*[out]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [251] method DPRGetMotorRptTurbo
  virtual HRESULT STDMETHODCALLTYPE DPRGetMotorRptTurbo(long dwDevice/*[in]*/, long motor/*[in]*/, 
                                                        Pcommserverlib_tlb::DEVFGMOTORTURBO* pStruct/*[in,out]*/, 
                                                        long* pServo/*[out]*/, 
                                                        VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [252] method DPRGetCoordRpt
  virtual HRESULT STDMETHODCALLTYPE DPRGetCoordRpt(long dwDevice/*[in]*/, long coord/*[in]*/, 
                                                   Pcommserverlib_tlb::DEVBGCOORD* pStruct/*[in,out]*/, 
                                                   long* pServo/*[out]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [253] method DPRGetCoordRptTurbo
  virtual HRESULT STDMETHODCALLTYPE DPRGetCoordRptTurbo(long dwDevice/*[in]*/, long coord/*[in]*/, 
                                                        Pcommserverlib_tlb::DEVBGCOORDTURBO* pStruct/*[in,out]*/, 
                                                        long* pServo/*[out]*/, 
                                                        VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [254] property DPRMotorRptEnabled
  virtual HRESULT STDMETHODCALLTYPE get_DPRMotorRptEnabled(long dwDevice/*[in]*/, 
                                                           VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [254] property DPRMotorRptEnabled
  virtual HRESULT STDMETHODCALLTYPE set_DPRMotorRptEnabled(long dwDevice/*[in]*/, 
                                                           VARIANT_BOOL pVal/*[in]*/) = 0;
  // [255] property DPRMotorRptMask
  virtual HRESULT STDMETHODCALLTYPE get_DPRMotorRptMask(long dwDevice/*[in]*/, 
                                                        long* pVal/*[out,retval]*/) = 0;
  // [255] property DPRMotorRptMask
  virtual HRESULT STDMETHODCALLTYPE set_DPRMotorRptMask(long dwDevice/*[in]*/, long pVal/*[in]*/) = 0;
  // [256] property DPRMotorRptMSec
  virtual HRESULT STDMETHODCALLTYPE get_DPRMotorRptMSec(long dwDevice/*[in]*/, 
                                                        long* pVal/*[out,retval]*/) = 0;
  // [256] property DPRMotorRptMSec
  virtual HRESULT STDMETHODCALLTYPE set_DPRMotorRptMSec(long dwDevice/*[in]*/, long pVal/*[in]*/) = 0;
  // [257] property DPRCoordRptEnabled
  virtual HRESULT STDMETHODCALLTYPE get_DPRCoordRptEnabled(long dwDevice/*[in]*/, 
                                                           VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [257] property DPRCoordRptEnabled
  virtual HRESULT STDMETHODCALLTYPE set_DPRCoordRptEnabled(long dwDevice/*[in]*/, 
                                                           VARIANT_BOOL pVal/*[in]*/) = 0;
  // [258] property DPRCoordRptMSec
  virtual HRESULT STDMETHODCALLTYPE get_DPRCoordRptMSec(long dwDevice/*[in]*/, 
                                                        long* pVal/*[out,retval]*/) = 0;
  // [258] property DPRCoordRptMSec
  virtual HRESULT STDMETHODCALLTYPE set_DPRCoordRptMSec(long dwDevice/*[in]*/, long pVal/*[in]*/) = 0;
  // [259] property DPRCoordRptMax
  virtual HRESULT STDMETHODCALLTYPE get_DPRCoordRptMax(long dwDevice/*[in]*/, 
                                                       long* pVal/*[out,retval]*/) = 0;
  // [259] property DPRCoordRptMax
  virtual HRESULT STDMETHODCALLTYPE set_DPRCoordRptMax(long dwDevice/*[in]*/, long pVal/*[in]*/) = 0;
  // [260] method UltraLightAnalyzeStruct
  virtual HRESULT STDMETHODCALLTYPE UltraLightAnalyzeStruct(long dwDevice/*[in]*/, 
                                                            Pcommserverlib_tlb::DEVULTRALIGHT_INFO* pStruct/*[in,out]*/, 
                                                            long* pActiveNodes/*[out]*/) = 0;
  // [261] method GetPlcStatusStruct
  virtual HRESULT STDMETHODCALLTYPE GetPlcStatusStruct(long dwDevice/*[in]*/, 
                                                       Pcommserverlib_tlb::DEVTOTAL_PLC_STATUS_STRUCT* pStruct/*[in,out]*/, 
                                                       long* pPrograms/*[out]*/) = 0;
  // [262] method get_DPRTesting
  virtual HRESULT STDMETHODCALLTYPE get_DPRTesting(long dwDevice/*[in]*/, 
                                                   VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [263] method RawGetResponseEx
  virtual HRESULT STDMETHODCALLTYPE RawGetResponseEx(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                                     VARIANT_BOOL bAddLF/*[in]*/, 
                                                     BSTR* pAnswer/*[out]*/, long* pstatus/*[out]*/) = 0;
  // [264] method RawGetControlResponseEx
  virtual HRESULT STDMETHODCALLTYPE RawGetControlResponseEx(long dwDevice/*[in]*/, 
                                                            short question/*[in]*/, 
                                                            BSTR* pAnswer/*[out]*/, 
                                                            long* pstatus/*[out]*/) = 0;
  // [265] method ModBusCommand
  virtual HRESULT STDMETHODCALLTYPE ModBusCommand(long dwDevice/*[in]*/, 
                                                  unsigned_char command/*[in]*/, 
                                                  VARIANT* counters/*[out]*/, 
                                                  VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [266] method ModbusAvailable
  virtual HRESULT STDMETHODCALLTYPE ModbusAvailable(long dwDevice/*[in]*/, 
                                                    unsigned_char command/*[in]*/, 
                                                    VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [267] method DPRSetupBuffers
  virtual HRESULT STDMETHODCALLTYPE DPRSetupBuffers(unsigned_long dwDevice/*[in]*/, 
                                                    VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [268] method DPRBackground
  virtual HRESULT STDMETHODCALLTYPE DPRBackground(long dwDevice/*[in]*/, long on/*[in]*/, 
                                                  long period/*[in]*/, long coord/*[in]*/, 
                                                  VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [269] property DataCollectionEnabled
  virtual HRESULT STDMETHODCALLTYPE get_DataCollectionEnabled(long dwDevice/*[in]*/, 
                                                              VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [270] property DataResolution
  virtual HRESULT STDMETHODCALLTYPE get_DataCollectionResolution(long dwDevice/*[in]*/, 
                                                                 long* pVal/*[out,retval]*/) = 0;
  // [271] method GetTurboMotorStatusEx
  virtual HRESULT STDMETHODCALLTYPE GetTurboMotorStatusEx(long dwDevice/*[in]*/, long lMotor/*[in]*/, 
                                                          Pcommserverlib_tlb::DEVMSTURBO* pstatus/*[in,out]*/, 
                                                          VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [272] method GetNTMotorStatusEx
  virtual HRESULT STDMETHODCALLTYPE GetNTMotorStatusEx(long dwDevice/*[in]*/, long lMotor/*[in]*/, 
                                                       Pcommserverlib_tlb::DEVMSNONTURBO* pstatus/*[in,out]*/, 
                                                       VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [274] method GetTurboGlobalStatusEx
  virtual HRESULT STDMETHODCALLTYPE GetTurboGlobalStatusEx(long dwDevice/*[in]*/, 
                                                           Pcommserverlib_tlb::DEVGSTURBO* pstatus/*[in,out]*/, 
                                                           VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [273] method GetNTGlobalStatusEx
  virtual HRESULT STDMETHODCALLTYPE GetNTGlobalStatusEx(long dwDevice/*[in]*/, 
                                                        Pcommserverlib_tlb::DEVGSNONTURBO* pstatus/*[in,out]*/, 
                                                        VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [275] method GetTurboCoordinateStatusEx
  virtual HRESULT STDMETHODCALLTYPE GetTurboCoordinateStatusEx(long dwDevice/*[in]*/, 
                                                               long dwCoord/*[in]*/, 
                                                               Pcommserverlib_tlb::DEVCSTURBO* pstatus/*[in,out]*/, 
                                                               VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [276] method GetNTCoordinateStatusEx
  virtual HRESULT STDMETHODCALLTYPE GetNTCoordinateStatusEx(long dwDevice/*[in]*/, 
                                                            long dwCoord/*[in]*/, 
                                                            Pcommserverlib_tlb::DEVCSNONTURBO* pstatus/*[in,out]*/, 
                                                            VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [277] method DataGather
  virtual HRESULT STDMETHODCALLTYPE DataGather(long dwDevice/*[in]*/, 
                                               LPSAFEARRAY* pvArray/*[in,out]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [278] method Upload
  virtual HRESULT STDMETHODCALLTYPE Upload(long dwDevice/*[in]*/, 
                                           Pcommserverlib_tlb::DEVUPLOAD pUpload/*[in]*/, 
                                           BSTR* pData/*[out]*/, long* pstatus/*[out]*/) = 0;
  // [279] method ModbusActive
  virtual HRESULT STDMETHODCALLTYPE ModbusActive(long dwDevice/*[in]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  long __fastcall get_DPRSize(long dwDevice/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_DPRSize(dwDevice, (long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_DPRAvailable(long dwDevice/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_DPRAvailable(dwDevice, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_LastCommError(long dwDevice/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_LastCommError(dwDevice, (long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_DoChecksums(long dwDevice/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_DoChecksums(dwDevice, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_InBootStrapMode(long dwDevice/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_InBootStrapMode(dwDevice, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_MotionBufferOpen(long dwDevice/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_MotionBufferOpen(dwDevice, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_RotaryBufferOpen(long dwDevice/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_RotaryBufferOpen(dwDevice, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsTurbo(long dwDevice/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsTurbo(dwDevice, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_Downloading(long dwDevice/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_Downloading(dwDevice, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_MaxDownloadErrors(void)
  {
    long pVal;
    OLECHECK(this->get_MaxDownloadErrors((long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsAnyPlcRunning(long dwDevice/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsAnyPlcRunning(dwDevice, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_SysServoError(long dwDevice/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_SysServoError(dwDevice, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_SysReEntryError(long dwDevice/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_SysReEntryError(dwDevice, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_SysMemChecksumError(long dwDevice/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_SysMemChecksumError(dwDevice, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_SysPromChecksumError(long dwDevice/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_SysPromChecksumError(dwDevice, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_SysInposition(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_SysInposition(dwDevice, dwCoord, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_SysWarnFError(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_SysWarnFError(dwDevice, dwCoord, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_SysFatalFError(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_SysFatalFError(dwDevice, dwCoord, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_SysRuntimeError(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_SysRuntimeError(dwDevice, dwCoord, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_SysCircleRadError(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_SysCircleRadError(dwDevice, dwCoord, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_SysAmpFaultError(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_SysAmpFaultError(dwDevice, dwCoord, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_ProgramRunning(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_ProgramRunning(dwDevice, dwCoord, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_ProgramStepping(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_ProgramStepping(dwDevice, dwCoord, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_ProgramContMotion(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_ProgramContMotion(dwDevice, dwCoord, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_ProgramContRequest(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_ProgramContRequest(dwDevice, dwCoord, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_ProgramRemaining(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_ProgramRemaining(dwDevice, dwCoord, (long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_MotionBufOpen(long dwDevice/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_MotionBufOpen(dwDevice, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_ProgramFeedMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_ProgramFeedMode(dwDevice, dwCoord, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_MotorAmpEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_MotorAmpEnabled(dwDevice, mtr, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_MotorWarnFError(long dwDevice/*[in]*/, long mtr/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_MotorWarnFError(dwDevice, mtr, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_MotorFatalFError(long dwDevice/*[in]*/, long mtr/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_MotorFatalFError(dwDevice, mtr, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_MotorAmpFault(long dwDevice/*[in]*/, long mtr/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_MotorAmpFault(dwDevice, mtr, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_MotorOnPositionLimit(long dwDevice/*[in]*/, long mtr/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_MotorOnPositionLimit(dwDevice, mtr, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_MotorHomeComplete(long dwDevice/*[in]*/, long mtr/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_MotorHomeComplete(dwDevice, mtr, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_MotorInPosition(long dwDevice/*[in]*/, long mtr/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_MotorInPosition(dwDevice, mtr, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_TimRemInMove(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_TimRemInMove(dwDevice, dwCoord, (long*)&pVal));
    return pVal;
  }

  long __fastcall get_TimeRemInTATS(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_TimeRemInTATS(dwDevice, dwCoord, (long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_MotorDataBlockError(long dwDevice/*[in]*/, long mtr/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_MotorDataBlockError(dwDevice, mtr, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_MotorPhased(long dwDevice/*[in]*/, long mtr/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_MotorPhased(dwDevice, mtr, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_MotorEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_MotorEnabled(dwDevice, mtr, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_MotorHandwheelEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_MotorHandwheelEnabled(dwDevice, mtr, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_MotorOpenLoop(long dwDevice/*[in]*/, long mtr/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_MotorOpenLoop(dwDevice, mtr, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_MotorOnNegLimit(long dwDevice/*[in]*/, long mtr/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_MotorOnNegLimit(dwDevice, mtr, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_MotorOnPosLimit(long dwDevice/*[in]*/, long mtr/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_MotorOnPosLimit(dwDevice, mtr, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_BufferOpen(long dwDevice/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_BufferOpen(dwDevice, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_GatherPeriod(long dwDevice/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_GatherPeriod(dwDevice, (long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_GatherEnabled(long dwDevice/*[in]*/, long num/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_GatherEnabled(dwDevice, num, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  Pcommserverlib_tlb::DEVGATMODE __fastcall get_GatherMode(long dwDevice/*[in]*/)
  {
    Pcommserverlib_tlb::DEVGATMODE pVal;
    OLECHECK(this->get_GatherMode(dwDevice, (Pcommserverlib_tlb::DEVGATMODE*)&pVal));
    return pVal;
  }

  double __fastcall get_GatherSampleTime(long dwDevice/*[in]*/)
  {
    double pVal;
    OLECHECK(this->get_GatherSampleTime(dwDevice, (double*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_InterruptsEnabled(long dwDevice/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_InterruptsEnabled(dwDevice, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_InterruptMask(long dwDevice/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_InterruptMask(dwDevice, (long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_USMonitoringEnabled(long dwDevice/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_USMonitoringEnabled(dwDevice, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_USMonitoringPeriod(long dwDevice/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_USMonitoringPeriod(dwDevice, (long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_DPRMotorRptEnabled(long dwDevice/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_DPRMotorRptEnabled(dwDevice, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_DPRMotorRptMask(long dwDevice/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_DPRMotorRptMask(dwDevice, (long*)&pVal));
    return pVal;
  }

  long __fastcall get_DPRMotorRptMSec(long dwDevice/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_DPRMotorRptMSec(dwDevice, (long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_DPRCoordRptEnabled(long dwDevice/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_DPRCoordRptEnabled(dwDevice, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_DPRCoordRptMSec(long dwDevice/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_DPRCoordRptMSec(dwDevice, (long*)&pVal));
    return pVal;
  }

  long __fastcall get_DPRCoordRptMax(long dwDevice/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_DPRCoordRptMax(dwDevice, (long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_DPRTesting(long dwDevice/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_DPRTesting(dwDevice, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_DataCollectionEnabled(long dwDevice/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_DataCollectionEnabled(dwDevice, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_DataCollectionResolution(long dwDevice/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_DataCollectionResolution(dwDevice, (long*)&pVal));
    return pVal;
  }


  __property   long            MaxDownloadErrors = {read = get_MaxDownloadErrors, write = set_MaxDownloadErrors};

#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _IPmacDeviceEvents
// Flags:     (4096) Dispatchable
// GUID:      {D1C5C7C8-5E0C-495E-9AAF-85B146DA5F13}
// *********************************************************************//
interface _IPmacDeviceEvents : public TDispWrapper<IDispatch>
{
  HRESULT __fastcall Message(long Device, BSTR Msg, VARIANT_BOOL bNewLine)
  {
    _TDispID _dispid(/* Message */ DISPID(1));
    TAutoArgs<3> _args;
    _args[1] = Device /*[VT_I4:0]*/;
    _args[2] = Msg /*[VT_BSTR:0]*/;
    _args[3] = bNewLine /*[VT_BOOL:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall Progress(long Device, long dwPercent)
  {
    _TDispID _dispid(/* Progress */ DISPID(2));
    TAutoArgs<2> _args;
    _args[1] = Device /*[VT_I4:0]*/;
    _args[2] = dwPercent /*[VT_I4:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall Error(long Device, BSTR FileName, long ErrorID, long LineNum, BSTR Line)
  {
    _TDispID _dispid(/* Error */ DISPID(3));
    TAutoArgs<5> _args;
    _args[1] = Device /*[VT_I4:0]*/;
    _args[2] = FileName /*[VT_BSTR:0]*/;
    _args[3] = ErrorID /*[VT_I4:0]*/;
    _args[4] = LineNum /*[VT_I4:0]*/;
    _args[5] = Line /*[VT_BSTR:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall Interrupt(long Device, long lLevel)
  {
    _TDispID _dispid(/* Interrupt */ DISPID(4));
    TAutoArgs<2> _args;
    _args[1] = Device /*[VT_I4:0]*/;
    _args[2] = lLevel /*[VT_I4:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall Unsolicited(long Device, BSTR Msg)
  {
    _TDispID _dispid(/* Unsolicited */ DISPID(5));
    TAutoArgs<2> _args;
    _args[1] = Device /*[VT_I4:0]*/;
    _args[2] = Msg /*[VT_BSTR:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall DataReady(long Device)
  {
    _TDispID _dispid(/* DataReady */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = Device /*[VT_I4:0]*/;
    return OleFunction(_dispid, _args);
  }


};
// *********************************************************************//
// Interface: IPmacNC
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0A322163-C2E1-4152-ADED-91740ACE7513}
// *********************************************************************//
interface IPmacNC  : public IDispatch
{
public:
  // [1] method Open
  virtual HRESULT STDMETHODCALLTYPE Open(long Device/*[in]*/, long Control/*[in]*/, 
                                         VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [2] method Close
  virtual HRESULT STDMETHODCALLTYPE Close(long Control/*[in]*/) = 0;
  // [3] method OpenFile
  virtual HRESULT STDMETHODCALLTYPE OpenFile(long Control/*[in]*/, long dwCoord/*[in]*/, 
                                             BSTR szFilePath/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [4] method CloseFile
  virtual HRESULT STDMETHODCALLTYPE CloseFile(long Control/*[in]*/, long dwCoord/*[in]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [5] property Title
  virtual HRESULT STDMETHODCALLTYPE get_Title(long Control/*[in]*/, BSTR* pVal/*[out,retval]*/) = 0;
  // [5] property Title
  virtual HRESULT STDMETHODCALLTYPE set_Title(long Control/*[in]*/, BSTR pVal/*[in]*/) = 0;
  // [6] property DeviceNumber
  virtual HRESULT STDMETHODCALLTYPE get_DeviceNumber(long Control/*[in]*/, 
                                                     long* pVal/*[out,retval]*/) = 0;
  // [7] property IsOpen
  virtual HRESULT STDMETHODCALLTYPE get_IsOpen(long Control/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [8] method SetMachineMode
  virtual HRESULT STDMETHODCALLTYPE SetMachineMode(long Control/*[in]*/, 
                                                   Pcommserverlib_tlb::NCMODE mode/*[in]*/) = 0;
  // [9] method GetMachineMode
  virtual HRESULT STDMETHODCALLTYPE GetMachineMode(long Control/*[in]*/, 
                                                   Pcommserverlib_tlb::NCMODE* pMode/*[out]*/) = 0;
  // [10] property Title
  virtual HRESULT STDMETHODCALLTYPE get_mode(long Control/*[in]*/, 
                                             Pcommserverlib_tlb::NCMODE* pVal/*[out,retval]*/) = 0;
  // [10] property Title
  virtual HRESULT STDMETHODCALLTYPE set_mode(long Control/*[in]*/, 
                                             Pcommserverlib_tlb::NCMODE pVal/*[in]*/) = 0;
  // [11] method GetRegistryBool
  virtual HRESULT STDMETHODCALLTYPE GetRegistryBool(long Control/*[in]*/, BSTR section/*[in]*/, 
                                                    BSTR name/*[in]*/, VARIANT_BOOL def/*[in]*/, 
                                                    VARIANT_BOOL* pVal/*[out]*/, 
                                                    VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [12] method SetRegistryBool
  virtual HRESULT STDMETHODCALLTYPE SetRegistryBool(long Control/*[in]*/, BSTR section/*[in]*/, 
                                                    BSTR name/*[in]*/, VARIANT_BOOL bVal/*[in]*/, 
                                                    VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [13] method GetRegistryDword
  virtual HRESULT STDMETHODCALLTYPE GetRegistryLong(long Control/*[in]*/, BSTR section/*[in]*/, 
                                                    BSTR name/*[in]*/, long def/*[in]*/, 
                                                    long* pVal/*[out]*/, 
                                                    VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [14] method SetRegistryDword
  virtual HRESULT STDMETHODCALLTYPE SetRegistryLong(long Control/*[in]*/, BSTR section/*[in]*/, 
                                                    BSTR name/*[in]*/, long lVal/*[in]*/, 
                                                    VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [15] method GetRegistryString
  virtual HRESULT STDMETHODCALLTYPE GetRegistryString(long Control/*[in]*/, BSTR section/*[in]*/, 
                                                      BSTR name/*[in]*/, BSTR def/*[in]*/, 
                                                      BSTR* pVal/*[in,out]*/, 
                                                      VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [16] method SetRegistryString
  virtual HRESULT STDMETHODCALLTYPE SetRegistryString(long Control/*[in]*/, BSTR section/*[in]*/, 
                                                      BSTR name/*[in]*/, BSTR Val/*[in]*/, 
                                                      VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [17] method GetRegistryDouble
  virtual HRESULT STDMETHODCALLTYPE GetRegistryDouble(long Control/*[in]*/, BSTR section/*[in]*/, 
                                                      BSTR name/*[in]*/, double def/*[in]*/, 
                                                      double* pVal/*[out]*/, 
                                                      VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [18] method SetRegistryDouble
  virtual HRESULT STDMETHODCALLTYPE SetRegistryDouble(long Control/*[in]*/, BSTR section/*[in]*/, 
                                                      BSTR name/*[in]*/, double Val/*[in]*/, 
                                                      VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [19] property CoordSystem
  virtual HRESULT STDMETHODCALLTYPE get_CoordSystem(long Control/*[in]*/, long* pVal/*[out,retval]*/) = 0;
  // [19] property CoordSystem
  virtual HRESULT STDMETHODCALLTYPE set_CoordSystem(long Control/*[in]*/, long pVal/*[in]*/) = 0;
  // [21] property NumCoordSystems
  virtual HRESULT STDMETHODCALLTYPE get_NumCoordSystems(long Control/*[in]*/, 
                                                        long* pVal/*[out,retval]*/) = 0;
  // [22] property SingleBlock
  virtual HRESULT STDMETHODCALLTYPE get_SingleBlock(long Control/*[in]*/, 
                                                    VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [22] property SingleBlock
  virtual HRESULT STDMETHODCALLTYPE set_SingleBlock(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/) = 0;
  // [23] property BlockDelete
  virtual HRESULT STDMETHODCALLTYPE get_BlockDelete(long Control/*[in]*/, 
                                                    VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [23] property BlockDelete
  virtual HRESULT STDMETHODCALLTYPE set_BlockDelete(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/) = 0;
  // [24] property OptionalStop
  virtual HRESULT STDMETHODCALLTYPE get_OptionalStop(long Control/*[in]*/, 
                                                     VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [24] property OptionalStop
  virtual HRESULT STDMETHODCALLTYPE set_OptionalStop(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/) = 0;
  // [25] property MachineLock
  virtual HRESULT STDMETHODCALLTYPE get_MachineLock(long Control/*[in]*/, 
                                                    VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [25] property MachineLock
  virtual HRESULT STDMETHODCALLTYPE set_MachineLock(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/) = 0;
  // [26] property DryRun
  virtual HRESULT STDMETHODCALLTYPE get_DryRun(long Control/*[in]*/, long coord/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [26] property DryRun
  virtual HRESULT STDMETHODCALLTYPE set_DryRun(long Control/*[in]*/, long coord/*[in]*/, 
                                               VARIANT_BOOL pVal/*[in]*/) = 0;
  // [27] property MachineType
  virtual HRESULT STDMETHODCALLTYPE get_MachineType(long Control/*[in]*/, 
                                                    Pcommserverlib_tlb::NCMACHINETYPE* pVal/*[out,retval]*/) = 0;
  // [28] property JogSelect
  virtual HRESULT STDMETHODCALLTYPE get_JogSelect(long Control/*[in]*/, 
                                                  Pcommserverlib_tlb::NCJOGSELECT* pVal/*[out,retval]*/) = 0;
  // [28] property JogSelect
  virtual HRESULT STDMETHODCALLTYPE set_JogSelect(long Control/*[in]*/, 
                                                  Pcommserverlib_tlb::NCJOGSELECT pVal/*[in]*/) = 0;
  // [29] property SpeedSelect
  virtual HRESULT STDMETHODCALLTYPE get_SpeedSelect(long Control/*[in]*/, 
                                                    Pcommserverlib_tlb::NCSPEEDSELECT* pVal/*[out,retval]*/) = 0;
  // [29] property SpeedSelect
  virtual HRESULT STDMETHODCALLTYPE set_SpeedSelect(long Control/*[in]*/, 
                                                    Pcommserverlib_tlb::NCSPEEDSELECT pVal/*[in]*/) = 0;
  // [30] property ProgramLoaded
  virtual HRESULT STDMETHODCALLTYPE get_ProgramLoaded(long Control/*[in]*/, long coord/*[in]*/, 
                                                      VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [31] method GetAxisEnabled
  virtual HRESULT STDMETHODCALLTYPE GetAxisEnabled(long Control/*[in]*/, long coord/*[in]*/, 
                                                   short axis/*[in]*/, VARIANT_BOOL* pVal/*[out]*/) = 0;
  // [32] method GetProgramName
  virtual HRESULT STDMETHODCALLTYPE GetProgramName(long Control/*[in]*/, long coord/*[in]*/, 
                                                   VARIANT_BOOL bMain/*[in]*/, 
                                                   BSTR* pVal/*[in,out]*/) = 0;
  // [33] method GetProgramPath
  virtual HRESULT STDMETHODCALLTYPE GetProgramPath(long Control/*[in]*/, long coord/*[in]*/, 
                                                   VARIANT_BOOL bMain/*[in]*/, 
                                                   BSTR* pVal/*[in,out]*/) = 0;
  // [34] property Semaphore
  virtual HRESULT STDMETHODCALLTYPE get_Semaphore(long Control/*[in]*/, long coord/*[in]*/, 
                                                  long* pVal/*[out,retval]*/) = 0;
  // [34] property Semaphore
  virtual HRESULT STDMETHODCALLTYPE set_Semaphore(long Control/*[in]*/, long coord/*[in]*/, 
                                                  long pVal/*[in]*/) = 0;
  // [35] method GetProgramStatus
  virtual HRESULT STDMETHODCALLTYPE GetProgramStatus(long Control/*[in]*/, long coord/*[in]*/, 
                                                     long* pProgID/*[out]*/, 
                                                     long* pNumLines/*[out]*/, long* pLine/*[out]*/, 
                                                     long* pParseLine/*[out]*/, 
                                                     long* pRepeat/*[out]*/, long* pCount/*[out]*/, 
                                                     VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [36] method GetProgramNumber
  virtual HRESULT STDMETHODCALLTYPE GetProgramNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                     long* pVal/*[out]*/) = 0;
  // [37] method GetCurrentLabel
  virtual HRESULT STDMETHODCALLTYPE GetCurrentLabel(long Control/*[in]*/, long coord/*[in]*/, 
                                                    long* pVal/*[out]*/) = 0;
  // [38] property DistanceSelect
  virtual HRESULT STDMETHODCALLTYPE get_DistanceSelect(long Control/*[in]*/, 
                                                       Pcommserverlib_tlb::NCSPEEDSELECT* pVal/*[out,retval]*/) = 0;
  // [38] property DistanceSelect
  virtual HRESULT STDMETHODCALLTYPE set_DistanceSelect(long Control/*[in]*/, 
                                                       Pcommserverlib_tlb::NCSPEEDSELECT pVal/*[in]*/) = 0;
  // [39] method GetJogStep
  virtual HRESULT STDMETHODCALLTYPE GetJogStep(long Control/*[in]*/, long coord/*[in]*/, 
                                               double* pVal/*[out]*/) = 0;
  // [40] method GetHandleStep
  virtual HRESULT STDMETHODCALLTYPE GetHandleStep(long Control/*[in]*/, long coord/*[in]*/, 
                                                  double* pVal/*[out]*/) = 0;
  // [41] method SetOrigin
  virtual HRESULT STDMETHODCALLTYPE SetOrigin(long Control/*[in]*/, long coord/*[in]*/, 
                                              VARIANT_BOOL bOrginAll/*[in]*/, 
                                              Pcommserverlib_tlb::NCADDRESS adr/*[in]*/, 
                                              VARIANT_BOOL bClear/*[in]*/, double Val/*[in]*/, 
                                              VARIANT_BOOL metric/*[in]*/) = 0;
  // [42] method ZeroShift
  virtual HRESULT STDMETHODCALLTYPE ZeroShift(long Control/*[in]*/, long coord/*[in]*/, 
                                              VARIANT_BOOL bShiftAll/*[in]*/, 
                                              Pcommserverlib_tlb::NCADDRESS adr/*[in]*/, 
                                              VARIANT_BOOL bClear/*[in]*/, double Val/*[in]*/, 
                                              VARIANT_BOOL bMetric/*[in]*/) = 0;
  // [45] method GetVectorVelocity
  virtual HRESULT STDMETHODCALLTYPE GetVectorVelocity(long Control/*[in]*/, long coord/*[in]*/, 
                                                      double* pVal/*[out]*/) = 0;
  // [46] method ReadMdiBuffer
  virtual HRESULT STDMETHODCALLTYPE ReadMdiBuffer(long Control/*[in]*/, long coord/*[in]*/, 
                                                  long* hDlg/*[in]*/, long idControl/*[in]*/) = 0;
  // [47] method LoadMdiBuffer
  virtual HRESULT STDMETHODCALLTYPE LoadMdiBuffer(long Control/*[in]*/, long coord/*[in]*/, 
                                                  long* hDlg/*[in]*/, long idControl/*[in]*/, 
                                                  long nRepeat/*[in]*/) = 0;
  // [48] method ClearTextBuffer
  virtual HRESULT STDMETHODCALLTYPE ClearTextBuffer(long Control/*[in]*/, long coord/*[in]*/) = 0;
  // [49] method GetCurrentGValue
  virtual HRESULT STDMETHODCALLTYPE GetCurrentGValue(long Control/*[in]*/, long coord/*[in]*/, 
                                                     long group/*[in]*/, long* pVal/*[out]*/) = 0;
  // [50] property AxisSelect
  virtual HRESULT STDMETHODCALLTYPE get_AxisSelect(long Control/*[in]*/, long coord/*[in]*/, 
                                                   Pcommserverlib_tlb::NCAXISSELECT* pVal/*[out,retval]*/) = 0;
  // [50] property AxisSelect
  virtual HRESULT STDMETHODCALLTYPE set_AxisSelect(long Control/*[in]*/, long coord/*[in]*/, 
                                                   Pcommserverlib_tlb::NCAXISSELECT pVal/*[in]*/) = 0;
  // [51] method GetInposition
  virtual HRESULT STDMETHODCALLTYPE GetInposition(long Control/*[in]*/, long coord/*[in]*/, 
                                                  VARIANT_BOOL* pVal/*[out]*/) = 0;
  // [52] property BufferMode
  virtual HRESULT STDMETHODCALLTYPE get_BufferMode(long Control/*[in]*/, long coord/*[in]*/, 
                                                   Pcommserverlib_tlb::NCBUFFERMODE* pVal/*[out,retval]*/) = 0;
  // [52] property BufferMode
  virtual HRESULT STDMETHODCALLTYPE set_BufferMode(long Control/*[in]*/, long coord/*[in]*/, 
                                                   Pcommserverlib_tlb::NCBUFFERMODE pVal/*[in]*/) = 0;
  // [53] method GetProgramMode
  virtual HRESULT STDMETHODCALLTYPE GetProgramMode(long Control/*[in]*/, long coord/*[in]*/, 
                                                   Pcommserverlib_tlb::DEVPROGRAMMODE* pVal/*[out]*/) = 0;
  // [54] method GetSelectedBufferMode
  virtual HRESULT STDMETHODCALLTYPE GetSelectedBufferMode(long Control/*[in]*/, 
                                                          Pcommserverlib_tlb::NCBUFFERMODE* pVal/*[out]*/) = 0;
  // [55] method GetSelectedAxisMotionMode
  virtual HRESULT STDMETHODCALLTYPE GetSelectedAxisMotionMode(long Control/*[in]*/, 
                                                              Pcommserverlib_tlb::DEVMOTIONMODE* pVal/*[out]*/) = 0;
  // [56] method GetProgramMotionMode
  virtual HRESULT STDMETHODCALLTYPE GetProgramMotionMode(long Control/*[in]*/, long coord/*[in]*/, 
                                                         Pcommserverlib_tlb::DEVMOTIONMODE* pVal/*[out]*/) = 0;
  // [57] method GetBufferOpen
  virtual HRESULT STDMETHODCALLTYPE GetBufferOpen(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out]*/) = 0;
  // [58] method GetBufferRemaining
  virtual HRESULT STDMETHODCALLTYPE GetBufferRemaining(long Control/*[in]*/, long coord/*[in]*/, 
                                                       long* pRemain/*[out]*/, 
                                                       long* pParsed/*[out]*/) = 0;
  // [59] property SpindleSelect
  virtual HRESULT STDMETHODCALLTYPE get_SpindleSelect(long Control/*[in]*/, 
                                                      Pcommserverlib_tlb::NCSPINDLESELECT* pVal/*[out,retval]*/) = 0;
  // [59] property SpindleSelect
  virtual HRESULT STDMETHODCALLTYPE set_SpindleSelect(long Control/*[in]*/, 
                                                      Pcommserverlib_tlb::NCSPINDLESELECT pVal/*[in]*/) = 0;
  // [60] property SpindleRPM
  virtual HRESULT STDMETHODCALLTYPE get_SpindleRPM(long Control/*[in]*/, long* pVal/*[out,retval]*/) = 0;
  // [60] property SpindleRPM
  virtual HRESULT STDMETHODCALLTYPE set_SpindleRPM(long Control/*[in]*/, long pVal/*[in]*/) = 0;
  // [61] property SpindleCSS
  virtual HRESULT STDMETHODCALLTYPE get_SpindleCSS(long Control/*[in]*/, 
                                                   double* pVal/*[out,retval]*/) = 0;
  // [61] property SpindleCSS
  virtual HRESULT STDMETHODCALLTYPE set_SpindleCSS(long Control/*[in]*/, double pVal/*[in]*/) = 0;
  // [62] property SpindleCSSMode
  virtual HRESULT STDMETHODCALLTYPE get_SpindleCSSMode(long Control/*[in]*/, 
                                                       VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [62] property SpindleCSSMode
  virtual HRESULT STDMETHODCALLTYPE set_SpindleCSSMode(long Control/*[in]*/, 
                                                       VARIANT_BOOL pVal/*[in]*/) = 0;
  // [63] property SpindleCSSUnits
  virtual HRESULT STDMETHODCALLTYPE get_SpindleCSSUnits(long Control/*[in]*/, 
                                                        double* pVal/*[out,retval]*/) = 0;
  // [63] property SpindleCSSUnits
  virtual HRESULT STDMETHODCALLTYPE set_SpindleCSSUnits(long Control/*[in]*/, double pVal/*[in]*/) = 0;
  // [64] method GetSpindleActRPM
  virtual HRESULT STDMETHODCALLTYPE GetSpindleActRPM(long Control/*[in]*/, long* pVal/*[out]*/) = 0;
  // [65] property SpindleMaxRPM
  virtual HRESULT STDMETHODCALLTYPE get_SpindleMaxRPM(long Control/*[in]*/, 
                                                      long* pVal/*[out,retval]*/) = 0;
  // [65] property SpindleMaxRPM
  virtual HRESULT STDMETHODCALLTYPE set_SpindleMaxRPM(long Control/*[in]*/, long pVal/*[in]*/) = 0;
  // [66] property SpindleOverride
  virtual HRESULT STDMETHODCALLTYPE get_SpindleOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                                        long* pVal/*[out,retval]*/) = 0;
  // [66] property SpindleOverride
  virtual HRESULT STDMETHODCALLTYPE set_SpindleOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                                        long pVal/*[in]*/) = 0;
  // [69] property FeedrateOverride
  virtual HRESULT STDMETHODCALLTYPE get_FeedrateOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                                         double* pVal/*[out,retval]*/) = 0;
  // [69] property FeedrateOverride
  virtual HRESULT STDMETHODCALLTYPE set_FeedrateOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                                         double pVal/*[in]*/) = 0;
  // [70] property RapidOverride
  virtual HRESULT STDMETHODCALLTYPE get_RapidOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                                      double* pVal/*[out,retval]*/) = 0;
  // [70] property RapidOverride
  virtual HRESULT STDMETHODCALLTYPE set_RapidOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                                      double pVal/*[in]*/) = 0;
  // [72] property CoolantSelect
  virtual HRESULT STDMETHODCALLTYPE get_CoolantSelect(long Control/*[in]*/, 
                                                      Pcommserverlib_tlb::NCCLNTSELECT* pVal/*[out,retval]*/) = 0;
  // [72] property CoolantSelect
  virtual HRESULT STDMETHODCALLTYPE set_CoolantSelect(long Control/*[in]*/, 
                                                      Pcommserverlib_tlb::NCCLNTSELECT pVal/*[in]*/) = 0;
  // [73] property TimebaseMode
  virtual HRESULT STDMETHODCALLTYPE get_TimebaseMode(long Control/*[in]*/, long coord/*[in]*/, 
                                                     Pcommserverlib_tlb::NCTIMEBASEMODE* pVal/*[out,retval]*/) = 0;
  // [73] property TimebaseMode
  virtual HRESULT STDMETHODCALLTYPE set_TimebaseMode(long Control/*[in]*/, long coord/*[in]*/, 
                                                     Pcommserverlib_tlb::NCTIMEBASEMODE pVal/*[in]*/) = 0;
  // [74] method GetFeedrate
  virtual HRESULT STDMETHODCALLTYPE GetFeedrate(long Control/*[in]*/, long coord/*[in]*/, 
                                                Pcommserverlib_tlb::NCFEEDRATEMODE* pMode/*[out]*/, 
                                                double* pVal/*[out]*/) = 0;
  // [75] method SetFeedrate
  virtual HRESULT STDMETHODCALLTYPE SetFeedrate(long Control/*[in]*/, long coord/*[in]*/, 
                                                Pcommserverlib_tlb::NCFEEDRATEMODE mode/*[in]*/, 
                                                double newVal/*[in]*/) = 0;
  // [76] property ThreadLead
  virtual HRESULT STDMETHODCALLTYPE get_ThreadLead(long Control/*[in]*/, long coord/*[in]*/, 
                                                   double* pVal/*[out,retval]*/) = 0;
  // [76] property ThreadLead
  virtual HRESULT STDMETHODCALLTYPE set_ThreadLead(long Control/*[in]*/, long coord/*[in]*/, 
                                                   double pVal/*[in]*/) = 0;
  // [77] method GetNumOfTools
  virtual HRESULT STDMETHODCALLTYPE GetNumOfTools(long Control/*[in]*/, long coord/*[in]*/, 
                                                  long* pVal/*[out]*/) = 0;
  // [78] property CurrentToolNumber
  virtual HRESULT STDMETHODCALLTYPE get_CurrentToolNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                          long* pVal/*[out,retval]*/) = 0;
  // [78] property CurrentToolNumber
  virtual HRESULT STDMETHODCALLTYPE set_CurrentToolNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                          long pVal/*[in]*/) = 0;
  // [79] property NextToolNumber
  virtual HRESULT STDMETHODCALLTYPE get_NextToolNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                       long* pVal/*[out,retval]*/) = 0;
  // [79] property NextToolNumber
  virtual HRESULT STDMETHODCALLTYPE set_NextToolNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                       long pVal/*[in]*/) = 0;
  // [80] property CurrentToolHolderNumber
  virtual HRESULT STDMETHODCALLTYPE get_CurrentToolHolderNumber(long Control/*[in]*/, 
                                                                long coord/*[in]*/, 
                                                                long* pVal/*[out,retval]*/) = 0;
  // [80] property CurrentToolHolderNumber
  virtual HRESULT STDMETHODCALLTYPE set_CurrentToolHolderNumber(long Control/*[in]*/, 
                                                                long coord/*[in]*/, 
                                                                long pVal/*[in]*/) = 0;
  // [81] method SetToolHolderNumber
  virtual HRESULT STDMETHODCALLTYPE SetToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                        long tool/*[in]*/, long holder/*[in]*/) = 0;
  // [82] method GetToolHolderNumber
  virtual HRESULT STDMETHODCALLTYPE GetToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                        long tool/*[in]*/, long* pVal/*[out]*/) = 0;
  // [83] method ZeroAllToolOffsets
  virtual HRESULT STDMETHODCALLTYPE ZeroAllToolOffsets(long Control/*[in]*/, long coord/*[in]*/) = 0;
  // [84] method GetTypeToolOffset
  virtual HRESULT STDMETHODCALLTYPE GetTypeToolOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                                      long tool/*[in]*/, BSTR chAxis/*[in]*/, 
                                                      Pcommserverlib_tlb::NCTOOLOFSTYPE type/*[in]*/, 
                                                      VARIANT_BOOL bMetric/*[in]*/, 
                                                      double* pVal/*[out]*/) = 0;
  // [85] method SetTypeToolOffset
  virtual HRESULT STDMETHODCALLTYPE SetTypeToolOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                                      long tool/*[in]*/, BSTR chAxis/*[in]*/, 
                                                      Pcommserverlib_tlb::NCTOOLOFSTYPE type/*[in]*/, 
                                                      VARIANT_BOOL bMetric/*[in]*/, 
                                                      VARIANT_BOOL bConfirm/*[in]*/, 
                                                      double newVal/*[in]*/, 
                                                      VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [86] property ToolInSpindle
  virtual HRESULT STDMETHODCALLTYPE get_ToolInSpindle(long Control/*[in]*/, long coord/*[in]*/, 
                                                      long* pVal/*[out,retval]*/) = 0;
  // [86] property ToolInSpindle
  virtual HRESULT STDMETHODCALLTYPE set_ToolInSpindle(long Control/*[in]*/, long coord/*[in]*/, 
                                                      long pVal/*[in]*/) = 0;
  // [87] property ToolDirection
  virtual HRESULT STDMETHODCALLTYPE get_ToolDirection(long Control/*[in]*/, long coord/*[in]*/, 
                                                      long tool/*[in]*/, 
                                                      Pcommserverlib_tlb::NCTOOLDIRECTION* pVal/*[out,retval]*/) = 0;
  // [87] property ToolDirection
  virtual HRESULT STDMETHODCALLTYPE set_ToolDirection(long Control/*[in]*/, long coord/*[in]*/, 
                                                      long tool/*[in]*/, 
                                                      Pcommserverlib_tlb::NCTOOLDIRECTION pVal/*[in]*/) = 0;
  // [88] property SpindleCountsPerRev
  virtual HRESULT STDMETHODCALLTYPE get_SpindleCountsPerRev(long Control/*[in]*/, 
                                                            double* pVal/*[out,retval]*/) = 0;
  // [88] property SpindleCountsPerRev
  virtual HRESULT STDMETHODCALLTYPE set_SpindleCountsPerRev(long Control/*[in]*/, 
                                                            double pVal/*[in]*/) = 0;
  // [89] property SpindleGearRatio
  virtual HRESULT STDMETHODCALLTYPE get_SpindleGearRatio(long Control/*[in]*/, 
                                                         double* pVal/*[out,retval]*/) = 0;
  // [89] property SpindleGearRatio
  virtual HRESULT STDMETHODCALLTYPE set_SpindleGearRatio(long Control/*[in]*/, double pVal/*[in]*/) = 0;
  // [90] property SpindleDetect
  virtual HRESULT STDMETHODCALLTYPE get_SpindleDetect(long Control/*[in]*/, 
                                                      VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [90] property SpindleDetect
  virtual HRESULT STDMETHODCALLTYPE set_SpindleDetect(long Control/*[in]*/, 
                                                      VARIANT_BOOL pVal/*[in]*/) = 0;
  // [91] property SpindleAtSpeed
  virtual HRESULT STDMETHODCALLTYPE get_SpindleAtSpeed(long Control/*[in]*/, 
                                                       VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [91] property SpindleAtSpeed
  virtual HRESULT STDMETHODCALLTYPE set_SpindleAtSpeed(long Control/*[in]*/, 
                                                       VARIANT_BOOL pVal/*[in]*/) = 0;
  // [92] property SpindleAtZero
  virtual HRESULT STDMETHODCALLTYPE get_SpindleAtZero(long Control/*[in]*/, 
                                                      VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [92] property SpindleAtZero
  virtual HRESULT STDMETHODCALLTYPE set_SpindleAtZero(long Control/*[in]*/, 
                                                      VARIANT_BOOL pVal/*[in]*/) = 0;
  // [93] property SpindleFPR
  virtual HRESULT STDMETHODCALLTYPE get_SpindleFPR(long Control/*[in]*/, 
                                                   VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [93] property SpindleFPR
  virtual HRESULT STDMETHODCALLTYPE set_SpindleFPR(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/) = 0;
  // [94] property HomeInit
  virtual HRESULT STDMETHODCALLTYPE get_HomeInit(long Control/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [94] property HomeInit
  virtual HRESULT STDMETHODCALLTYPE set_HomeInit(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/) = 0;
  // [96] property HomeMotorMask
  virtual HRESULT STDMETHODCALLTYPE get_HomeMotorMask(long Control/*[in]*/, 
                                                      long* pVal/*[out,retval]*/) = 0;
  // [96] property HomeMotorMask
  virtual HRESULT STDMETHODCALLTYPE set_HomeMotorMask(long Control/*[in]*/, long pVal/*[in]*/) = 0;
  // [97] method GetActiveGCode
  virtual HRESULT STDMETHODCALLTYPE GetActiveGCode(long Control/*[in]*/, long coord/*[in]*/, 
                                                   long group/*[in]*/, double* pVal/*[out]*/) = 0;
  // [98] method GetActiveGCodeStr
  virtual HRESULT STDMETHODCALLTYPE GetActiveGCodeStr(long Control/*[in]*/, long coord/*[in]*/, 
                                                      long group/*[in]*/, BSTR* pVal/*[in,out]*/) = 0;
  // [99] method GetToolOffset
  virtual HRESULT STDMETHODCALLTYPE GetToolOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                                  long* pVal/*[out]*/) = 0;
  // [100] method GetCompOffset
  virtual HRESULT STDMETHODCALLTYPE GetCompOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                                  long* pVal/*[out]*/) = 0;
  // [101] method UpdateAllMotors
  virtual HRESULT STDMETHODCALLTYPE UpdateAllMotors(long Control/*[in]*/) = 0;
  // [102] method GetOperatingTime
  virtual HRESULT STDMETHODCALLTYPE GetOperatingTime(long Control/*[in]*/, long* pDays/*[out]*/, 
                                                     long* pHours/*[out]*/, long* pMinutes/*[out]*/, 
                                                     long* pSeconds/*[out]*/) = 0;
  // [103] method GetTotalCuttingTime
  virtual HRESULT STDMETHODCALLTYPE GetTotalCuttingTime(long Control/*[in]*/, long* pDays/*[out]*/, 
                                                        long* pHours/*[out]*/, 
                                                        long* pMinutes/*[out]*/, 
                                                        long* pSeconds/*[out]*/) = 0;
  // [104] method GetRunningTime
  virtual HRESULT STDMETHODCALLTYPE GetRunningTime(long Control/*[in]*/, long* pDays/*[out]*/, 
                                                   long* pHours/*[out]*/, long* pMinutes/*[out]*/, 
                                                   long* pSeconds/*[out]*/) = 0;
  // [105] method GetPartTime
  virtual HRESULT STDMETHODCALLTYPE GetPartTime(long Control/*[in]*/, long* pHours/*[out]*/, 
                                                long* pMinutes/*[out]*/, long* pSeconds/*[out]*/) = 0;
  // [106] method GetCycleCuttingTime
  virtual HRESULT STDMETHODCALLTYPE GetCycleCuttingTime(long Control/*[in]*/, long* pHours/*[out]*/, 
                                                        long* pMinutes/*[out]*/, 
                                                        long* pSeconds/*[out]*/) = 0;
  // [107] method GetCycleTime
  virtual HRESULT STDMETHODCALLTYPE GetCycleTime(long Control/*[in]*/, long* pHours/*[out]*/, 
                                                 long* pMinutes/*[out]*/, long* Seconds/*[out]*/) = 0;
  // [108] property PartsRequired
  virtual HRESULT STDMETHODCALLTYPE get_PartsRequired(long Control/*[in]*/, 
                                                      long* pVal/*[out,retval]*/) = 0;
  // [108] property PartsRequired
  virtual HRESULT STDMETHODCALLTYPE set_PartsRequired(long Control/*[in]*/, long pVal/*[in]*/) = 0;
  // [109] property PartsCount
  virtual HRESULT STDMETHODCALLTYPE get_PartsCount(long Control/*[in]*/, long* pVal/*[out,retval]*/) = 0;
  // [109] property PartsCount
  virtual HRESULT STDMETHODCALLTYPE set_PartsCount(long Control/*[in]*/, long pVal/*[in]*/) = 0;
  // [110] property PartsTotal
  virtual HRESULT STDMETHODCALLTYPE get_PartsTotal(long Control/*[in]*/, long* pVal/*[out,retval]*/) = 0;
  // [110] property PartsTotal
  virtual HRESULT STDMETHODCALLTYPE set_PartsTotal(long Control/*[in]*/, long pVal/*[in]*/) = 0;
  // [111] method GetNumDisplayedAxis
  virtual HRESULT STDMETHODCALLTYPE GetNumDisplayedAxis(long Control/*[in]*/, long coord/*[in]*/, 
                                                        long* pVal/*[out]*/) = 0;
  // [112] method GetNumDisplayAxisTotal
  virtual HRESULT STDMETHODCALLTYPE GetNumDisplayAxisTotal(long Control/*[in]*/, long* pVal/*[out]*/) = 0;
  // [113] method GetMotorPosStr
  virtual HRESULT STDMETHODCALLTYPE GetMotorPosStr(long Control/*[in]*/, long coord/*[in]*/, 
                                                   long motor/*[in]*/, 
                                                   Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/, 
                                                   VARIANT_BOOL bCombined/*[in]*/, 
                                                   BSTR* pAdr/*[in,out]*/, BSTR* pPos/*[in,out]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [114] property IsSpindle
  virtual HRESULT STDMETHODCALLTYPE get_IsSpindle(long Control/*[in]*/, long coord/*[in]*/, 
                                                  long motor/*[in]*/, 
                                                  VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [114] property IsSpindle
  virtual HRESULT STDMETHODCALLTYPE set_IsSpindle(long Control/*[in]*/, long coord/*[in]*/, 
                                                  long motor/*[in]*/, VARIANT_BOOL pVal/*[in]*/) = 0;
  // [115] property IsDisplayed
  virtual HRESULT STDMETHODCALLTYPE get_IsDisplayed(long Control/*[in]*/, long coord/*[in]*/, 
                                                    long motor/*[in]*/, 
                                                    VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [115] property IsDisplayed
  virtual HRESULT STDMETHODCALLTYPE set_IsDisplayed(long Control/*[in]*/, long coord/*[in]*/, 
                                                    long motor/*[in]*/, VARIANT_BOOL pVal/*[in]*/) = 0;
  // [116] method GetMotorUnitsStr
  virtual HRESULT STDMETHODCALLTYPE GetMotorUnitsStr(long Control/*[in]*/, long coord/*[in]*/, 
                                                     long motor/*[in]*/, BSTR* pVal/*[in,out]*/, 
                                                     VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [117] method GetProgramLines
  virtual HRESULT STDMETHODCALLTYPE GetProgramLines(long Control/*[in]*/, long coord/*[in]*/, 
                                                    long start/*[in]*/, long count/*[in]*/, 
                                                    VARIANT* pVal/*[in,out]*/, 
                                                    VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [118] method GetProgramLine
  virtual HRESULT STDMETHODCALLTYPE GetProgramLine(long Control/*[in]*/, long coord/*[in]*/, 
                                                   long lineNumber/*[in]*/, BSTR* pVal/*[out]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [119] method GetInputLong
  virtual HRESULT STDMETHODCALLTYPE GetInputLong(long Control/*[in]*/, long num/*[in]*/, 
                                                 long* pVal/*[out]*/) = 0;
  // [120] method GetOutputLong
  virtual HRESULT STDMETHODCALLTYPE GetOutputLong(long Control/*[in]*/, long num/*[in]*/, 
                                                  long* pVal/*[out]*/) = 0;
  // [121] method GetCommandLong
  virtual HRESULT STDMETHODCALLTYPE GetCommandLong(long Control/*[in]*/, long num/*[in]*/, 
                                                   long* pVal/*[out]*/) = 0;
  // [122] method GetStatusLong
  virtual HRESULT STDMETHODCALLTYPE GetStatusLong(long Control/*[in]*/, long num/*[in]*/, 
                                                  long* pVal/*[out]*/) = 0;
  // [123] property HomeInProgress
  virtual HRESULT STDMETHODCALLTYPE get_HomeInProgress(long Control/*[in]*/, 
                                                       VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [124] property SpindleCmdRPM
  virtual HRESULT STDMETHODCALLTYPE get_SpindleCmdRPM(long Control/*[in]*/, 
                                                      long* pVal/*[out,retval]*/) = 0;
  // [125] method Command
  virtual HRESULT STDMETHODCALLTYPE command(long Control/*[in]*/, long id/*[in]*/, long iv/*[in]*/, 
                                            double fv/*[in]*/, BSTR bStr/*[in]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [126] method AddErrRecord
  virtual HRESULT STDMETHODCALLTYPE AddErrorRecord(long Control/*[in]*/, long errnum/*[in]*/, 
                                                   Pcommserverlib_tlb::NCERRORMODE em/*[in]*/, 
                                                   Pcommserverlib_tlb::NCERRORTYPE et/*[in]*/, 
                                                   long Line/*[in]*/, short ax/*[in]*/, 
                                                   BSTR Msg/*[in]*/) = 0;
  // [127] method GetParametricDouble
  virtual HRESULT STDMETHODCALLTYPE GetParametricDouble(long Control/*[in]*/, long coord/*[in]*/, 
                                                        BSTR region/*[in]*/, long index/*[in]*/, 
                                                        double* pVal/*[out]*/, 
                                                        VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [128] method SetParametricDouble
  virtual HRESULT STDMETHODCALLTYPE SetParametricDouble(long Control/*[in]*/, long coord/*[in]*/, 
                                                        BSTR region/*[in]*/, long index/*[in]*/, 
                                                        double newVal/*[in]*/, 
                                                        VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [129] method GetSelectedAxisChar
  virtual HRESULT STDMETHODCALLTYPE GetSelectedAxisChar(long Control/*[in]*/, 
                                                        short* pAxChar/*[out]*/) = 0;
  // [130] property CurrentErrorLevel
  virtual HRESULT STDMETHODCALLTYPE get_CurrentErrorLevel(long Control/*[in]*/, 
                                                          Pcommserverlib_tlb::NCERRORMODE* pVal/*[out,retval]*/) = 0;
  // [130] property CurrentErrorLevel
  virtual HRESULT STDMETHODCALLTYPE set_CurrentErrorLevel(long Control/*[in]*/, 
                                                          Pcommserverlib_tlb::NCERRORMODE pVal/*[in]*/) = 0;
  // [131] method GetAxisFormat
  virtual HRESULT STDMETHODCALLTYPE GetAxisFormat(long Control/*[in]*/, long coord/*[in]*/, 
                                                  short ax/*[in]*/, VARIANT_BOOL bMetric/*[in]*/, 
                                                  long* pLen/*[out]*/, long* pDecPlaces/*[out]*/) = 0;
  // [132] method GetAxisFormatStr
  virtual HRESULT STDMETHODCALLTYPE GetAxisFormatStr(long Control/*[in]*/, long coord/*[in]*/, 
                                                     short ax/*[in]*/, VARIANT_BOOL bMetric/*[in]*/, 
                                                     BSTR* pVal/*[in,out]*/) = 0;
  // [133] method SetAxisFormat
  virtual HRESULT STDMETHODCALLTYPE SetAxisFormat(long Control/*[in]*/, long coord/*[in]*/, 
                                                  short ax/*[in]*/, VARIANT_BOOL bMetric/*[in]*/, 
                                                  long len/*[in]*/, long decPlaces/*[in]*/) = 0;
  // [135] method GetFirstError
  virtual HRESULT STDMETHODCALLTYPE GetFirstError(long Control/*[in]*/, BSTR* pHeader/*[in,out]*/, 
                                                  BSTR* pMessage/*[in,out]*/, 
                                                  BSTR* pCode/*[in,out]*/, 
                                                  BSTR* pFilename/*[in,out]*/, long* pCount/*[out]*/, 
                                                  long* pChanged/*[out]*/) = 0;
  // [136] method GetNextError
  virtual HRESULT STDMETHODCALLTYPE GetNextError(long Control/*[in]*/, BSTR* pHeader/*[in,out]*/, 
                                                 BSTR* pMessage/*[in,out]*/, BSTR* pCode/*[in,out]*/, 
                                                 BSTR* pFilename/*[in,out]*/, 
                                                 VARIANT_BOOL* pbMore/*[out]*/) = 0;
  // [137] method OffsetsUpdateClear
  virtual HRESULT STDMETHODCALLTYPE OffsetsUpdateClear(long Control/*[in]*/, long clearMask/*[in]*/) = 0;
  // [138] method OffsetsUpdate
  virtual HRESULT STDMETHODCALLTYPE OffsetsUpdate(long Control/*[in]*/, long* pVal/*[out]*/) = 0;
  // [139] method ReadErrorMsgBoxText
  virtual HRESULT STDMETHODCALLTYPE ReadErrorMsgBoxText(long Control/*[in]*/, long index/*[in]*/, 
                                                        long* pCount/*[out]*/, 
                                                        BSTR* pText/*[in,out]*/, 
                                                        BSTR* pTitle/*[in,out]*/) = 0;
  // [140] method ResetMsgBoxError
  virtual HRESULT STDMETHODCALLTYPE ResetMsgBoxError(long Control/*[in]*/, long errRetVal/*[in]*/) = 0;
  // [141] method SaveParametricVars
  virtual HRESULT STDMETHODCALLTYPE SaveParametricVars(long Control/*[in]*/) = 0;
  // [142] method LoadParametricVars
  virtual HRESULT STDMETHODCALLTYPE LoadParametricVars(long Control/*[in]*/) = 0;
  // [143] method ResetCycleTime
  virtual HRESULT STDMETHODCALLTYPE ResetCycleTime(long Control/*[in]*/) = 0;
  // [144] method GetToolGuageOffset
  virtual HRESULT STDMETHODCALLTYPE GetToolGuageOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                                       long tool/*[in]*/, 
                                                       VARIANT_BOOL bMulti/*[in]*/, short ax/*[in]*/, 
                                                       VARIANT_BOOL bMetric/*[in]*/, 
                                                       double* pVal/*[out]*/) = 0;
  // [145] method SetToolGuageOffset
  virtual HRESULT STDMETHODCALLTYPE SetToolGuageOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                                       long tool/*[in]*/, 
                                                       VARIANT_BOOL bMulti/*[in]*/, short ax/*[in]*/, 
                                                       VARIANT_BOOL bMetric/*[in]*/, 
                                                       double newVal/*[in]*/) = 0;
  // [146] method AutoSetToolOffset
  virtual HRESULT STDMETHODCALLTYPE AutoSetToolOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                                      long tool/*[in]*/, short axis/*[in]*/) = 0;
  // [147] method GetOffsetValue
  virtual HRESULT STDMETHODCALLTYPE GetOffsetValue(long Control/*[in]*/, long coord/*[in]*/, 
                                                   short axis/*[in]*/, 
                                                   Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                                   VARIANT_BOOL bMetric/*[in]*/, 
                                                   double* pVal/*[out]*/) = 0;
  // [148] method SetOffsetValue
  virtual HRESULT STDMETHODCALLTYPE SetOffsetValue(long Control/*[in]*/, long coord/*[in]*/, 
                                                   short axis/*[in]*/, 
                                                   Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                                   VARIANT_BOOL bMetric/*[in]*/, 
                                                   VARIANT_BOOL bConfirm/*[in]*/, 
                                                   double newVal/*[in]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [149] method AutoSetWorkOffset
  virtual HRESULT STDMETHODCALLTYPE AutoSetWorkOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                                      short axis/*[in]*/, 
                                                      Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                                      VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [150] method SearchText
  virtual HRESULT STDMETHODCALLTYPE SearchText(long Control/*[in]*/, long coord/*[in]*/, 
                                               BSTR text/*[in]*/, VARIANT_BOOL bMatchCase/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [151] method SearchTextNext
  virtual HRESULT STDMETHODCALLTYPE SearchTextNext(long Control/*[in]*/, long coord/*[in]*/, 
                                                   BSTR text/*[in]*/, 
                                                   VARIANT_BOOL bMatchCase/*[in]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [152] method GetMDIBufferText
  virtual HRESULT STDMETHODCALLTYPE GetBufferText(long Control/*[in]*/, long coord/*[in]*/, 
                                                  VARIANT_BOOL bMDI/*[in]*/, BSTR* pVal/*[in,out]*/) = 0;
  // [153] method SetMDIBufferText
  virtual HRESULT STDMETHODCALLTYPE SetBufferText(long Control/*[in]*/, long coord/*[in]*/, 
                                                  long repeat/*[in]*/, VARIANT_BOOL bMDI/*[in]*/, 
                                                  BSTR newVal/*[in]*/) = 0;
  // [154] method GetProcessorClocks
  virtual HRESULT STDMETHODCALLTYPE GetProcessorClocks(double* pIO/*[out]*/, double* pLA/*[out]*/, 
                                                       double* pParse/*[out]*/, 
                                                       double* pFormat/*[out]*/, 
                                                       double* pWrite/*[out]*/) = 0;
  // [155] property CurrentErrorCount
  virtual HRESULT STDMETHODCALLTYPE get_CurrentErrorCount(long Control/*[in]*/, 
                                                          long* pVal/*[out,retval]*/) = 0;
  // [156] property BlocksPerSecond
  virtual HRESULT STDMETHODCALLTYPE get_BlocksPerSecond(long Control/*[in]*/, long coord/*[in]*/, 
                                                        long* pVal/*[out,retval]*/) = 0;
  // [157] method GetMetricInput
  virtual HRESULT STDMETHODCALLTYPE GetMetricInput(long Control/*[in]*/, long coord/*[in]*/, 
                                                   VARIANT_BOOL* pVal/*[out]*/) = 0;
  // [158] method GetToolInfo
  virtual HRESULT STDMETHODCALLTYPE GetToolInfo(long Control/*[in]*/, long coord/*[in]*/, 
                                                long* pCurrentTool/*[out]*/, 
                                                long* pNextTool/*[out]*/, long* pHolder/*[out]*/, 
                                                long* pHolderTool/*[out]*/) = 0;
  // [159] method GetToolData
  virtual HRESULT STDMETHODCALLTYPE GetToolData(long Control/*[in]*/, long coord/*[in]*/, 
                                                long tool/*[in]*/, VARIANT* pVal/*[in,out]*/) = 0;
  // [160] method ZeroAllTypeToolOffsets
  virtual HRESULT STDMETHODCALLTYPE ZeroAllTypeToolOffsets(long Control/*[in]*/, long coord/*[in]*/, 
                                                           Pcommserverlib_tlb::NCTOOLOFSTYPE type/*[in]*/) = 0;
  // [161] method SearchLine
  virtual HRESULT STDMETHODCALLTYPE SearchLine(long Control/*[in]*/, long coord/*[in]*/, 
                                               long Line/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [162] method GetAxisMotor
  virtual HRESULT STDMETHODCALLTYPE GetAxisMotor(long Control/*[in]*/, long coord/*[in]*/, 
                                                 short axis/*[in]*/, long* pMotor/*[out]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [163] method GetMotorAxis
  virtual HRESULT STDMETHODCALLTYPE GetMotorAxis(long Control/*[in]*/, long coord/*[in]*/, 
                                                 long motor/*[in]*/, short* pAxis/*[out]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [164] method GetMotorPos
  virtual HRESULT STDMETHODCALLTYPE GetMotorPos(long Control/*[in]*/, long coord/*[in]*/, 
                                                long motor/*[in]*/, 
                                                Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/, 
                                                BSTR* pAdr/*[out]*/, double* pPos/*[out]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [165] method GetAllAxisPos
  virtual HRESULT STDMETHODCALLTYPE GetAllAxisPos(long Control/*[in]*/, long coord/*[in]*/, 
                                                  Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/, 
                                                  LPSAFEARRAY* pvAdrArray/*[in,out]*/, 
                                                  LPSAFEARRAY* pvPosArray/*[in,out]*/, 
                                                  VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [166] method GetAllAxisPosStr
  virtual HRESULT STDMETHODCALLTYPE GetAllAxisPosStr(long Control/*[in]*/, long coord/*[in]*/, 
                                                     Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/, 
                                                     VARIANT_BOOL bCoord/*[in]*/, 
                                                     LPSAFEARRAY* pvArray/*[in,out]*/, 
                                                     VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [167] method GetMaxFeedrates
  virtual HRESULT STDMETHODCALLTYPE GetMaxFeedrates(long Control/*[in]*/, long coord/*[in]*/, 
                                                    double* pMaxPerRev/*[out]*/, 
                                                    double* pMaxPerMinute/*[out]*/) = 0;
  // [168] method SetMaxFeedrates
  virtual HRESULT STDMETHODCALLTYPE SetMaxFeedrates(long Control/*[in]*/, long coord/*[in]*/, 
                                                    double MaxPerRev/*[in]*/, 
                                                    double MaxPerMinute/*[in]*/) = 0;
  // [169] method ClearOffsetValue
  virtual HRESULT STDMETHODCALLTYPE ClearOffsetValue(long Control/*[in]*/, long coord/*[in]*/, 
                                                     short axis/*[in]*/, 
                                                     Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                                     VARIANT_BOOL bMetric/*[in]*/, 
                                                     double newVal/*[in]*/, 
                                                     VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [170] method GetToolDataStruct
  virtual HRESULT STDMETHODCALLTYPE GetToolDataStruct(long Control/*[in]*/, long coord/*[in]*/, 
                                                      long tool/*[in]*/, 
                                                      Pcommserverlib_tlb::NCTOOL* pStruct/*[in,out]*/) = 0;
  // [171] method StartDataCollection
  virtual HRESULT STDMETHODCALLTYPE StartDataCollection(long Control/*[in]*/, 
                                                        long CollectionMSec/*[in]*/, 
                                                        long BufferSize/*[in]*/, 
                                                        VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [172] method StopDataCollection
  virtual HRESULT STDMETHODCALLTYPE StopDataCollection(long Control/*[in]*/) = 0;
  // [173] method DataCollect
  virtual HRESULT STDMETHODCALLTYPE DataCollect(long Control/*[in]*/, long coord/*[in]*/, 
                                                LPSAFEARRAY* pvArray/*[in,out]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/) = 0;
  // [174] method ResetPartsCount
  virtual HRESULT STDMETHODCALLTYPE ResetPartsCount(long Control/*[in]*/) = 0;
  // [175] method ResetPartsTotal
  virtual HRESULT STDMETHODCALLTYPE ResetPartsTotal(long Control/*[in]*/) = 0;
  // [176] method GetWorkOffset
  virtual HRESULT STDMETHODCALLTYPE GetWorkOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                                  Pcommserverlib_tlb::NCCOORDTYPE* t/*[out]*/, 
                                                  long* pExtendedVal/*[out]*/) = 0;
  // [177] property DataCollectionEnabled
  virtual HRESULT STDMETHODCALLTYPE get_DataCollectionEnabled(long Control/*[in]*/, 
                                                              VARIANT_BOOL* pVal/*[out,retval]*/) = 0;
  // [178] property DataResolution
  virtual HRESULT STDMETHODCALLTYPE get_DataCollectionResolution(long Control/*[in]*/, 
                                                                 long* pVal/*[out,retval]*/) = 0;
  // [179] method GetLatheSetXDiameter
  virtual HRESULT STDMETHODCALLTYPE GetLatheSetXDiameter(long Control/*[in]*/, long coord/*[in]*/, 
                                                         VARIANT_BOOL bMetric/*[in]*/, 
                                                         double* pVal/*[out]*/) = 0;
  // [180] method SetLatheSetXDiameter
  virtual HRESULT STDMETHODCALLTYPE SetLatheSetXDiameter(long Control/*[in]*/, long coord/*[in]*/, 
                                                         VARIANT_BOOL bMetric/*[in]*/, 
                                                         double newVal/*[in]*/) = 0;

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)

  BSTR __fastcall get_Title(long Control/*[in]*/)
  {
    BSTR pVal = 0;
    OLECHECK(this->get_Title(Control, (BSTR*)&pVal));
    return pVal;
  }

  long __fastcall get_DeviceNumber(long Control/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_DeviceNumber(Control, (long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsOpen(long Control/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsOpen(Control, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  Pcommserverlib_tlb::NCMODE __fastcall get_mode(long Control/*[in]*/)
  {
    Pcommserverlib_tlb::NCMODE pVal;
    OLECHECK(this->get_mode(Control, (Pcommserverlib_tlb::NCMODE*)&pVal));
    return pVal;
  }

  long __fastcall get_CoordSystem(long Control/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_CoordSystem(Control, (long*)&pVal));
    return pVal;
  }

  long __fastcall get_NumCoordSystems(long Control/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_NumCoordSystems(Control, (long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_SingleBlock(long Control/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_SingleBlock(Control, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_BlockDelete(long Control/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_BlockDelete(Control, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_OptionalStop(long Control/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_OptionalStop(Control, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_MachineLock(long Control/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_MachineLock(Control, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_DryRun(long Control/*[in]*/, long coord/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_DryRun(Control, coord, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  Pcommserverlib_tlb::NCMACHINETYPE __fastcall get_MachineType(long Control/*[in]*/)
  {
    Pcommserverlib_tlb::NCMACHINETYPE pVal;
    OLECHECK(this->get_MachineType(Control, (Pcommserverlib_tlb::NCMACHINETYPE*)&pVal));
    return pVal;
  }

  Pcommserverlib_tlb::NCJOGSELECT __fastcall get_JogSelect(long Control/*[in]*/)
  {
    Pcommserverlib_tlb::NCJOGSELECT pVal;
    OLECHECK(this->get_JogSelect(Control, (Pcommserverlib_tlb::NCJOGSELECT*)&pVal));
    return pVal;
  }

  Pcommserverlib_tlb::NCSPEEDSELECT __fastcall get_SpeedSelect(long Control/*[in]*/)
  {
    Pcommserverlib_tlb::NCSPEEDSELECT pVal;
    OLECHECK(this->get_SpeedSelect(Control, (Pcommserverlib_tlb::NCSPEEDSELECT*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_ProgramLoaded(long Control/*[in]*/, long coord/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_ProgramLoaded(Control, coord, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_Semaphore(long Control/*[in]*/, long coord/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_Semaphore(Control, coord, (long*)&pVal));
    return pVal;
  }

  Pcommserverlib_tlb::NCSPEEDSELECT __fastcall get_DistanceSelect(long Control/*[in]*/)
  {
    Pcommserverlib_tlb::NCSPEEDSELECT pVal;
    OLECHECK(this->get_DistanceSelect(Control, (Pcommserverlib_tlb::NCSPEEDSELECT*)&pVal));
    return pVal;
  }

  Pcommserverlib_tlb::NCAXISSELECT __fastcall get_AxisSelect(long Control/*[in]*/, 
                                                             long coord/*[in]*/)
  {
    Pcommserverlib_tlb::NCAXISSELECT pVal;
    OLECHECK(this->get_AxisSelect(Control, coord, (Pcommserverlib_tlb::NCAXISSELECT*)&pVal));
    return pVal;
  }

  Pcommserverlib_tlb::NCBUFFERMODE __fastcall get_BufferMode(long Control/*[in]*/, 
                                                             long coord/*[in]*/)
  {
    Pcommserverlib_tlb::NCBUFFERMODE pVal;
    OLECHECK(this->get_BufferMode(Control, coord, (Pcommserverlib_tlb::NCBUFFERMODE*)&pVal));
    return pVal;
  }

  Pcommserverlib_tlb::NCSPINDLESELECT __fastcall get_SpindleSelect(long Control/*[in]*/)
  {
    Pcommserverlib_tlb::NCSPINDLESELECT pVal;
    OLECHECK(this->get_SpindleSelect(Control, (Pcommserverlib_tlb::NCSPINDLESELECT*)&pVal));
    return pVal;
  }

  long __fastcall get_SpindleRPM(long Control/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_SpindleRPM(Control, (long*)&pVal));
    return pVal;
  }

  double __fastcall get_SpindleCSS(long Control/*[in]*/)
  {
    double pVal;
    OLECHECK(this->get_SpindleCSS(Control, (double*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_SpindleCSSMode(long Control/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_SpindleCSSMode(Control, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  double __fastcall get_SpindleCSSUnits(long Control/*[in]*/)
  {
    double pVal;
    OLECHECK(this->get_SpindleCSSUnits(Control, (double*)&pVal));
    return pVal;
  }

  long __fastcall get_SpindleMaxRPM(long Control/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_SpindleMaxRPM(Control, (long*)&pVal));
    return pVal;
  }

  long __fastcall get_SpindleOverride(long Control/*[in]*/, long coord/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_SpindleOverride(Control, coord, (long*)&pVal));
    return pVal;
  }

  double __fastcall get_FeedrateOverride(long Control/*[in]*/, long coord/*[in]*/)
  {
    double pVal;
    OLECHECK(this->get_FeedrateOverride(Control, coord, (double*)&pVal));
    return pVal;
  }

  double __fastcall get_RapidOverride(long Control/*[in]*/, long coord/*[in]*/)
  {
    double pVal;
    OLECHECK(this->get_RapidOverride(Control, coord, (double*)&pVal));
    return pVal;
  }

  Pcommserverlib_tlb::NCCLNTSELECT __fastcall get_CoolantSelect(long Control/*[in]*/)
  {
    Pcommserverlib_tlb::NCCLNTSELECT pVal;
    OLECHECK(this->get_CoolantSelect(Control, (Pcommserverlib_tlb::NCCLNTSELECT*)&pVal));
    return pVal;
  }

  Pcommserverlib_tlb::NCTIMEBASEMODE __fastcall get_TimebaseMode(long Control/*[in]*/, 
                                                                 long coord/*[in]*/)
  {
    Pcommserverlib_tlb::NCTIMEBASEMODE pVal;
    OLECHECK(this->get_TimebaseMode(Control, coord, (Pcommserverlib_tlb::NCTIMEBASEMODE*)&pVal));
    return pVal;
  }

  double __fastcall get_ThreadLead(long Control/*[in]*/, long coord/*[in]*/)
  {
    double pVal;
    OLECHECK(this->get_ThreadLead(Control, coord, (double*)&pVal));
    return pVal;
  }

  long __fastcall get_CurrentToolNumber(long Control/*[in]*/, long coord/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_CurrentToolNumber(Control, coord, (long*)&pVal));
    return pVal;
  }

  long __fastcall get_NextToolNumber(long Control/*[in]*/, long coord/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_NextToolNumber(Control, coord, (long*)&pVal));
    return pVal;
  }

  long __fastcall get_CurrentToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_CurrentToolHolderNumber(Control, coord, (long*)&pVal));
    return pVal;
  }

  long __fastcall get_ToolInSpindle(long Control/*[in]*/, long coord/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_ToolInSpindle(Control, coord, (long*)&pVal));
    return pVal;
  }

  Pcommserverlib_tlb::NCTOOLDIRECTION __fastcall get_ToolDirection(long Control/*[in]*/, 
                                                                   long coord/*[in]*/, 
                                                                   long tool/*[in]*/)
  {
    Pcommserverlib_tlb::NCTOOLDIRECTION pVal;
    OLECHECK(this->get_ToolDirection(Control, coord, tool, (Pcommserverlib_tlb::NCTOOLDIRECTION*)&pVal));
    return pVal;
  }

  double __fastcall get_SpindleCountsPerRev(long Control/*[in]*/)
  {
    double pVal;
    OLECHECK(this->get_SpindleCountsPerRev(Control, (double*)&pVal));
    return pVal;
  }

  double __fastcall get_SpindleGearRatio(long Control/*[in]*/)
  {
    double pVal;
    OLECHECK(this->get_SpindleGearRatio(Control, (double*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_SpindleDetect(long Control/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_SpindleDetect(Control, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_SpindleAtSpeed(long Control/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_SpindleAtSpeed(Control, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_SpindleAtZero(long Control/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_SpindleAtZero(Control, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_SpindleFPR(long Control/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_SpindleFPR(Control, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_HomeInit(long Control/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_HomeInit(Control, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_HomeMotorMask(long Control/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_HomeMotorMask(Control, (long*)&pVal));
    return pVal;
  }

  long __fastcall get_PartsRequired(long Control/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_PartsRequired(Control, (long*)&pVal));
    return pVal;
  }

  long __fastcall get_PartsCount(long Control/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_PartsCount(Control, (long*)&pVal));
    return pVal;
  }

  long __fastcall get_PartsTotal(long Control/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_PartsTotal(Control, (long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsSpindle(long Control/*[in]*/, long coord/*[in]*/, long motor/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsSpindle(Control, coord, motor, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_IsDisplayed(long Control/*[in]*/, long coord/*[in]*/, 
                                          long motor/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_IsDisplayed(Control, coord, motor, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_HomeInProgress(long Control/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_HomeInProgress(Control, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_SpindleCmdRPM(long Control/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_SpindleCmdRPM(Control, (long*)&pVal));
    return pVal;
  }

  Pcommserverlib_tlb::NCERRORMODE __fastcall get_CurrentErrorLevel(long Control/*[in]*/)
  {
    Pcommserverlib_tlb::NCERRORMODE pVal;
    OLECHECK(this->get_CurrentErrorLevel(Control, (Pcommserverlib_tlb::NCERRORMODE*)&pVal));
    return pVal;
  }

  long __fastcall get_CurrentErrorCount(long Control/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_CurrentErrorCount(Control, (long*)&pVal));
    return pVal;
  }

  long __fastcall get_BlocksPerSecond(long Control/*[in]*/, long coord/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_BlocksPerSecond(Control, coord, (long*)&pVal));
    return pVal;
  }

  VARIANT_BOOL __fastcall get_DataCollectionEnabled(long Control/*[in]*/)
  {
    VARIANT_BOOL pVal;
    OLECHECK(this->get_DataCollectionEnabled(Control, (VARIANT_BOOL*)&pVal));
    return pVal;
  }

  long __fastcall get_DataCollectionResolution(long Control/*[in]*/)
  {
    long pVal;
    OLECHECK(this->get_DataCollectionResolution(Control, (long*)&pVal));
    return pVal;
  }



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

// *********************************************************************//
// Interface: _IPmacNCEvents
// Flags:     (4096) Dispatchable
// GUID:      {32C9ADDE-9F29-4658-8EC3-F1B8395FE19F}
// *********************************************************************//
interface _IPmacNCEvents : public TDispWrapper<IDispatch>
{
  HRESULT __fastcall Error(long Control, Pcommserverlib_tlb::NCERRORMODE ErrMode, 
                           Pcommserverlib_tlb::NCERRORTYPE ErrType, long ErrId, long ErrLine, 
                           short ErrAxis, BSTR ErrMsg)
  {
    _TDispID _dispid(/* Error */ DISPID(1));
    TAutoArgs<7> _args;
    _args[1] = Control /*[VT_I4:0]*/;
    _args[2] = (int)ErrMode /*[VT_USERDEFINED:0]*/;
    _args[3] = (int)ErrType /*[VT_USERDEFINED:0]*/;
    _args[4] = ErrId /*[VT_I4:0]*/;
    _args[5] = ErrLine /*[VT_I4:0]*/;
    _args[6] = ErrAxis /*[VT_I2:0]*/;
    _args[7] = ErrMsg /*[VT_BSTR:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall Message(long Control, BSTR Msg)
  {
    _TDispID _dispid(/* Message */ DISPID(2));
    TAutoArgs<2> _args;
    _args[1] = Control /*[VT_I4:0]*/;
    _args[2] = Msg /*[VT_BSTR:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall Progress(long Control, long Percent)
  {
    _TDispID _dispid(/* Progress */ DISPID(3));
    TAutoArgs<2> _args;
    _args[1] = Control /*[VT_I4:0]*/;
    _args[2] = Percent /*[VT_I4:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall MessageQuery(long Control, long msgID, BSTR Msg)
  {
    _TDispID _dispid(/* MessageQuery */ DISPID(4));
    TAutoArgs<3> _args;
    _args[1] = Control /*[VT_I4:0]*/;
    _args[2] = msgID /*[VT_I4:0]*/;
    _args[3] = Msg /*[VT_BSTR:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall SearchProgress(long Control, long Line)
  {
    _TDispID _dispid(/* SearchProgress */ DISPID(5));
    TAutoArgs<2> _args;
    _args[1] = Control /*[VT_I4:0]*/;
    _args[2] = Line /*[VT_I4:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall Change(long Control, long changeID, VARIANT vVal)
  {
    _TDispID _dispid(/* Change */ DISPID(6));
    TAutoArgs<3> _args;
    _args[1] = Control /*[VT_I4:0]*/;
    _args[2] = changeID /*[VT_I4:0]*/;
    _args[3] = vVal /*[VT_VARIANT:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall ClearError(long Control, Pcommserverlib_tlb::NCERRORMODE ErrMode, 
                                Pcommserverlib_tlb::NCERRORTYPE ErrType, long ErrId, long ErrLine, 
                                short ErrAxis)
  {
    _TDispID _dispid(/* ClearError */ DISPID(7));
    TAutoArgs<6> _args;
    _args[1] = Control /*[VT_I4:0]*/;
    _args[2] = (int)ErrMode /*[VT_USERDEFINED:0]*/;
    _args[3] = (int)ErrType /*[VT_USERDEFINED:0]*/;
    _args[4] = ErrId /*[VT_I4:0]*/;
    _args[5] = ErrLine /*[VT_I4:0]*/;
    _args[6] = ErrAxis /*[VT_I2:0]*/;
    return OleFunction(_dispid, _args);
  }

  HRESULT __fastcall DataReady(long Control)
  {
    _TDispID _dispid(/* DataReady */ DISPID(8));
    TAutoArgs<1> _args;
    _args[1] = Control /*[VT_I4:0]*/;
    return OleFunction(_dispid, _args);
  }


};
#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMIPmacDevice
// Interface: IPmacDevice
// *********************************************************************//
template <class T /* IPmacDevice */ >
class TCOMIPmacDeviceT : public TComInterface<IPmacDevice>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIPmacDeviceT() {}
  TCOMIPmacDeviceT(IPmacDevice *intf, bool addRef = false) : TComInterface<IPmacDevice>(intf, addRef) {}
  TCOMIPmacDeviceT(const TCOMIPmacDeviceT& src) : TComInterface<IPmacDevice>(src) {}
  TCOMIPmacDeviceT& operator=(const TCOMIPmacDeviceT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Open(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall Close(long dwDevice/*[in]*/);
  HRESULT         __fastcall DataStart(long dwDevice/*[in]*/, long resolution/*[in]*/, 
                                       long period/*[in]*/);
  HRESULT         __fastcall DataStop(long dwDevice/*[in]*/);
  HRESULT         __fastcall DataCollect(long dwDevice/*[in]*/, VARIANT* pvArray/*[in,out]*/, 
                                         VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRBackGroundVar(long dwDevice/*[in]*/, VARIANT_BOOL bOn/*[in]*/);
  HRESULT         __fastcall DPRAddressRange(long dwDevice/*[in]*/, VARIANT_BOOL bUpper/*[in]*/, 
                                             VARIANT_BOOL bPC/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall GetPmacType(long dwDevice/*[in]*/, 
                                         Pcommserverlib_tlb::DEVPMACTYPE* pVal/*[out]*/);
  HRESULT         __fastcall DPRVarBufRemove(long dwDevice/*[in]*/, long index/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRVarBufRead(long dwDevice/*[in]*/, long h/*[in]*/, 
                                           long entryNum/*[in]*/, VARIANT* pVal/*[in,out]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRGetFloat(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                         float* pVal/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRGetLong(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                        long* pVal/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRVarBufInit(long dwDevice/*[in]*/, VARIANT vAddressArray/*[in]*/, 
                                           VARIANT vTypeArray/*[in]*/, long* pHandle/*[out]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRSetFloat(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                         float newVal/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRSetLong(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                        long newVal/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRVarBufWrite(long dwDevice/*[in]*/, VARIANT vData/*[in]*/, 
                                            VARIANT vAddresses/*[in]*/, VARIANT vTypes/*[in]*/, 
                                            long* pWritten/*[out]*/);
  HRESULT         __fastcall DPRFloat(__int64 d/*[in]*/, double scale/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall GetRomVersion(long dwDevice/*[in]*/, BSTR* pVal/*[out]*/);
  HRESULT         __fastcall GetRomDate(long dwDevice/*[in]*/, BSTR* pVal/*[out]*/);
  HRESULT         __fastcall GetPmacLocation(long dwDevice/*[in]*/, 
                                             Pcommserverlib_tlb::DEVLOCATIONTYPE* pVal/*[out]*/);
  HRESULT         __fastcall GetResponse(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                         BSTR* pAnswer/*[out]*/);
  HRESULT         __fastcall SelectDevice(long hWindow/*[in]*/, long* pDeviceNumber/*[out]*/, 
                                          VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall get_DPRSize(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_DPRSize(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_DPRAvailable(long dwDevice/*[in]*/, 
                                              VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DPRAvailable(long dwDevice/*[in]*/);
  HRESULT         __fastcall SetChecksums(long dwDevice/*[in]*/, VARIANT_BOOL bActive/*[in]*/);
  HRESULT         __fastcall GetControlResponse(long dwDevice/*[in]*/, short question/*[in]*/, 
                                                BSTR* pAnswer/*[out]*/);
  HRESULT         __fastcall get_LastCommError(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_LastCommError(long dwDevice/*[in]*/);
  HRESULT         __fastcall GetLastCommErrorStr(long dwDevice/*[in]*/, BSTR* pVal/*[out]*/);
  HRESULT         __fastcall GetMacroIVariableLong(long dwDevice/*[in]*/, long node/*[in]*/, 
                                                   long num/*[in]*/, long def/*[in]*/, 
                                                   long* pVal/*[out]*/);
  HRESULT         __fastcall get_DoChecksums(long dwDevice/*[in]*/, 
                                             VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DoChecksums(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_DoChecksums(long dwDevice/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall GetIVariableLong(long dwDevice/*[in]*/, long num/*[in]*/, 
                                              long def/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall GetIVariableDouble(long dwDevice/*[in]*/, long num/*[in]*/, 
                                                double def/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall SetIVariableLong(long dwDevice/*[in]*/, long num/*[in]*/, 
                                              long newVal/*[in]*/);
  HRESULT         __fastcall SetIVariableDouble(long dwDevice/*[in]*/, long num/*[in]*/, 
                                                double newVal/*[in]*/);
  HRESULT         __fastcall GetAsciiComm(long dwDevice/*[in]*/, 
                                          Pcommserverlib_tlb::DEVASCIIMODE* pVal/*[out]*/);
  HRESULT         __fastcall SetAsciiComm(long dwDevice/*[in]*/, 
                                          Pcommserverlib_tlb::DEVASCIIMODE newVal/*[in]*/);
  HRESULT         __fastcall GetVariableLong(long dwDevice/*[in]*/, short ch/*[in]*/, 
                                             long num/*[in]*/, long def/*[in]*/, long* pVal/*[out]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetVariableDouble(long dwDevice/*[in]*/, short ch/*[in]*/, 
                                               long num/*[in]*/, double def/*[in]*/, 
                                               double* pVal/*[out]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SetVariableLong(long dwDevice/*[in]*/, short ch/*[in]*/, 
                                             long num/*[in]*/, long newVal/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SetVariableDouble(long dwDevice/*[in]*/, short ch/*[in]*/, 
                                               long num/*[in]*/, double newVal/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall get_InBootStrapMode(long dwDevice/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_InBootStrapMode(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_MotionBufferOpen(long dwDevice/*[in]*/, 
                                                  VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotionBufferOpen(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_RotaryBufferOpen(long dwDevice/*[in]*/, 
                                                  VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RotaryBufferOpen(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_IsTurbo(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsTurbo(long dwDevice/*[in]*/);
  HRESULT         __fastcall RestoreLinkList(BSTR firmwareVersion/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall BackupLinkList(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SetCriticalIVars(long dwDevice/*[in]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetLocAndEnum(long dwDevice/*[in]*/, long* pLoc/*[out]*/, 
                                           long* pEnum/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetProgramInfo(long dwDevice/*[in]*/, VARIANT_BOOL bPlc/*[in]*/, 
                                            long num/*[in]*/, long* pSAdr/*[out]*/, 
                                            long* pFAdr/*[out]*/);
  HRESULT         __fastcall DownloadFile(long dwDevice/*[in]*/, BSTR filePath/*[in]*/);
  HRESULT         __fastcall AbortDownload(long dwDevice/*[in]*/);
  HRESULT         __fastcall DownloadFirmwareFile(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                                                  VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall Download(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                                      VARIANT_BOOL bMacro/*[in]*/, VARIANT_BOOL bMap/*[in]*/, 
                                      VARIANT_BOOL bLog/*[in]*/, VARIANT_BOOL bDnld/*[in]*/, 
                                      VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall get_Downloading(long dwDevice/*[in]*/, 
                                             VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Downloading(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_MaxDownloadErrors(long* pVal/*[out,retval]*/);
  long            __fastcall get_MaxDownloadErrors(void);
  HRESULT         __fastcall set_MaxDownloadErrors(long pVal/*[in]*/);
  HRESULT         __fastcall CompilePLCC(long dwDevice/*[in]*/, BSTR inFilePath/*[in]*/, 
                                         BSTR outFilePath/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SendCommand(long dwDevice/*[in]*/, BSTR cmd/*[in]*/, 
                                         long* pstatus/*[out]*/);
  HRESULT         __fastcall GetPlcStatus(long dwDevice/*[in]*/, long* pNumPlc/*[out]*/, 
                                          long* pNumPlcc/*[out]*/, long* pI5/*[out]*/);
  HRESULT         __fastcall GetFirstPlcc(long dwDevice/*[in]*/, VARIANT_BOOL* pbLoaded/*[out]*/, 
                                          VARIANT_BOOL* pbEnabled/*[out]*/, long* pStartAdr/*[out]*/, 
                                          long* pLastAdr/*[out]*/, long* pSize/*[out]*/, 
                                          VARIANT_BOOL* pbMore/*[out]*/);
  HRESULT         __fastcall GetNextPlcc(long dwDevice/*[in]*/, VARIANT_BOOL* pbLoaded/*[out]*/, 
                                         VARIANT_BOOL* pbEnabled/*[out]*/, long* pStartAdr/*[out]*/, 
                                         long* pLastAdr/*[out]*/, long* pSize/*[out]*/, 
                                         VARIANT_BOOL* pbMore/*[out]*/);
  HRESULT         __fastcall GetFirstPlc(long dwDevice/*[in]*/, VARIANT_BOOL* pbEnabled/*[out]*/, 
                                         long* pStartAdr/*[out]*/, long* pLastAdr/*[out]*/, 
                                         long* pSize/*[out]*/, VARIANT_BOOL* pbMore/*[out]*/);
  HRESULT         __fastcall GetNextPlc(long dwDevice/*[in]*/, VARIANT_BOOL* pbEnabled/*[out]*/, 
                                        long* pStartAdr/*[out]*/, long* pLastAdr/*[out]*/, 
                                        long* pSize/*[out]*/, VARIANT_BOOL* pbMore/*[out]*/);
  HRESULT         __fastcall get_IsAnyPlcRunning(long dwDevice/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsAnyPlcRunning(long dwDevice/*[in]*/);
  HRESULT         __fastcall GetGlobalStatus(long dwDevice/*[in]*/, long* pStatusX/*[out]*/, 
                                             long* pStatusY/*[out]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetCoordStatus(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                            long* pStatusX/*[out]*/, long* pStatusY/*[out]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetMotorStatus(long dwDevice/*[in]*/, long lMotor/*[in]*/, 
                                            long* pStatusX/*[out]*/, long* pStatusY/*[out]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall get_SysServoError(long dwDevice/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SysServoError(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_SysReEntryError(long dwDevice/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SysReEntryError(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_SysMemChecksumError(long dwDevice/*[in]*/, 
                                                     VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SysMemChecksumError(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_SysPromChecksumError(long dwDevice/*[in]*/, 
                                                      VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SysPromChecksumError(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_SysInposition(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SysInposition(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_SysWarnFError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SysWarnFError(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_SysFatalFError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SysFatalFError(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_SysRuntimeError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SysRuntimeError(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_SysCircleRadError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                   VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SysCircleRadError(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_SysAmpFaultError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                  VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SysAmpFaultError(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall GetCommandedPos(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                             double scale/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall GetPosition(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                         double scale/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall GetNetActualPosition(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                  double scale/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall GetFollowError(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                            double scale/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall GetVelocity(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                         double scale/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall GetMasterPos(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                          double scale/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall GetCompensationPos(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                double scale/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall GetTargetPos(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                          double scale/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall GetBiasPos(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                        double scale/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall GetProgExecPoint(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                              long* pVal/*[out]*/);
  HRESULT         __fastcall GetRotBufFull(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                           VARIANT_BOOL* pVal/*[out]*/);
  HRESULT         __fastcall get_ProgramRunning(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ProgramRunning(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_ProgramStepping(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ProgramStepping(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_ProgramContMotion(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                   VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ProgramContMotion(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_ProgramContRequest(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                    VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ProgramContRequest(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_ProgramRemaining(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                  long* pVal/*[out,retval]*/);
  long            __fastcall get_ProgramRemaining(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_MotionBufOpen(long dwDevice/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotionBufOpen(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_ProgramFeedMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ProgramFeedMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_MotorAmpEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorAmpEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorWarnFError(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorWarnFError(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorFatalFError(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                  VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorFatalFError(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorAmpFault(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorAmpFault(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorOnPositionLimit(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                      VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorOnPositionLimit(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorHomeComplete(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                   VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorHomeComplete(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorInPosition(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorInPosition(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_TimRemInMove(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                              long* pVal/*[out,retval]*/);
  long            __fastcall get_TimRemInMove(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_TimeRemInTATS(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                               long* pVal/*[out,retval]*/);
  long            __fastcall get_TimeRemInTATS(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_MotorDataBlockError(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                     VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorDataBlockError(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorPhased(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                             VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorPhased(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                              VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorHandwheelEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                       VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorHandwheelEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorOpenLoop(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorOpenLoop(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorOnNegLimit(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorOnNegLimit(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorOnPosLimit(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorOnPosLimit(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall SetJogReturn(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall GetWhyMotorNotMoving(long dwDevice/*[in]*/, long motor/*[in]*/, 
                                                  long* pVal/*[out]*/);
  HRESULT         __fastcall GetWhyMotorNotMovingStr(long err/*[in]*/, BSTR* pVal/*[in,out]*/);
  HRESULT         __fastcall GetWhyCSNotMoving(long dwDevice/*[in]*/, long cs/*[in]*/, 
                                               long* pVal/*[out]*/);
  HRESULT         __fastcall GetWhyCSNotMovingStr(long err/*[in]*/, BSTR* pVal/*[in,out]*/);
  HRESULT         __fastcall get_BufferOpen(long dwDevice/*[in]*/, 
                                            VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BufferOpen(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_GatherPeriod(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_GatherPeriod(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_GatherPeriod(long dwDevice/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_GatherEnabled(long dwDevice/*[in]*/, long num/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GatherEnabled(long dwDevice/*[in]*/, long num/*[in]*/);
  HRESULT         __fastcall set_GatherEnabled(long dwDevice/*[in]*/, long num/*[in]*/, 
                                               VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_GatherMode(long dwDevice/*[in]*/, 
                                            Pcommserverlib_tlb::DEVGATMODE* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::DEVGATMODE __fastcall get_GatherMode(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_GatherMode(long dwDevice/*[in]*/, 
                                            Pcommserverlib_tlb::DEVGATMODE pVal/*[in]*/);
  HRESULT         __fastcall get_GatherSampleTime(long dwDevice/*[in]*/, 
                                                  double* pVal/*[out,retval]*/);
  double          __fastcall get_GatherSampleTime(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_GatherSampleTime(long dwDevice/*[in]*/, double pVal/*[in]*/);
  HRESULT         __fastcall GetNumGatherSources(long dwDevice/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall GetNumGatherSamples(long dwDevice/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall SetGather(long dwDevice/*[in]*/, long num/*[in]*/, BSTR str/*[in]*/, 
                                       VARIANT_BOOL bEnable/*[in]*/, 
                                       VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SetQuickGather(long dwDevice/*[in]*/, long lComMask/*[in]*/, 
                                            long lEncMask/*[in]*/, long lDacMask/*[in]*/, 
                                            long lCurMask/*[in]*/, VARIANT_BOOL bEnable/*[in]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SetQuickGatherWithDirectCurrent(long dwDevice/*[in]*/, 
                                                             long lComMask/*[in]*/, 
                                                             long lEncMask/*[in]*/, 
                                                             long lDacMask/*[in]*/, 
                                                             long lCurMask/*[in]*/, 
                                                             VARIANT_BOOL bEnable/*[in]*/, 
                                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetGather(long dwDevice/*[in]*/, long num/*[in]*/, 
                                       BSTR* pStr/*[in,out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall ClearGather(long dwDevice/*[in]*/);
  HRESULT         __fastcall InitGather(long dwDevice/*[in]*/, long size/*[in]*/, 
                                        double msec/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall ClearGatherData(long dwDevice/*[in]*/);
  HRESULT         __fastcall CollectGatherData(long dwDevice/*[in]*/, long* pSources/*[out]*/, 
                                               long* pSamples/*[out]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetGatherSamples(long dwDevice/*[in]*/, long sourceNum/*[in]*/, 
                                              VARIANT* pVariant/*[in,out]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetGatherPoint(long dwDevice/*[in]*/, long sourceNum/*[in]*/, 
                                            long sampleNum/*[in]*/, double* pVal/*[out]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall StartGather(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall StopGather(long dwDevice/*[in]*/);
  HRESULT         __fastcall InitPlotGather(long dwDevice/*[in]*/, long size/*[in]*/, 
                                            long period/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall ReadGatherFile(long dwDevice/*[in]*/, BSTR bsFilePath/*[in]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall WriteGatherFile(long dwDevice/*[in]*/, BSTR bsFilePath/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall strtod48f(BSTR str/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall strtod48l(BSTR str/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall strtod24(BSTR str/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall strtod32dp(BSTR str/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall strto32f(BSTR str/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall UploadMacroConfig(long dwDevice/*[in]*/, BSTR bsFilePath/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DownloadCurrentFeedbackTest(long dwDevice/*[in]*/, short mtr/*[in]*/, 
                                                         double pwmDutyCycle/*[in]*/, 
                                                         short pwmFreq/*[in]*/, 
                                                         VARIANT_BOOL bMacro/*[in]*/, 
                                                         VARIANT_BOOL bUltra/*[in]*/, 
                                                         VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall ReadResultsFromCurrentFeedbackTest(long dwDevice/*[in]*/, 
                                                                short mtr/*[in]*/, 
                                                                long* pVal/*[out]*/);
  HRESULT         __fastcall DownloadVoltageSixStepTest(long dwDevice/*[in]*/, short mtr/*[in]*/, 
                                                        double pwmDutyCycle/*[in]*/, 
                                                        VARIANT_BOOL bMacro/*[in]*/, 
                                                        VARIANT_BOOL bUltra/*[in]*/, 
                                                        VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall ReadResultsFromSixStepTest(long dwDevice/*[in]*/, 
                                                        VARIANT_BOOL bSipFirstStep/*[in]*/, 
                                                        VARIANT* pvStepArray/*[in,out]*/, 
                                                        long* pResult/*[out]*/);
  HRESULT         __fastcall DownloadCurrentSixStepTest(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                        double pwmDutyCycle/*[in]*/, 
                                                        VARIANT_BOOL bMacro/*[in]*/, 
                                                        VARIANT_BOOL bUltra/*[in]*/, 
                                                        VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DownloadOpenLoopTest(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                  short magnitude/*[in]*/, short time/*[in]*/, 
                                                  short reps/*[in]*/, 
                                                  VARIANT_BOOL bGatherCurrents/*[in]*/, 
                                                  VARIANT_BOOL bMacro/*[in]*/, 
                                                  VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DownloadOpenLoopTest1(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                   short magnitude/*[in]*/, short time/*[in]*/, 
                                                   short reps/*[in]*/, 
                                                   VARIANT_BOOL bGatherCurrents/*[in]*/, 
                                                   VARIANT_BOOL bMacro/*[in]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DownloadVelLimitPLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                 long maxspd/*[in]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DownloadPosLimitPLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DownloadUVWSixStepTest(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                    double pwmDutyCycle/*[in]*/, 
                                                    VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall ReadResultsFromUVWSixStepTest(long dwDevice/*[in]*/, 
                                                           VARIANT* pvArray/*[in,out]*/, 
                                                           long* pResult/*[out]*/);
  HRESULT         __fastcall SetIVarForFeedback(long dwDevice/*[in]*/, short ivar/*[in]*/, 
                                                long address/*[in]*/, 
                                                Pcommserverlib_tlb::DEVFEEDBACKTYPE fbType/*[in]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DownloadAndRunRoughPhasePLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                         VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall CreateIncrementalFinePhasePLC(long dwDevice/*[in]*/, 
                                                           BSTR filePath/*[in]*/, 
                                                           short PLCNumber/*[in]*/, 
                                                           short motor/*[in]*/, 
                                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DoACurrentLoopStep(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                short dwellTime/*[in]*/, long magnitude/*[in]*/, 
                                                VARIANT_BOOL bAutoTune/*[in]*/, 
                                                BSTR* pbsCTSCurrent/*[out]*/, 
                                                double pwmDutyCycle/*[in]*/, short divisor/*[in]*/, 
                                                VARIANT_BOOL bUltra/*[in]*/);
  HRESULT         __fastcall DoACurrentLoopStepBrush(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                     short dwellTime/*[in]*/, long magnitude/*[in]*/, 
                                                     VARIANT_BOOL bAutoTune/*[in]*/, 
                                                     BSTR* pbsCTSCurrent/*[out]*/, 
                                                     double pwmDutyCycle/*[in]*/, 
                                                     short divisor/*[in]*/, 
                                                     VARIANT_BOOL bUltra/*[in]*/);
  HRESULT         __fastcall DoAPositionLoopStep(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                 short stepSize/*[in]*/, short stepTime/*[in]*/, 
                                                 VARIANT_BOOL bBiDirectional/*[in]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DoAParabolicMove(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                              long stepSize/*[in]*/, short stepTime/*[in]*/, 
                                              VARIANT_BOOL bBiDirectional/*[in]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DoAGantryPositionLoopStep(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                       short motor2/*[in]*/, short stepSize/*[in]*/, 
                                                       short stepTime/*[in]*/, 
                                                       VARIANT_BOOL bBiDirectional/*[in]*/, 
                                                       VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DoAGantryParabolicMove(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                    short motor2/*[in]*/, long stepSize/*[in]*/, 
                                                    short stepTime/*[in]*/, 
                                                    VARIANT_BOOL bBiDirectional/*[in]*/, 
                                                    VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DoAGantryParabolic(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                short motor2/*[in]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall ConvertWordToStringFloat(BSTR word/*[in]*/, BSTR* pVal/*[out]*/);
  HRESULT         __fastcall ConvertWordToShort(BSTR word/*[in]*/, short offset/*[in]*/, 
                                                short* pVal/*[out]*/);
  HRESULT         __fastcall ConvertWordToLong(BSTR word/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall RestoreModifiedIVars(long dwDevice/*[in]*/, short motor/*[in]*/);
  HRESULT         __fastcall CalculateStepStatistics(VARIANT* pvData/*[in,out]*/, 
                                                     long stepSize/*[in]*/, long I10/*[in]*/, 
                                                     long I19/*[in]*/, BSTR* pbsRiseTime/*[out]*/, 
                                                     BSTR* pbsPeakTime/*[out]*/, 
                                                     BSTR* pbsNatFreq/*[out]*/, 
                                                     BSTR* pbsOvershoot/*[out]*/, 
                                                     BSTR* pbsDamping/*[out]*/, 
                                                     BSTR* pbsSettleTime/*[out]*/);
  HRESULT         __fastcall LowPassFilterTheData(VARIANT* pvData/*[in,out]*/, 
                                                  BSTR bsCurrent/*[in]*/);
  HRESULT         __fastcall DifferentiateTheData(VARIANT* pvData/*[in,out]*/, long I10/*[in]*/, 
                                                  long I19/*[in]*/, long* pMinVal/*[out]*/, 
                                                  long* pMaxVal/*[out]*/);
  HRESULT         __fastcall DownloadAutoTuningPLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                   VARIANT_BOOL bCurrentLoop/*[in]*/, 
                                                   VARIANT_BOOL bBypassJog/*[in]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DownloadGantryAutoTuningPLCP1(long dwDevice/*[in]*/, 
                                                           short motor/*[in]*/, short motor2/*[in]*/, 
                                                           VARIANT_BOOL bCurrentLoop/*[in]*/, 
                                                           VARIANT_BOOL bBypassJog/*[in]*/, 
                                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DownloadGantryAutoTuningPLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                         short motor2/*[in]*/, 
                                                         VARIANT_BOOL bCurrentLoop/*[in]*/, 
                                                         VARIANT_BOOL bBypassJog/*[in]*/, 
                                                         double MaxTravel/*[in]*/, long time/*[in]*/, 
                                                         VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall MagEstimation(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SlopeEstimation(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SetCurrentGather(long dwDevice/*[in]*/, long mask/*[in]*/, 
                                              VARIANT_BOOL bEnable/*[in]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DownloadOpenLoopTestForPMAC1(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                          short magnitude/*[in]*/, 
                                                          short time/*[in]*/, short reps/*[in]*/, 
                                                          VARIANT_BOOL bGatherCurrents/*[in]*/, 
                                                          VARIANT_BOOL bMacro/*[in]*/, 
                                                          VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetMacroNodes(long dwDevice/*[in]*/, long* pNumMacroStations/*[out]*/, 
                                           long* pNumActiveNodes/*[out]*/);
  HRESULT         __fastcall GetMacroNodeInfo(long dwDevice/*[in]*/, long modeNum/*[in]*/, 
                                              VARIANT_BOOL* pbEnabled/*[out]*/, 
                                              VARIANT_BOOL* pbIsIONode/*[out]*/, long* pID/*[out]*/);
  HRESULT         __fastcall SetMacroIVariableString(long dwDevice/*[in]*/, long node/*[in]*/, 
                                                     long num/*[in]*/, BSTR bsMIVarValue/*[in]*/, 
                                                     VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetMacroIVariableString(long dwDevice/*[in]*/, long node/*[in]*/, 
                                                     long num/*[in]*/, BSTR bsDefault/*[in]*/, 
                                                     BSTR* pbsVal/*[out]*/);
  HRESULT         __fastcall GetCommandLogging(long dwDevice/*[in]*/, VARIANT_BOOL* pbON/*[out]*/);
  HRESULT         __fastcall SetCommandLogging(long dwDevice/*[in]*/, VARIANT_BOOL bOn/*[in]*/, 
                                               BSTR bsFilePath/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetEnumeration(long dwDevice/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall GetControlValues(long dwDevice/*[in]*/, short ctrlCh/*[in]*/, 
                                              VARIANT* pVariant/*[in,out]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall MultiDownload(long dwDevice/*[in]*/, BSTR outFile/*[in]*/, 
                                           BSTR iniFile/*[in]*/, BSTR userID/*[in]*/, 
                                           VARIANT_BOOL bMacro/*[in]*/, VARIANT_BOOL bMap/*[in]*/, 
                                           VARIANT_BOOL bLog/*[in]*/, VARIANT_BOOL bDnld/*[in]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall AddDownloadFile(long dwDevice/*[in]*/, BSTR iniFile/*[in]*/, 
                                             BSTR userID/*[in]*/, BSTR dlFile/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall RemoveDownloadFile(long dwDevice/*[in]*/, BSTR iniFile/*[in]*/, 
                                                BSTR userID/*[in]*/, BSTR dlFile/*[in]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall RenumberFiles(long dwDevice/*[in]*/, long fileNumber/*[in]*/, 
                                           BSTR iniFile/*[in]*/);
  HRESULT         __fastcall GetVariableStr(long dwDevice/*[in]*/, short ch/*[in]*/, 
                                            long num/*[in]*/, BSTR* pVal/*[out]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRVarBufReadAll(long dwDevice/*[in]*/, long h/*[in]*/, 
                                              VARIANT* pVal/*[in,out]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall UltraLightAnalyze(long dwDevice/*[in]*/, VARIANT* pVal/*[in,out]*/, 
                                               long* pActiveNodes/*[out]*/);
  HRESULT         __fastcall GetPlcStatusStructure(long dwDevice/*[in]*/, VARIANT* pVal/*[in,out]*/, 
                                                   long* pPrograms/*[out]*/);
  HRESULT         __fastcall GetBitValue(BSTR hexStr/*[in]*/, short bit/*[in]*/, 
                                         VARIANT_BOOL* pVal/*[out]*/);
  HRESULT         __fastcall GetNumDeviceKeys(long* pVal/*[out]*/);
  HRESULT         __fastcall DPRGetLongDouble(long dwDevice/*[in]*/, long address/*[in]*/, 
                                              double* pVal/*[out]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRGetFixedDouble(long dwDevice/*[in]*/, long address/*[in]*/, 
                                               double* pVal/*[out]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRGetShort(long dwDevice/*[in]*/, long address/*[in]*/, 
                                         short* pVal/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRSetShort(long dwDevice/*[in]*/, long address/*[in]*/, 
                                         short newVal/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRDWordBitSet(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                            long bit/*[in]*/, VARIANT_BOOL* pVal/*[out]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRResetDWordBit(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                              long bit/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRSetDWordBit(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                            long bit/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetFirmwareType(long dwDevice/*[in]*/, 
                                             Pcommserverlib_tlb::DEVPMACFIRMWARETYPE* pVal/*[out]*/);
  HRESULT         __fastcall GetResponseEx(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                           VARIANT_BOOL bAddLF/*[in]*/, BSTR* pAnswer/*[out]*/, 
                                           long* pstatus/*[out]*/);
  HRESULT         __fastcall DPRVarBufWriteEx(long dwDevice/*[in]*/, VARIANT vData/*[in]*/, 
                                              long* pWritten/*[out]*/);
  HRESULT         __fastcall DPRGetDWordMask(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                             long mask/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall DPRSetDWordMask(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                             long mask/*[in]*/, long Val/*[in]*/);
  HRESULT         __fastcall DPRRotBufRemove(long dwDevice/*[in]*/, long bufnum/*[in]*/);
  HRESULT         __fastcall DPRRotBufInit(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRRotBufClr(long dwDevice/*[in]*/, long bufnum/*[in]*/);
  HRESULT         __fastcall DPRSetRotBuf(long dwDevice/*[in]*/, VARIANT_BOOL on/*[in]*/);
  HRESULT         __fastcall DPRAsciiStrToRotEx(long dwDevice/*[in]*/, BSTR inpstr/*[in]*/, 
                                                long bufnum/*[in]*/, 
                                                VARIANT_BOOL bSendRemaining/*[in]*/, 
                                                long* pstatus/*[out]*/);
  HRESULT         __fastcall DPRAsciiStrToRot(long dwDevice/*[in]*/, BSTR inpstr/*[in]*/, 
                                              long bufnum/*[in]*/, long* pstatus/*[out]*/);
  HRESULT         __fastcall GetProgramMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                            Pcommserverlib_tlb::DEVPROGRAMMODE* pVal/*[out]*/);
  HRESULT         __fastcall GetProgramMotionMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                  Pcommserverlib_tlb::DEVMOTIONMODE* pVal/*[out]*/);
  HRESULT         __fastcall MapDeviceNumToEnum(long location/*[in]*/, long enumeration/*[in]*/, 
                                                long* pDeviceNumber/*[out]*/);
  HRESULT         __fastcall MapLocAndEnumFromDeviceNum(long dwDevice/*[in]*/, 
                                                        long* pLocation/*[out]*/, 
                                                        long* pEnumeration/*[out]*/);
  HRESULT         __fastcall GetFeedRateAndMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                double* pRate/*[out]*/, VARIANT_BOOL* pMode/*[out]*/);
  HRESULT         __fastcall GetMotorMotionMode(long dwDevice/*[in]*/, long dwMotor/*[in]*/, 
                                                Pcommserverlib_tlb::DEVMOTION* pVal/*[out]*/);
  HRESULT         __fastcall CommandLog(long dwDevice/*[in]*/, BSTR bStr/*[in]*/, 
                                        VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRGetMem(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                       long bytes/*[in]*/, VARIANT* pVal/*[in,out]*/, 
                                       VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRSetMem(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                       long bytes/*[in]*/, VARIANT Val/*[in]*/, 
                                       VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetResponseProgress(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                                 VARIANT_BOOL bAddLF/*[in]*/, BSTR* pAnswer/*[out]*/, 
                                                 long* pstatus/*[out]*/);
  HRESULT         __fastcall Abort(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_InterruptsEnabled(long dwDevice/*[in]*/, 
                                                   VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_InterruptsEnabled(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_InterruptsEnabled(long dwDevice/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_InterruptMask(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_InterruptMask(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_InterruptMask(long dwDevice/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall PmacSave(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                      long* pstatus/*[out]*/);
  HRESULT         __fastcall PmacReset(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                       VARIANT_BOOL bAsciiRingComm/*[in]*/, long* pstatus/*[out]*/);
  HRESULT         __fastcall PhaseMotor(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                        long* pStatuss/*[out]*/);
  HRESULT         __fastcall GetControlResponseEx(long dwDevice/*[in]*/, short question/*[in]*/, 
                                                  BSTR* pAnswer/*[out]*/, long* pstatus/*[out]*/);
  HRESULT         __fastcall get_USMonitoringEnabled(long dwDevice/*[in]*/, 
                                                     VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_USMonitoringEnabled(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_USMonitoringEnabled(long dwDevice/*[in]*/, 
                                                     VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_USMonitoringPeriod(long dwDevice/*[in]*/, 
                                                    long* pVal/*[out,retval]*/);
  long            __fastcall get_USMonitoringPeriod(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_USMonitoringPeriod(long dwDevice/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall DPRTest(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall AbortTest(long dwDevice/*[in]*/);
  HRESULT         __fastcall DPRGetMotorRpt(long dwDevice/*[in]*/, long motor/*[in]*/, 
                                            Pcommserverlib_tlb::DEVFGMOTOR* pStruct/*[in,out]*/, 
                                            long* pServo/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRGetMotorRptTurbo(long dwDevice/*[in]*/, long motor/*[in]*/, 
                                                 Pcommserverlib_tlb::DEVFGMOTORTURBO* pStruct/*[in,out]*/, 
                                                 long* pServo/*[out]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRGetCoordRpt(long dwDevice/*[in]*/, long coord/*[in]*/, 
                                            Pcommserverlib_tlb::DEVBGCOORD* pStruct/*[in,out]*/, 
                                            long* pServo/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRGetCoordRptTurbo(long dwDevice/*[in]*/, long coord/*[in]*/, 
                                                 Pcommserverlib_tlb::DEVBGCOORDTURBO* pStruct/*[in,out]*/, 
                                                 long* pServo/*[out]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall get_DPRMotorRptEnabled(long dwDevice/*[in]*/, 
                                                    VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DPRMotorRptEnabled(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_DPRMotorRptEnabled(long dwDevice/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_DPRMotorRptMask(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_DPRMotorRptMask(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_DPRMotorRptMask(long dwDevice/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_DPRMotorRptMSec(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_DPRMotorRptMSec(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_DPRMotorRptMSec(long dwDevice/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_DPRCoordRptEnabled(long dwDevice/*[in]*/, 
                                                    VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DPRCoordRptEnabled(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_DPRCoordRptEnabled(long dwDevice/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_DPRCoordRptMSec(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_DPRCoordRptMSec(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_DPRCoordRptMSec(long dwDevice/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_DPRCoordRptMax(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_DPRCoordRptMax(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_DPRCoordRptMax(long dwDevice/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall UltraLightAnalyzeStruct(long dwDevice/*[in]*/, 
                                                     Pcommserverlib_tlb::DEVULTRALIGHT_INFO* pStruct/*[in,out]*/, 
                                                     long* pActiveNodes/*[out]*/);
  HRESULT         __fastcall GetPlcStatusStruct(long dwDevice/*[in]*/, 
                                                Pcommserverlib_tlb::DEVTOTAL_PLC_STATUS_STRUCT* pStruct/*[in,out]*/, 
                                                long* pPrograms/*[out]*/);
  HRESULT         __fastcall get_DPRTesting(long dwDevice/*[in]*/, 
                                            VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DPRTesting(long dwDevice/*[in]*/);
  HRESULT         __fastcall RawGetResponseEx(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                              VARIANT_BOOL bAddLF/*[in]*/, BSTR* pAnswer/*[out]*/, 
                                              long* pstatus/*[out]*/);
  HRESULT         __fastcall RawGetControlResponseEx(long dwDevice/*[in]*/, short question/*[in]*/, 
                                                     BSTR* pAnswer/*[out]*/, long* pstatus/*[out]*/);
  HRESULT         __fastcall ModBusCommand(long dwDevice/*[in]*/, unsigned_char command/*[in]*/, 
                                           VARIANT* counters/*[out]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall ModbusAvailable(long dwDevice/*[in]*/, unsigned_char command/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRSetupBuffers(unsigned_long dwDevice/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRBackground(long dwDevice/*[in]*/, long on/*[in]*/, 
                                           long period/*[in]*/, long coord/*[in]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall get_DataCollectionEnabled(long dwDevice/*[in]*/, 
                                                       VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DataCollectionEnabled(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_DataCollectionResolution(long dwDevice/*[in]*/, 
                                                          long* pVal/*[out,retval]*/);
  long            __fastcall get_DataCollectionResolution(long dwDevice/*[in]*/);
  HRESULT         __fastcall GetTurboMotorStatusEx(long dwDevice/*[in]*/, long lMotor/*[in]*/, 
                                                   Pcommserverlib_tlb::DEVMSTURBO* pstatus/*[in,out]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetNTMotorStatusEx(long dwDevice/*[in]*/, long lMotor/*[in]*/, 
                                                Pcommserverlib_tlb::DEVMSNONTURBO* pstatus/*[in,out]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetTurboGlobalStatusEx(long dwDevice/*[in]*/, 
                                                    Pcommserverlib_tlb::DEVGSTURBO* pstatus/*[in,out]*/, 
                                                    VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetNTGlobalStatusEx(long dwDevice/*[in]*/, 
                                                 Pcommserverlib_tlb::DEVGSNONTURBO* pstatus/*[in,out]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetTurboCoordinateStatusEx(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                        Pcommserverlib_tlb::DEVCSTURBO* pstatus/*[in,out]*/, 
                                                        VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetNTCoordinateStatusEx(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                     Pcommserverlib_tlb::DEVCSNONTURBO* pstatus/*[in,out]*/, 
                                                     VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DataGather(long dwDevice/*[in]*/, LPSAFEARRAY* pvArray/*[in,out]*/, 
                                        VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall Upload(long dwDevice/*[in]*/, 
                                    Pcommserverlib_tlb::DEVUPLOAD pUpload/*[in]*/, 
                                    BSTR* pData/*[out]*/, long* pstatus/*[out]*/);
  HRESULT         __fastcall ModbusActive(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);

  __property   long            MaxDownloadErrors = {read = get_MaxDownloadErrors, write = set_MaxDownloadErrors};
};
typedef TCOMIPmacDeviceT<IPmacDevice> TCOMIPmacDevice;

// *********************************************************************//
// DispIntf:  IPmacDevice
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8A00B576-9C14-425B-8878-493C91D8DE5C}
// *********************************************************************//
template<class T>
class IPmacDeviceDispT : public TAutoDriver<IPmacDevice>
{
public:
  IPmacDeviceDispT(){}

  IPmacDeviceDispT(IPmacDevice *pintf)
  {
    TAutoDriver<IPmacDevice>::Bind(pintf, false);
  }

  IPmacDeviceDispT(IPmacDevicePtr pintf)
  {
    TAutoDriver<IPmacDevice>::Bind(pintf, true);
  }

  IPmacDeviceDispT& operator=(IPmacDevice *pintf)
  {
    TAutoDriver<IPmacDevice>::Bind(pintf, false);
    return *this;
  }

  IPmacDeviceDispT& operator=(IPmacDevicePtr pintf)
  {
    TAutoDriver<IPmacDevice>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PmacDevice));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PmacDevice);
  }

  HRESULT         __fastcall Open(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall Close(long dwDevice/*[in]*/);
  HRESULT         __fastcall DataStart(long dwDevice/*[in]*/, long resolution/*[in]*/, 
                                       long period/*[in]*/);
  HRESULT         __fastcall DataStop(long dwDevice/*[in]*/);
  HRESULT         __fastcall DataCollect(long dwDevice/*[in]*/, VARIANT* pvArray/*[in,out]*/, 
                                         VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRBackGroundVar(long dwDevice/*[in]*/, VARIANT_BOOL bOn/*[in]*/);
  HRESULT         __fastcall DPRAddressRange(long dwDevice/*[in]*/, VARIANT_BOOL bUpper/*[in]*/, 
                                             VARIANT_BOOL bPC/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall GetPmacType(long dwDevice/*[in]*/, 
                                         Pcommserverlib_tlb::DEVPMACTYPE* pVal/*[out]*/);
  HRESULT         __fastcall DPRVarBufRemove(long dwDevice/*[in]*/, long index/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRVarBufRead(long dwDevice/*[in]*/, long h/*[in]*/, 
                                           long entryNum/*[in]*/, VARIANT* pVal/*[in,out]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRGetFloat(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                         float* pVal/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRGetLong(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                        long* pVal/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRVarBufInit(long dwDevice/*[in]*/, VARIANT vAddressArray/*[in]*/, 
                                           VARIANT vTypeArray/*[in]*/, long* pHandle/*[out]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRSetFloat(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                         float newVal/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRSetLong(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                        long newVal/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRVarBufWrite(long dwDevice/*[in]*/, VARIANT vData/*[in]*/, 
                                            VARIANT vAddresses/*[in]*/, VARIANT vTypes/*[in]*/, 
                                            long* pWritten/*[out]*/);
  HRESULT         __fastcall DPRFloat(__int64 d/*[in]*/, double scale/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall GetRomVersion(long dwDevice/*[in]*/, BSTR* pVal/*[out]*/);
  HRESULT         __fastcall GetRomDate(long dwDevice/*[in]*/, BSTR* pVal/*[out]*/);
  HRESULT         __fastcall GetPmacLocation(long dwDevice/*[in]*/, 
                                             Pcommserverlib_tlb::DEVLOCATIONTYPE* pVal/*[out]*/);
  HRESULT         __fastcall GetResponse(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                         BSTR* pAnswer/*[out]*/);
  HRESULT         __fastcall SelectDevice(long hWindow/*[in]*/, long* pDeviceNumber/*[out]*/, 
                                          VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall get_DPRSize(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_DPRSize(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_DPRAvailable(long dwDevice/*[in]*/, 
                                              VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DPRAvailable(long dwDevice/*[in]*/);
  HRESULT         __fastcall SetChecksums(long dwDevice/*[in]*/, VARIANT_BOOL bActive/*[in]*/);
  HRESULT         __fastcall GetControlResponse(long dwDevice/*[in]*/, short question/*[in]*/, 
                                                BSTR* pAnswer/*[out]*/);
  HRESULT         __fastcall get_LastCommError(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_LastCommError(long dwDevice/*[in]*/);
  HRESULT         __fastcall GetLastCommErrorStr(long dwDevice/*[in]*/, BSTR* pVal/*[out]*/);
  HRESULT         __fastcall GetMacroIVariableLong(long dwDevice/*[in]*/, long node/*[in]*/, 
                                                   long num/*[in]*/, long def/*[in]*/, 
                                                   long* pVal/*[out]*/);
  HRESULT         __fastcall get_DoChecksums(long dwDevice/*[in]*/, 
                                             VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DoChecksums(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_DoChecksums(long dwDevice/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall GetIVariableLong(long dwDevice/*[in]*/, long num/*[in]*/, 
                                              long def/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall GetIVariableDouble(long dwDevice/*[in]*/, long num/*[in]*/, 
                                                double def/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall SetIVariableLong(long dwDevice/*[in]*/, long num/*[in]*/, 
                                              long newVal/*[in]*/);
  HRESULT         __fastcall SetIVariableDouble(long dwDevice/*[in]*/, long num/*[in]*/, 
                                                double newVal/*[in]*/);
  HRESULT         __fastcall GetAsciiComm(long dwDevice/*[in]*/, 
                                          Pcommserverlib_tlb::DEVASCIIMODE* pVal/*[out]*/);
  HRESULT         __fastcall SetAsciiComm(long dwDevice/*[in]*/, 
                                          Pcommserverlib_tlb::DEVASCIIMODE newVal/*[in]*/);
  HRESULT         __fastcall GetVariableLong(long dwDevice/*[in]*/, short ch/*[in]*/, 
                                             long num/*[in]*/, long def/*[in]*/, long* pVal/*[out]*/
                                             , VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetVariableDouble(long dwDevice/*[in]*/, short ch/*[in]*/, 
                                               long num/*[in]*/, double def/*[in]*/, 
                                               double* pVal/*[out]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SetVariableLong(long dwDevice/*[in]*/, short ch/*[in]*/, 
                                             long num/*[in]*/, long newVal/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SetVariableDouble(long dwDevice/*[in]*/, short ch/*[in]*/, 
                                               long num/*[in]*/, double newVal/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall get_InBootStrapMode(long dwDevice/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_InBootStrapMode(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_MotionBufferOpen(long dwDevice/*[in]*/, 
                                                  VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotionBufferOpen(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_RotaryBufferOpen(long dwDevice/*[in]*/, 
                                                  VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_RotaryBufferOpen(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_IsTurbo(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsTurbo(long dwDevice/*[in]*/);
  HRESULT         __fastcall RestoreLinkList(BSTR firmwareVersion/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall BackupLinkList(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SetCriticalIVars(long dwDevice/*[in]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetLocAndEnum(long dwDevice/*[in]*/, long* pLoc/*[out]*/, 
                                           long* pEnum/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetProgramInfo(long dwDevice/*[in]*/, VARIANT_BOOL bPlc/*[in]*/, 
                                            long num/*[in]*/, long* pSAdr/*[out]*/, 
                                            long* pFAdr/*[out]*/);
  HRESULT         __fastcall DownloadFile(long dwDevice/*[in]*/, BSTR filePath/*[in]*/);
  HRESULT         __fastcall AbortDownload(long dwDevice/*[in]*/);
  HRESULT         __fastcall DownloadFirmwareFile(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                                                  VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall Download(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                                      VARIANT_BOOL bMacro/*[in]*/, VARIANT_BOOL bMap/*[in]*/, 
                                      VARIANT_BOOL bLog/*[in]*/, VARIANT_BOOL bDnld/*[in]*/, 
                                      VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall get_Downloading(long dwDevice/*[in]*/, 
                                             VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_Downloading(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_MaxDownloadErrors(long* pVal/*[out,retval]*/);
  long            __fastcall get_MaxDownloadErrors(void);
  HRESULT         __fastcall set_MaxDownloadErrors(long pVal/*[in]*/);
  HRESULT         __fastcall CompilePLCC(long dwDevice/*[in]*/, BSTR inFilePath/*[in]*/, 
                                         BSTR outFilePath/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SendCommand(long dwDevice/*[in]*/, BSTR cmd/*[in]*/, 
                                         long* pstatus/*[out]*/);
  HRESULT         __fastcall GetPlcStatus(long dwDevice/*[in]*/, long* pNumPlc/*[out]*/, 
                                          long* pNumPlcc/*[out]*/, long* pI5/*[out]*/);
  HRESULT         __fastcall GetFirstPlcc(long dwDevice/*[in]*/, VARIANT_BOOL* pbLoaded/*[out]*/, 
                                          VARIANT_BOOL* pbEnabled/*[out]*/, long* pStartAdr/*[out]*/
                                          , long* pLastAdr/*[out]*/, long* pSize/*[out]*/, 
                                          VARIANT_BOOL* pbMore/*[out]*/);
  HRESULT         __fastcall GetNextPlcc(long dwDevice/*[in]*/, VARIANT_BOOL* pbLoaded/*[out]*/, 
                                         VARIANT_BOOL* pbEnabled/*[out]*/, long* pStartAdr/*[out]*/
                                         , long* pLastAdr/*[out]*/, long* pSize/*[out]*/, 
                                         VARIANT_BOOL* pbMore/*[out]*/);
  HRESULT         __fastcall GetFirstPlc(long dwDevice/*[in]*/, VARIANT_BOOL* pbEnabled/*[out]*/, 
                                         long* pStartAdr/*[out]*/, long* pLastAdr/*[out]*/, 
                                         long* pSize/*[out]*/, VARIANT_BOOL* pbMore/*[out]*/);
  HRESULT         __fastcall GetNextPlc(long dwDevice/*[in]*/, VARIANT_BOOL* pbEnabled/*[out]*/, 
                                        long* pStartAdr/*[out]*/, long* pLastAdr/*[out]*/, 
                                        long* pSize/*[out]*/, VARIANT_BOOL* pbMore/*[out]*/);
  HRESULT         __fastcall get_IsAnyPlcRunning(long dwDevice/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsAnyPlcRunning(long dwDevice/*[in]*/);
  HRESULT         __fastcall GetGlobalStatus(long dwDevice/*[in]*/, long* pStatusX/*[out]*/, 
                                             long* pStatusY/*[out]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetCoordStatus(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                            long* pStatusX/*[out]*/, long* pStatusY/*[out]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetMotorStatus(long dwDevice/*[in]*/, long lMotor/*[in]*/, 
                                            long* pStatusX/*[out]*/, long* pStatusY/*[out]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall get_SysServoError(long dwDevice/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SysServoError(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_SysReEntryError(long dwDevice/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SysReEntryError(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_SysMemChecksumError(long dwDevice/*[in]*/, 
                                                     VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SysMemChecksumError(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_SysPromChecksumError(long dwDevice/*[in]*/, 
                                                      VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SysPromChecksumError(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_SysInposition(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SysInposition(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_SysWarnFError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SysWarnFError(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_SysFatalFError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SysFatalFError(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_SysRuntimeError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SysRuntimeError(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_SysCircleRadError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                   VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SysCircleRadError(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_SysAmpFaultError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                  VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SysAmpFaultError(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall GetCommandedPos(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                             double scale/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall GetPosition(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                         double scale/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall GetNetActualPosition(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                  double scale/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall GetFollowError(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                            double scale/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall GetVelocity(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                         double scale/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall GetMasterPos(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                          double scale/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall GetCompensationPos(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                double scale/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall GetTargetPos(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                          double scale/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall GetBiasPos(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                        double scale/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall GetProgExecPoint(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                              long* pVal/*[out]*/);
  HRESULT         __fastcall GetRotBufFull(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                           VARIANT_BOOL* pVal/*[out]*/);
  HRESULT         __fastcall get_ProgramRunning(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ProgramRunning(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_ProgramStepping(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ProgramStepping(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_ProgramContMotion(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                   VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ProgramContMotion(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_ProgramContRequest(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                    VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ProgramContRequest(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_ProgramRemaining(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                  long* pVal/*[out,retval]*/);
  long            __fastcall get_ProgramRemaining(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_MotionBufOpen(long dwDevice/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotionBufOpen(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_ProgramFeedMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ProgramFeedMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_MotorAmpEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorAmpEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorWarnFError(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorWarnFError(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorFatalFError(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                  VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorFatalFError(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorAmpFault(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorAmpFault(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorOnPositionLimit(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                      VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorOnPositionLimit(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorHomeComplete(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                   VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorHomeComplete(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorInPosition(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorInPosition(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_TimRemInMove(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                              long* pVal/*[out,retval]*/);
  long            __fastcall get_TimRemInMove(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_TimeRemInTATS(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                               long* pVal/*[out,retval]*/);
  long            __fastcall get_TimeRemInTATS(long dwDevice/*[in]*/, long dwCoord/*[in]*/);
  HRESULT         __fastcall get_MotorDataBlockError(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                     VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorDataBlockError(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorPhased(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                             VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorPhased(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                              VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorHandwheelEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                       VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorHandwheelEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorOpenLoop(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorOpenLoop(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorOnNegLimit(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorOnNegLimit(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall get_MotorOnPosLimit(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                                 VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MotorOnPosLimit(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall SetJogReturn(long dwDevice/*[in]*/, long mtr/*[in]*/);
  HRESULT         __fastcall GetWhyMotorNotMoving(long dwDevice/*[in]*/, long motor/*[in]*/, 
                                                  long* pVal/*[out]*/);
  HRESULT         __fastcall GetWhyMotorNotMovingStr(long err/*[in]*/, BSTR* pVal/*[in,out]*/);
  HRESULT         __fastcall GetWhyCSNotMoving(long dwDevice/*[in]*/, long cs/*[in]*/, 
                                               long* pVal/*[out]*/);
  HRESULT         __fastcall GetWhyCSNotMovingStr(long err/*[in]*/, BSTR* pVal/*[in,out]*/);
  HRESULT         __fastcall get_BufferOpen(long dwDevice/*[in]*/, 
                                            VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BufferOpen(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_GatherPeriod(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_GatherPeriod(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_GatherPeriod(long dwDevice/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_GatherEnabled(long dwDevice/*[in]*/, long num/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_GatherEnabled(long dwDevice/*[in]*/, long num/*[in]*/);
  HRESULT         __fastcall set_GatherEnabled(long dwDevice/*[in]*/, long num/*[in]*/, 
                                               VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_GatherMode(long dwDevice/*[in]*/, 
                                            Pcommserverlib_tlb::DEVGATMODE* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::DEVGATMODE __fastcall get_GatherMode(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_GatherMode(long dwDevice/*[in]*/, 
                                            Pcommserverlib_tlb::DEVGATMODE pVal/*[in]*/);
  HRESULT         __fastcall get_GatherSampleTime(long dwDevice/*[in]*/, 
                                                  double* pVal/*[out,retval]*/);
  double          __fastcall get_GatherSampleTime(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_GatherSampleTime(long dwDevice/*[in]*/, double pVal/*[in]*/);
  HRESULT         __fastcall GetNumGatherSources(long dwDevice/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall GetNumGatherSamples(long dwDevice/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall SetGather(long dwDevice/*[in]*/, long num/*[in]*/, BSTR str/*[in]*/, 
                                       VARIANT_BOOL bEnable/*[in]*/, 
                                       VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SetQuickGather(long dwDevice/*[in]*/, long lComMask/*[in]*/, 
                                            long lEncMask/*[in]*/, long lDacMask/*[in]*/, 
                                            long lCurMask/*[in]*/, VARIANT_BOOL bEnable/*[in]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SetQuickGatherWithDirectCurrent(long dwDevice/*[in]*/, 
                                                             long lComMask/*[in]*/, 
                                                             long lEncMask/*[in]*/, 
                                                             long lDacMask/*[in]*/, 
                                                             long lCurMask/*[in]*/, 
                                                             VARIANT_BOOL bEnable/*[in]*/, 
                                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetGather(long dwDevice/*[in]*/, long num/*[in]*/, 
                                       BSTR* pStr/*[in,out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall ClearGather(long dwDevice/*[in]*/);
  HRESULT         __fastcall InitGather(long dwDevice/*[in]*/, long size/*[in]*/, 
                                        double msec/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall ClearGatherData(long dwDevice/*[in]*/);
  HRESULT         __fastcall CollectGatherData(long dwDevice/*[in]*/, long* pSources/*[out]*/, 
                                               long* pSamples/*[out]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetGatherSamples(long dwDevice/*[in]*/, long sourceNum/*[in]*/, 
                                              VARIANT* pVariant/*[in,out]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetGatherPoint(long dwDevice/*[in]*/, long sourceNum/*[in]*/, 
                                            long sampleNum/*[in]*/, double* pVal/*[out]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall StartGather(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall StopGather(long dwDevice/*[in]*/);
  HRESULT         __fastcall InitPlotGather(long dwDevice/*[in]*/, long size/*[in]*/, 
                                            long period/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall ReadGatherFile(long dwDevice/*[in]*/, BSTR bsFilePath/*[in]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall WriteGatherFile(long dwDevice/*[in]*/, BSTR bsFilePath/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall strtod48f(BSTR str/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall strtod48l(BSTR str/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall strtod24(BSTR str/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall strtod32dp(BSTR str/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall strto32f(BSTR str/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall UploadMacroConfig(long dwDevice/*[in]*/, BSTR bsFilePath/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DownloadCurrentFeedbackTest(long dwDevice/*[in]*/, short mtr/*[in]*/, 
                                                         double pwmDutyCycle/*[in]*/, 
                                                         short pwmFreq/*[in]*/, 
                                                         VARIANT_BOOL bMacro/*[in]*/, 
                                                         VARIANT_BOOL bUltra/*[in]*/, 
                                                         VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall ReadResultsFromCurrentFeedbackTest(long dwDevice/*[in]*/, 
                                                                short mtr/*[in]*/, 
                                                                long* pVal/*[out]*/);
  HRESULT         __fastcall DownloadVoltageSixStepTest(long dwDevice/*[in]*/, short mtr/*[in]*/, 
                                                        double pwmDutyCycle/*[in]*/, 
                                                        VARIANT_BOOL bMacro/*[in]*/, 
                                                        VARIANT_BOOL bUltra/*[in]*/, 
                                                        VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall ReadResultsFromSixStepTest(long dwDevice/*[in]*/, 
                                                        VARIANT_BOOL bSipFirstStep/*[in]*/, 
                                                        VARIANT* pvStepArray/*[in,out]*/, 
                                                        long* pResult/*[out]*/);
  HRESULT         __fastcall DownloadCurrentSixStepTest(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                        double pwmDutyCycle/*[in]*/, 
                                                        VARIANT_BOOL bMacro/*[in]*/, 
                                                        VARIANT_BOOL bUltra/*[in]*/, 
                                                        VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DownloadOpenLoopTest(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                  short magnitude/*[in]*/, short time/*[in]*/, 
                                                  short reps/*[in]*/, 
                                                  VARIANT_BOOL bGatherCurrents/*[in]*/, 
                                                  VARIANT_BOOL bMacro/*[in]*/, 
                                                  VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DownloadOpenLoopTest1(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                   short magnitude/*[in]*/, short time/*[in]*/, 
                                                   short reps/*[in]*/, 
                                                   VARIANT_BOOL bGatherCurrents/*[in]*/, 
                                                   VARIANT_BOOL bMacro/*[in]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DownloadVelLimitPLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                 long maxspd/*[in]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DownloadPosLimitPLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DownloadUVWSixStepTest(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                    double pwmDutyCycle/*[in]*/, 
                                                    VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall ReadResultsFromUVWSixStepTest(long dwDevice/*[in]*/, 
                                                           VARIANT* pvArray/*[in,out]*/, 
                                                           long* pResult/*[out]*/);
  HRESULT         __fastcall SetIVarForFeedback(long dwDevice/*[in]*/, short ivar/*[in]*/, 
                                                long address/*[in]*/, 
                                                Pcommserverlib_tlb::DEVFEEDBACKTYPE fbType/*[in]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DownloadAndRunRoughPhasePLC(long dwDevice/*[in]*/, short motor/*[in]*/
                                                         , VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall CreateIncrementalFinePhasePLC(long dwDevice/*[in]*/, 
                                                           BSTR filePath/*[in]*/, 
                                                           short PLCNumber/*[in]*/, 
                                                           short motor/*[in]*/, 
                                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DoACurrentLoopStep(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                short dwellTime/*[in]*/, long magnitude/*[in]*/, 
                                                VARIANT_BOOL bAutoTune/*[in]*/, 
                                                BSTR* pbsCTSCurrent/*[out]*/, 
                                                double pwmDutyCycle/*[in]*/, short divisor/*[in]*/, 
                                                VARIANT_BOOL bUltra/*[in]*/);
  HRESULT         __fastcall DoACurrentLoopStepBrush(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                     short dwellTime/*[in]*/, long magnitude/*[in]*/
                                                     , VARIANT_BOOL bAutoTune/*[in]*/, 
                                                     BSTR* pbsCTSCurrent/*[out]*/, 
                                                     double pwmDutyCycle/*[in]*/, 
                                                     short divisor/*[in]*/, 
                                                     VARIANT_BOOL bUltra/*[in]*/);
  HRESULT         __fastcall DoAPositionLoopStep(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                 short stepSize/*[in]*/, short stepTime/*[in]*/, 
                                                 VARIANT_BOOL bBiDirectional/*[in]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DoAParabolicMove(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                              long stepSize/*[in]*/, short stepTime/*[in]*/, 
                                              VARIANT_BOOL bBiDirectional/*[in]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DoAGantryPositionLoopStep(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                       short motor2/*[in]*/, short stepSize/*[in]*/
                                                       , short stepTime/*[in]*/, 
                                                       VARIANT_BOOL bBiDirectional/*[in]*/, 
                                                       VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DoAGantryParabolicMove(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                    short motor2/*[in]*/, long stepSize/*[in]*/, 
                                                    short stepTime/*[in]*/, 
                                                    VARIANT_BOOL bBiDirectional/*[in]*/, 
                                                    VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DoAGantryParabolic(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                short motor2/*[in]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall ConvertWordToStringFloat(BSTR word/*[in]*/, BSTR* pVal/*[out]*/);
  HRESULT         __fastcall ConvertWordToShort(BSTR word/*[in]*/, short offset/*[in]*/, 
                                                short* pVal/*[out]*/);
  HRESULT         __fastcall ConvertWordToLong(BSTR word/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall RestoreModifiedIVars(long dwDevice/*[in]*/, short motor/*[in]*/);
  HRESULT         __fastcall CalculateStepStatistics(VARIANT* pvData/*[in,out]*/, 
                                                     long stepSize/*[in]*/, long I10/*[in]*/, 
                                                     long I19/*[in]*/, BSTR* pbsRiseTime/*[out]*/, 
                                                     BSTR* pbsPeakTime/*[out]*/, 
                                                     BSTR* pbsNatFreq/*[out]*/, 
                                                     BSTR* pbsOvershoot/*[out]*/, 
                                                     BSTR* pbsDamping/*[out]*/, 
                                                     BSTR* pbsSettleTime/*[out]*/);
  HRESULT         __fastcall LowPassFilterTheData(VARIANT* pvData/*[in,out]*/, 
                                                  BSTR bsCurrent/*[in]*/);
  HRESULT         __fastcall DifferentiateTheData(VARIANT* pvData/*[in,out]*/, long I10/*[in]*/, 
                                                  long I19/*[in]*/, long* pMinVal/*[out]*/, 
                                                  long* pMaxVal/*[out]*/);
  HRESULT         __fastcall DownloadAutoTuningPLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                   VARIANT_BOOL bCurrentLoop/*[in]*/, 
                                                   VARIANT_BOOL bBypassJog/*[in]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DownloadGantryAutoTuningPLCP1(long dwDevice/*[in]*/, 
                                                           short motor/*[in]*/, short motor2/*[in]*/
                                                           , VARIANT_BOOL bCurrentLoop/*[in]*/, 
                                                           VARIANT_BOOL bBypassJog/*[in]*/, 
                                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DownloadGantryAutoTuningPLC(long dwDevice/*[in]*/, short motor/*[in]*/
                                                         , short motor2/*[in]*/, 
                                                         VARIANT_BOOL bCurrentLoop/*[in]*/, 
                                                         VARIANT_BOOL bBypassJog/*[in]*/, 
                                                         double MaxTravel/*[in]*/, long time/*[in]*/
                                                         , VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall MagEstimation(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SlopeEstimation(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SetCurrentGather(long dwDevice/*[in]*/, long mask/*[in]*/, 
                                              VARIANT_BOOL bEnable/*[in]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DownloadOpenLoopTestForPMAC1(long dwDevice/*[in]*/, short motor/*[in]*/
                                                          , short magnitude/*[in]*/, 
                                                          short time/*[in]*/, short reps/*[in]*/, 
                                                          VARIANT_BOOL bGatherCurrents/*[in]*/, 
                                                          VARIANT_BOOL bMacro/*[in]*/, 
                                                          VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetMacroNodes(long dwDevice/*[in]*/, long* pNumMacroStations/*[out]*/, 
                                           long* pNumActiveNodes/*[out]*/);
  HRESULT         __fastcall GetMacroNodeInfo(long dwDevice/*[in]*/, long modeNum/*[in]*/, 
                                              VARIANT_BOOL* pbEnabled/*[out]*/, 
                                              VARIANT_BOOL* pbIsIONode/*[out]*/, long* pID/*[out]*/);
  HRESULT         __fastcall SetMacroIVariableString(long dwDevice/*[in]*/, long node/*[in]*/, 
                                                     long num/*[in]*/, BSTR bsMIVarValue/*[in]*/, 
                                                     VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetMacroIVariableString(long dwDevice/*[in]*/, long node/*[in]*/, 
                                                     long num/*[in]*/, BSTR bsDefault/*[in]*/, 
                                                     BSTR* pbsVal/*[out]*/);
  HRESULT         __fastcall GetCommandLogging(long dwDevice/*[in]*/, VARIANT_BOOL* pbON/*[out]*/);
  HRESULT         __fastcall SetCommandLogging(long dwDevice/*[in]*/, VARIANT_BOOL bOn/*[in]*/, 
                                               BSTR bsFilePath/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetEnumeration(long dwDevice/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall GetControlValues(long dwDevice/*[in]*/, short ctrlCh/*[in]*/, 
                                              VARIANT* pVariant/*[in,out]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall MultiDownload(long dwDevice/*[in]*/, BSTR outFile/*[in]*/, 
                                           BSTR iniFile/*[in]*/, BSTR userID/*[in]*/, 
                                           VARIANT_BOOL bMacro/*[in]*/, VARIANT_BOOL bMap/*[in]*/, 
                                           VARIANT_BOOL bLog/*[in]*/, VARIANT_BOOL bDnld/*[in]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall AddDownloadFile(long dwDevice/*[in]*/, BSTR iniFile/*[in]*/, 
                                             BSTR userID/*[in]*/, BSTR dlFile/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall RemoveDownloadFile(long dwDevice/*[in]*/, BSTR iniFile/*[in]*/, 
                                                BSTR userID/*[in]*/, BSTR dlFile/*[in]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall RenumberFiles(long dwDevice/*[in]*/, long fileNumber/*[in]*/, 
                                           BSTR iniFile/*[in]*/);
  HRESULT         __fastcall GetVariableStr(long dwDevice/*[in]*/, short ch/*[in]*/, 
                                            long num/*[in]*/, BSTR* pVal/*[out]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRVarBufReadAll(long dwDevice/*[in]*/, long h/*[in]*/, 
                                              VARIANT* pVal/*[in,out]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall UltraLightAnalyze(long dwDevice/*[in]*/, VARIANT* pVal/*[in,out]*/, 
                                               long* pActiveNodes/*[out]*/);
  HRESULT         __fastcall GetPlcStatusStructure(long dwDevice/*[in]*/, VARIANT* pVal/*[in,out]*/
                                                   , long* pPrograms/*[out]*/);
  HRESULT         __fastcall GetBitValue(BSTR hexStr/*[in]*/, short bit/*[in]*/, 
                                         VARIANT_BOOL* pVal/*[out]*/);
  HRESULT         __fastcall GetNumDeviceKeys(long* pVal/*[out]*/);
  HRESULT         __fastcall DPRGetLongDouble(long dwDevice/*[in]*/, long address/*[in]*/, 
                                              double* pVal/*[out]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRGetFixedDouble(long dwDevice/*[in]*/, long address/*[in]*/, 
                                               double* pVal/*[out]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRGetShort(long dwDevice/*[in]*/, long address/*[in]*/, 
                                         short* pVal/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRSetShort(long dwDevice/*[in]*/, long address/*[in]*/, 
                                         short newVal/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRDWordBitSet(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                            long bit/*[in]*/, VARIANT_BOOL* pVal/*[out]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRResetDWordBit(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                              long bit/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRSetDWordBit(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                            long bit/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetFirmwareType(long dwDevice/*[in]*/, 
                                             Pcommserverlib_tlb::DEVPMACFIRMWARETYPE* pVal/*[out]*/);
  HRESULT         __fastcall GetResponseEx(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                           VARIANT_BOOL bAddLF/*[in]*/, BSTR* pAnswer/*[out]*/, 
                                           long* pstatus/*[out]*/);
  HRESULT         __fastcall DPRVarBufWriteEx(long dwDevice/*[in]*/, VARIANT vData/*[in]*/, 
                                              long* pWritten/*[out]*/);
  HRESULT         __fastcall DPRGetDWordMask(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                             long mask/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall DPRSetDWordMask(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                             long mask/*[in]*/, long Val/*[in]*/);
  HRESULT         __fastcall DPRRotBufRemove(long dwDevice/*[in]*/, long bufnum/*[in]*/);
  HRESULT         __fastcall DPRRotBufInit(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRRotBufClr(long dwDevice/*[in]*/, long bufnum/*[in]*/);
  HRESULT         __fastcall DPRSetRotBuf(long dwDevice/*[in]*/, VARIANT_BOOL on/*[in]*/);
  HRESULT         __fastcall DPRAsciiStrToRotEx(long dwDevice/*[in]*/, BSTR inpstr/*[in]*/, 
                                                long bufnum/*[in]*/, 
                                                VARIANT_BOOL bSendRemaining/*[in]*/, 
                                                long* pstatus/*[out]*/);
  HRESULT         __fastcall DPRAsciiStrToRot(long dwDevice/*[in]*/, BSTR inpstr/*[in]*/, 
                                              long bufnum/*[in]*/, long* pstatus/*[out]*/);
  HRESULT         __fastcall GetProgramMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                            Pcommserverlib_tlb::DEVPROGRAMMODE* pVal/*[out]*/);
  HRESULT         __fastcall GetProgramMotionMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                  Pcommserverlib_tlb::DEVMOTIONMODE* pVal/*[out]*/);
  HRESULT         __fastcall MapDeviceNumToEnum(long location/*[in]*/, long enumeration/*[in]*/, 
                                                long* pDeviceNumber/*[out]*/);
  HRESULT         __fastcall MapLocAndEnumFromDeviceNum(long dwDevice/*[in]*/, 
                                                        long* pLocation/*[out]*/, 
                                                        long* pEnumeration/*[out]*/);
  HRESULT         __fastcall GetFeedRateAndMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                double* pRate/*[out]*/, VARIANT_BOOL* pMode/*[out]*/);
  HRESULT         __fastcall GetMotorMotionMode(long dwDevice/*[in]*/, long dwMotor/*[in]*/, 
                                                Pcommserverlib_tlb::DEVMOTION* pVal/*[out]*/);
  HRESULT         __fastcall CommandLog(long dwDevice/*[in]*/, BSTR bStr/*[in]*/, 
                                        VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRGetMem(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                       long bytes/*[in]*/, VARIANT* pVal/*[in,out]*/, 
                                       VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRSetMem(long dwDevice/*[in]*/, long offset/*[in]*/, 
                                       long bytes/*[in]*/, VARIANT Val/*[in]*/, 
                                       VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetResponseProgress(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                                 VARIANT_BOOL bAddLF/*[in]*/, BSTR* pAnswer/*[out]*/
                                                 , long* pstatus/*[out]*/);
  HRESULT         __fastcall Abort(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_InterruptsEnabled(long dwDevice/*[in]*/, 
                                                   VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_InterruptsEnabled(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_InterruptsEnabled(long dwDevice/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_InterruptMask(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_InterruptMask(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_InterruptMask(long dwDevice/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall PmacSave(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                      long* pstatus/*[out]*/);
  HRESULT         __fastcall PmacReset(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                       VARIANT_BOOL bAsciiRingComm/*[in]*/, long* pstatus/*[out]*/);
  HRESULT         __fastcall PhaseMotor(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                        long* pStatuss/*[out]*/);
  HRESULT         __fastcall GetControlResponseEx(long dwDevice/*[in]*/, short question/*[in]*/, 
                                                  BSTR* pAnswer/*[out]*/, long* pstatus/*[out]*/);
  HRESULT         __fastcall get_USMonitoringEnabled(long dwDevice/*[in]*/, 
                                                     VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_USMonitoringEnabled(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_USMonitoringEnabled(long dwDevice/*[in]*/, 
                                                     VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_USMonitoringPeriod(long dwDevice/*[in]*/, 
                                                    long* pVal/*[out,retval]*/);
  long            __fastcall get_USMonitoringPeriod(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_USMonitoringPeriod(long dwDevice/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall DPRTest(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall AbortTest(long dwDevice/*[in]*/);
  HRESULT         __fastcall DPRGetMotorRpt(long dwDevice/*[in]*/, long motor/*[in]*/, 
                                            /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVFGMOTOR* pStruct)*/ TVariant&  pStruct
                                            , long* pServo/*[out]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRGetMotorRptTurbo(long dwDevice/*[in]*/, long motor/*[in]*/, 
                                                 /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVFGMOTORTURBO* pStruct)*/ TVariant&  pStruct
                                                 , long* pServo/*[out]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRGetCoordRpt(long dwDevice/*[in]*/, long coord/*[in]*/, 
                                            /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVBGCOORD* pStruct)*/ TVariant&  pStruct
                                            , long* pServo/*[out]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRGetCoordRptTurbo(long dwDevice/*[in]*/, long coord/*[in]*/, 
                                                 /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVBGCOORDTURBO* pStruct)*/ TVariant&  pStruct
                                                 , long* pServo/*[out]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall get_DPRMotorRptEnabled(long dwDevice/*[in]*/, 
                                                    VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DPRMotorRptEnabled(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_DPRMotorRptEnabled(long dwDevice/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_DPRMotorRptMask(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_DPRMotorRptMask(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_DPRMotorRptMask(long dwDevice/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_DPRMotorRptMSec(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_DPRMotorRptMSec(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_DPRMotorRptMSec(long dwDevice/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_DPRCoordRptEnabled(long dwDevice/*[in]*/, 
                                                    VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DPRCoordRptEnabled(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_DPRCoordRptEnabled(long dwDevice/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_DPRCoordRptMSec(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_DPRCoordRptMSec(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_DPRCoordRptMSec(long dwDevice/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_DPRCoordRptMax(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_DPRCoordRptMax(long dwDevice/*[in]*/);
  HRESULT         __fastcall set_DPRCoordRptMax(long dwDevice/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall UltraLightAnalyzeStruct(long dwDevice/*[in]*/, 
                                                     /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVULTRALIGHT_INFO* pStruct)*/ TVariant&  pStruct
                                                     , long* pActiveNodes/*[out]*/);
  HRESULT         __fastcall GetPlcStatusStruct(long dwDevice/*[in]*/, 
                                                /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVTOTAL_PLC_STATUS_STRUCT* pStruct)*/ TVariant&  pStruct
                                                , long* pPrograms/*[out]*/);
  HRESULT         __fastcall get_DPRTesting(long dwDevice/*[in]*/, 
                                            VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DPRTesting(long dwDevice/*[in]*/);
  HRESULT         __fastcall RawGetResponseEx(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                              VARIANT_BOOL bAddLF/*[in]*/, BSTR* pAnswer/*[out]*/, 
                                              long* pstatus/*[out]*/);
  HRESULT         __fastcall RawGetControlResponseEx(long dwDevice/*[in]*/, short question/*[in]*/, 
                                                     BSTR* pAnswer/*[out]*/, long* pstatus/*[out]*/);
  HRESULT         __fastcall ModBusCommand(long dwDevice/*[in]*/, unsigned_char command/*[in]*/, 
                                           VARIANT* counters/*[out]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall ModbusAvailable(long dwDevice/*[in]*/, unsigned_char command/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRSetupBuffers(unsigned_long dwDevice/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DPRBackground(long dwDevice/*[in]*/, long on/*[in]*/, 
                                           long period/*[in]*/, long coord/*[in]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall get_DataCollectionEnabled(long dwDevice/*[in]*/, 
                                                       VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DataCollectionEnabled(long dwDevice/*[in]*/);
  HRESULT         __fastcall get_DataCollectionResolution(long dwDevice/*[in]*/, 
                                                          long* pVal/*[out,retval]*/);
  long            __fastcall get_DataCollectionResolution(long dwDevice/*[in]*/);
  HRESULT         __fastcall GetTurboMotorStatusEx(long dwDevice/*[in]*/, long lMotor/*[in]*/, 
                                                   /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVMSTURBO* pstatus)*/ TVariant&  pstatus
                                                   , VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetNTMotorStatusEx(long dwDevice/*[in]*/, long lMotor/*[in]*/, 
                                                /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVMSNONTURBO* pstatus)*/ TVariant&  pstatus
                                                , VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetTurboGlobalStatusEx(long dwDevice/*[in]*/, 
                                                    /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVGSTURBO* pstatus)*/ TVariant&  pstatus
                                                    , VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetNTGlobalStatusEx(long dwDevice/*[in]*/, 
                                                 /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVGSNONTURBO* pstatus)*/ TVariant&  pstatus
                                                 , VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetTurboCoordinateStatusEx(long dwDevice/*[in]*/, long dwCoord/*[in]*/
                                                        , 
                                                        /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVCSTURBO* pstatus)*/ TVariant&  pstatus
                                                        , VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetNTCoordinateStatusEx(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                     /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVCSNONTURBO* pstatus)*/ TVariant&  pstatus
                                                     , VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall DataGather(long dwDevice/*[in]*/, LPSAFEARRAY* pvArray/*[in,out]*/, 
                                        VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall Upload(long dwDevice/*[in]*/, 
                                    /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVUPLOAD pUpload)*/ TVariant&  pUpload
                                    , BSTR* pData/*[out]*/, long* pstatus/*[out]*/);
  HRESULT         __fastcall ModbusActive(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);

  __property   long            MaxDownloadErrors = {read = get_MaxDownloadErrors, write = set_MaxDownloadErrors};
};
typedef IPmacDeviceDispT<IPmacDevice> IPmacDeviceDisp;

// *********************************************************************//
// DispIntf:  _IPmacDeviceEvents
// Flags:     (4096) Dispatchable
// GUID:      {D1C5C7C8-5E0C-495E-9AAF-85B146DA5F13}
// *********************************************************************//
template <class T>
class _IPmacDeviceEventsDispT : public TAutoDriver<_IPmacDeviceEvents>
{
public:
  _IPmacDeviceEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  HRESULT         __fastcall Message(long Device, BSTR Msg, VARIANT_BOOL bNewLine);
  HRESULT         __fastcall Progress(long Device, long dwPercent);
  HRESULT         __fastcall Error(long Device, BSTR FileName, long ErrorID, long LineNum, BSTR Line);
  HRESULT         __fastcall Interrupt(long Device, long lLevel);
  HRESULT         __fastcall Unsolicited(long Device, BSTR Msg);
  HRESULT         __fastcall DataReady(long Device);

};
typedef _IPmacDeviceEventsDispT<_IPmacDeviceEvents> _IPmacDeviceEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIPmacNC
// Interface: IPmacNC
// *********************************************************************//
template <class T /* IPmacNC */ >
class TCOMIPmacNCT : public TComInterface<IPmacNC>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMIPmacNCT() {}
  TCOMIPmacNCT(IPmacNC *intf, bool addRef = false) : TComInterface<IPmacNC>(intf, addRef) {}
  TCOMIPmacNCT(const TCOMIPmacNCT& src) : TComInterface<IPmacNC>(src) {}
  TCOMIPmacNCT& operator=(const TCOMIPmacNCT& src) { Bind(src, true); return *this;}

  HRESULT         __fastcall Open(long Device/*[in]*/, long Control/*[in]*/, 
                                  VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall Close(long Control/*[in]*/);
  HRESULT         __fastcall OpenFile(long Control/*[in]*/, long dwCoord/*[in]*/, 
                                      BSTR szFilePath/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall CloseFile(long Control/*[in]*/, long dwCoord/*[in]*/, 
                                       VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall get_Title(long Control/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Title(long Control/*[in]*/);
  HRESULT         __fastcall set_Title(long Control/*[in]*/, BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_DeviceNumber(long Control/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_DeviceNumber(long Control/*[in]*/);
  HRESULT         __fastcall get_IsOpen(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsOpen(long Control/*[in]*/);
  HRESULT         __fastcall SetMachineMode(long Control/*[in]*/, 
                                            Pcommserverlib_tlb::NCMODE mode/*[in]*/);
  HRESULT         __fastcall GetMachineMode(long Control/*[in]*/, 
                                            Pcommserverlib_tlb::NCMODE* pMode/*[out]*/);
  HRESULT         __fastcall get_mode(long Control/*[in]*/, 
                                      Pcommserverlib_tlb::NCMODE* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCMODE __fastcall get_mode(long Control/*[in]*/);
  HRESULT         __fastcall set_mode(long Control/*[in]*/, Pcommserverlib_tlb::NCMODE pVal/*[in]*/);
  HRESULT         __fastcall GetRegistryBool(long Control/*[in]*/, BSTR section/*[in]*/, 
                                             BSTR name/*[in]*/, VARIANT_BOOL def/*[in]*/, 
                                             VARIANT_BOOL* pVal/*[out]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SetRegistryBool(long Control/*[in]*/, BSTR section/*[in]*/, 
                                             BSTR name/*[in]*/, VARIANT_BOOL bVal/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetRegistryLong(long Control/*[in]*/, BSTR section/*[in]*/, 
                                             BSTR name/*[in]*/, long def/*[in]*/, 
                                             long* pVal/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SetRegistryLong(long Control/*[in]*/, BSTR section/*[in]*/, 
                                             BSTR name/*[in]*/, long lVal/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetRegistryString(long Control/*[in]*/, BSTR section/*[in]*/, 
                                               BSTR name/*[in]*/, BSTR def/*[in]*/, 
                                               BSTR* pVal/*[in,out]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SetRegistryString(long Control/*[in]*/, BSTR section/*[in]*/, 
                                               BSTR name/*[in]*/, BSTR Val/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetRegistryDouble(long Control/*[in]*/, BSTR section/*[in]*/, 
                                               BSTR name/*[in]*/, double def/*[in]*/, 
                                               double* pVal/*[out]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SetRegistryDouble(long Control/*[in]*/, BSTR section/*[in]*/, 
                                               BSTR name/*[in]*/, double Val/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall get_CoordSystem(long Control/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_CoordSystem(long Control/*[in]*/);
  HRESULT         __fastcall set_CoordSystem(long Control/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_NumCoordSystems(long Control/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_NumCoordSystems(long Control/*[in]*/);
  HRESULT         __fastcall get_SingleBlock(long Control/*[in]*/, 
                                             VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SingleBlock(long Control/*[in]*/);
  HRESULT         __fastcall set_SingleBlock(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_BlockDelete(long Control/*[in]*/, 
                                             VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BlockDelete(long Control/*[in]*/);
  HRESULT         __fastcall set_BlockDelete(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_OptionalStop(long Control/*[in]*/, 
                                              VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_OptionalStop(long Control/*[in]*/);
  HRESULT         __fastcall set_OptionalStop(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_MachineLock(long Control/*[in]*/, 
                                             VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MachineLock(long Control/*[in]*/);
  HRESULT         __fastcall set_MachineLock(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_DryRun(long Control/*[in]*/, long coord/*[in]*/, 
                                        VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DryRun(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall set_DryRun(long Control/*[in]*/, long coord/*[in]*/, 
                                        VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_MachineType(long Control/*[in]*/, 
                                             Pcommserverlib_tlb::NCMACHINETYPE* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCMACHINETYPE __fastcall get_MachineType(long Control/*[in]*/);
  HRESULT         __fastcall get_JogSelect(long Control/*[in]*/, 
                                           Pcommserverlib_tlb::NCJOGSELECT* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCJOGSELECT __fastcall get_JogSelect(long Control/*[in]*/);
  HRESULT         __fastcall set_JogSelect(long Control/*[in]*/, 
                                           Pcommserverlib_tlb::NCJOGSELECT pVal/*[in]*/);
  HRESULT         __fastcall get_SpeedSelect(long Control/*[in]*/, 
                                             Pcommserverlib_tlb::NCSPEEDSELECT* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCSPEEDSELECT __fastcall get_SpeedSelect(long Control/*[in]*/);
  HRESULT         __fastcall set_SpeedSelect(long Control/*[in]*/, 
                                             Pcommserverlib_tlb::NCSPEEDSELECT pVal/*[in]*/);
  HRESULT         __fastcall get_ProgramLoaded(long Control/*[in]*/, long coord/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ProgramLoaded(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall GetAxisEnabled(long Control/*[in]*/, long coord/*[in]*/, 
                                            short axis/*[in]*/, VARIANT_BOOL* pVal/*[out]*/);
  HRESULT         __fastcall GetProgramName(long Control/*[in]*/, long coord/*[in]*/, 
                                            VARIANT_BOOL bMain/*[in]*/, BSTR* pVal/*[in,out]*/);
  HRESULT         __fastcall GetProgramPath(long Control/*[in]*/, long coord/*[in]*/, 
                                            VARIANT_BOOL bMain/*[in]*/, BSTR* pVal/*[in,out]*/);
  HRESULT         __fastcall get_Semaphore(long Control/*[in]*/, long coord/*[in]*/, 
                                           long* pVal/*[out,retval]*/);
  long            __fastcall get_Semaphore(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall set_Semaphore(long Control/*[in]*/, long coord/*[in]*/, 
                                           long pVal/*[in]*/);
  HRESULT         __fastcall GetProgramStatus(long Control/*[in]*/, long coord/*[in]*/, 
                                              long* pProgID/*[out]*/, long* pNumLines/*[out]*/, 
                                              long* pLine/*[out]*/, long* pParseLine/*[out]*/, 
                                              long* pRepeat/*[out]*/, long* pCount/*[out]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetProgramNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                              long* pVal/*[out]*/);
  HRESULT         __fastcall GetCurrentLabel(long Control/*[in]*/, long coord/*[in]*/, 
                                             long* pVal/*[out]*/);
  HRESULT         __fastcall get_DistanceSelect(long Control/*[in]*/, 
                                                Pcommserverlib_tlb::NCSPEEDSELECT* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCSPEEDSELECT __fastcall get_DistanceSelect(long Control/*[in]*/);
  HRESULT         __fastcall set_DistanceSelect(long Control/*[in]*/, 
                                                Pcommserverlib_tlb::NCSPEEDSELECT pVal/*[in]*/);
  HRESULT         __fastcall GetJogStep(long Control/*[in]*/, long coord/*[in]*/, 
                                        double* pVal/*[out]*/);
  HRESULT         __fastcall GetHandleStep(long Control/*[in]*/, long coord/*[in]*/, 
                                           double* pVal/*[out]*/);
  HRESULT         __fastcall SetOrigin(long Control/*[in]*/, long coord/*[in]*/, 
                                       VARIANT_BOOL bOrginAll/*[in]*/, 
                                       Pcommserverlib_tlb::NCADDRESS adr/*[in]*/, 
                                       VARIANT_BOOL bClear/*[in]*/, double Val/*[in]*/, 
                                       VARIANT_BOOL metric/*[in]*/);
  HRESULT         __fastcall ZeroShift(long Control/*[in]*/, long coord/*[in]*/, 
                                       VARIANT_BOOL bShiftAll/*[in]*/, 
                                       Pcommserverlib_tlb::NCADDRESS adr/*[in]*/, 
                                       VARIANT_BOOL bClear/*[in]*/, double Val/*[in]*/, 
                                       VARIANT_BOOL bMetric/*[in]*/);
  HRESULT         __fastcall GetVectorVelocity(long Control/*[in]*/, long coord/*[in]*/, 
                                               double* pVal/*[out]*/);
  HRESULT         __fastcall ReadMdiBuffer(long Control/*[in]*/, long coord/*[in]*/, 
                                           long* hDlg/*[in]*/, long idControl/*[in]*/);
  HRESULT         __fastcall LoadMdiBuffer(long Control/*[in]*/, long coord/*[in]*/, 
                                           long* hDlg/*[in]*/, long idControl/*[in]*/, 
                                           long nRepeat/*[in]*/);
  HRESULT         __fastcall ClearTextBuffer(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall GetCurrentGValue(long Control/*[in]*/, long coord/*[in]*/, 
                                              long group/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall get_AxisSelect(long Control/*[in]*/, long coord/*[in]*/, 
                                            Pcommserverlib_tlb::NCAXISSELECT* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCAXISSELECT __fastcall get_AxisSelect(long Control/*[in]*/, 
                                                             long coord/*[in]*/);
  HRESULT         __fastcall set_AxisSelect(long Control/*[in]*/, long coord/*[in]*/, 
                                            Pcommserverlib_tlb::NCAXISSELECT pVal/*[in]*/);
  HRESULT         __fastcall GetInposition(long Control/*[in]*/, long coord/*[in]*/, 
                                           VARIANT_BOOL* pVal/*[out]*/);
  HRESULT         __fastcall get_BufferMode(long Control/*[in]*/, long coord/*[in]*/, 
                                            Pcommserverlib_tlb::NCBUFFERMODE* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCBUFFERMODE __fastcall get_BufferMode(long Control/*[in]*/, 
                                                             long coord/*[in]*/);
  HRESULT         __fastcall set_BufferMode(long Control/*[in]*/, long coord/*[in]*/, 
                                            Pcommserverlib_tlb::NCBUFFERMODE pVal/*[in]*/);
  HRESULT         __fastcall GetProgramMode(long Control/*[in]*/, long coord/*[in]*/, 
                                            Pcommserverlib_tlb::DEVPROGRAMMODE* pVal/*[out]*/);
  HRESULT         __fastcall GetSelectedBufferMode(long Control/*[in]*/, 
                                                   Pcommserverlib_tlb::NCBUFFERMODE* pVal/*[out]*/);
  HRESULT         __fastcall GetSelectedAxisMotionMode(long Control/*[in]*/, 
                                                       Pcommserverlib_tlb::DEVMOTIONMODE* pVal/*[out]*/);
  HRESULT         __fastcall GetProgramMotionMode(long Control/*[in]*/, long coord/*[in]*/, 
                                                  Pcommserverlib_tlb::DEVMOTIONMODE* pVal/*[out]*/);
  HRESULT         __fastcall GetBufferOpen(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out]*/);
  HRESULT         __fastcall GetBufferRemaining(long Control/*[in]*/, long coord/*[in]*/, 
                                                long* pRemain/*[out]*/, long* pParsed/*[out]*/);
  HRESULT         __fastcall get_SpindleSelect(long Control/*[in]*/, 
                                               Pcommserverlib_tlb::NCSPINDLESELECT* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCSPINDLESELECT __fastcall get_SpindleSelect(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleSelect(long Control/*[in]*/, 
                                               Pcommserverlib_tlb::NCSPINDLESELECT pVal/*[in]*/);
  HRESULT         __fastcall get_SpindleRPM(long Control/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_SpindleRPM(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleRPM(long Control/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_SpindleCSS(long Control/*[in]*/, double* pVal/*[out,retval]*/);
  double          __fastcall get_SpindleCSS(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleCSS(long Control/*[in]*/, double pVal/*[in]*/);
  HRESULT         __fastcall get_SpindleCSSMode(long Control/*[in]*/, 
                                                VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SpindleCSSMode(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleCSSMode(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_SpindleCSSUnits(long Control/*[in]*/, double* pVal/*[out,retval]*/);
  double          __fastcall get_SpindleCSSUnits(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleCSSUnits(long Control/*[in]*/, double pVal/*[in]*/);
  HRESULT         __fastcall GetSpindleActRPM(long Control/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall get_SpindleMaxRPM(long Control/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_SpindleMaxRPM(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleMaxRPM(long Control/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_SpindleOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                                 long* pVal/*[out,retval]*/);
  long            __fastcall get_SpindleOverride(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall set_SpindleOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                                 long pVal/*[in]*/);
  HRESULT         __fastcall get_FeedrateOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                                  double* pVal/*[out,retval]*/);
  double          __fastcall get_FeedrateOverride(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall set_FeedrateOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                                  double pVal/*[in]*/);
  HRESULT         __fastcall get_RapidOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                               double* pVal/*[out,retval]*/);
  double          __fastcall get_RapidOverride(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall set_RapidOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                               double pVal/*[in]*/);
  HRESULT         __fastcall get_CoolantSelect(long Control/*[in]*/, 
                                               Pcommserverlib_tlb::NCCLNTSELECT* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCCLNTSELECT __fastcall get_CoolantSelect(long Control/*[in]*/);
  HRESULT         __fastcall set_CoolantSelect(long Control/*[in]*/, 
                                               Pcommserverlib_tlb::NCCLNTSELECT pVal/*[in]*/);
  HRESULT         __fastcall get_TimebaseMode(long Control/*[in]*/, long coord/*[in]*/, 
                                              Pcommserverlib_tlb::NCTIMEBASEMODE* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCTIMEBASEMODE __fastcall get_TimebaseMode(long Control/*[in]*/, 
                                                                 long coord/*[in]*/);
  HRESULT         __fastcall set_TimebaseMode(long Control/*[in]*/, long coord/*[in]*/, 
                                              Pcommserverlib_tlb::NCTIMEBASEMODE pVal/*[in]*/);
  HRESULT         __fastcall GetFeedrate(long Control/*[in]*/, long coord/*[in]*/, 
                                         Pcommserverlib_tlb::NCFEEDRATEMODE* pMode/*[out]*/, 
                                         double* pVal/*[out]*/);
  HRESULT         __fastcall SetFeedrate(long Control/*[in]*/, long coord/*[in]*/, 
                                         Pcommserverlib_tlb::NCFEEDRATEMODE mode/*[in]*/, 
                                         double newVal/*[in]*/);
  HRESULT         __fastcall get_ThreadLead(long Control/*[in]*/, long coord/*[in]*/, 
                                            double* pVal/*[out,retval]*/);
  double          __fastcall get_ThreadLead(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall set_ThreadLead(long Control/*[in]*/, long coord/*[in]*/, 
                                            double pVal/*[in]*/);
  HRESULT         __fastcall GetNumOfTools(long Control/*[in]*/, long coord/*[in]*/, 
                                           long* pVal/*[out]*/);
  HRESULT         __fastcall get_CurrentToolNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                   long* pVal/*[out,retval]*/);
  long            __fastcall get_CurrentToolNumber(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall set_CurrentToolNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                   long pVal/*[in]*/);
  HRESULT         __fastcall get_NextToolNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                long* pVal/*[out,retval]*/);
  long            __fastcall get_NextToolNumber(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall set_NextToolNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                long pVal/*[in]*/);
  HRESULT         __fastcall get_CurrentToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                         long* pVal/*[out,retval]*/);
  long            __fastcall get_CurrentToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall set_CurrentToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                         long pVal/*[in]*/);
  HRESULT         __fastcall SetToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                 long tool/*[in]*/, long holder/*[in]*/);
  HRESULT         __fastcall GetToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                 long tool/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall ZeroAllToolOffsets(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall GetTypeToolOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                               long tool/*[in]*/, BSTR chAxis/*[in]*/, 
                                               Pcommserverlib_tlb::NCTOOLOFSTYPE type/*[in]*/, 
                                               VARIANT_BOOL bMetric/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall SetTypeToolOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                               long tool/*[in]*/, BSTR chAxis/*[in]*/, 
                                               Pcommserverlib_tlb::NCTOOLOFSTYPE type/*[in]*/, 
                                               VARIANT_BOOL bMetric/*[in]*/, 
                                               VARIANT_BOOL bConfirm/*[in]*/, double newVal/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall get_ToolInSpindle(long Control/*[in]*/, long coord/*[in]*/, 
                                               long* pVal/*[out,retval]*/);
  long            __fastcall get_ToolInSpindle(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall set_ToolInSpindle(long Control/*[in]*/, long coord/*[in]*/, 
                                               long pVal/*[in]*/);
  HRESULT         __fastcall get_ToolDirection(long Control/*[in]*/, long coord/*[in]*/, 
                                               long tool/*[in]*/, 
                                               Pcommserverlib_tlb::NCTOOLDIRECTION* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCTOOLDIRECTION __fastcall get_ToolDirection(long Control/*[in]*/, 
                                                                   long coord/*[in]*/, 
                                                                   long tool/*[in]*/);
  HRESULT         __fastcall set_ToolDirection(long Control/*[in]*/, long coord/*[in]*/, 
                                               long tool/*[in]*/, 
                                               Pcommserverlib_tlb::NCTOOLDIRECTION pVal/*[in]*/);
  HRESULT         __fastcall get_SpindleCountsPerRev(long Control/*[in]*/, 
                                                     double* pVal/*[out,retval]*/);
  double          __fastcall get_SpindleCountsPerRev(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleCountsPerRev(long Control/*[in]*/, double pVal/*[in]*/);
  HRESULT         __fastcall get_SpindleGearRatio(long Control/*[in]*/, double* pVal/*[out,retval]*/);
  double          __fastcall get_SpindleGearRatio(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleGearRatio(long Control/*[in]*/, double pVal/*[in]*/);
  HRESULT         __fastcall get_SpindleDetect(long Control/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SpindleDetect(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleDetect(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_SpindleAtSpeed(long Control/*[in]*/, 
                                                VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SpindleAtSpeed(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleAtSpeed(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_SpindleAtZero(long Control/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SpindleAtZero(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleAtZero(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_SpindleFPR(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SpindleFPR(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleFPR(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_HomeInit(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HomeInit(long Control/*[in]*/);
  HRESULT         __fastcall set_HomeInit(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_HomeMotorMask(long Control/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_HomeMotorMask(long Control/*[in]*/);
  HRESULT         __fastcall set_HomeMotorMask(long Control/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall GetActiveGCode(long Control/*[in]*/, long coord/*[in]*/, 
                                            long group/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall GetActiveGCodeStr(long Control/*[in]*/, long coord/*[in]*/, 
                                               long group/*[in]*/, BSTR* pVal/*[in,out]*/);
  HRESULT         __fastcall GetToolOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                           long* pVal/*[out]*/);
  HRESULT         __fastcall GetCompOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                           long* pVal/*[out]*/);
  HRESULT         __fastcall UpdateAllMotors(long Control/*[in]*/);
  HRESULT         __fastcall GetOperatingTime(long Control/*[in]*/, long* pDays/*[out]*/, 
                                              long* pHours/*[out]*/, long* pMinutes/*[out]*/, 
                                              long* pSeconds/*[out]*/);
  HRESULT         __fastcall GetTotalCuttingTime(long Control/*[in]*/, long* pDays/*[out]*/, 
                                                 long* pHours/*[out]*/, long* pMinutes/*[out]*/, 
                                                 long* pSeconds/*[out]*/);
  HRESULT         __fastcall GetRunningTime(long Control/*[in]*/, long* pDays/*[out]*/, 
                                            long* pHours/*[out]*/, long* pMinutes/*[out]*/, 
                                            long* pSeconds/*[out]*/);
  HRESULT         __fastcall GetPartTime(long Control/*[in]*/, long* pHours/*[out]*/, 
                                         long* pMinutes/*[out]*/, long* pSeconds/*[out]*/);
  HRESULT         __fastcall GetCycleCuttingTime(long Control/*[in]*/, long* pHours/*[out]*/, 
                                                 long* pMinutes/*[out]*/, long* pSeconds/*[out]*/);
  HRESULT         __fastcall GetCycleTime(long Control/*[in]*/, long* pHours/*[out]*/, 
                                          long* pMinutes/*[out]*/, long* Seconds/*[out]*/);
  HRESULT         __fastcall get_PartsRequired(long Control/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_PartsRequired(long Control/*[in]*/);
  HRESULT         __fastcall set_PartsRequired(long Control/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_PartsCount(long Control/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_PartsCount(long Control/*[in]*/);
  HRESULT         __fastcall set_PartsCount(long Control/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_PartsTotal(long Control/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_PartsTotal(long Control/*[in]*/);
  HRESULT         __fastcall set_PartsTotal(long Control/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall GetNumDisplayedAxis(long Control/*[in]*/, long coord/*[in]*/, 
                                                 long* pVal/*[out]*/);
  HRESULT         __fastcall GetNumDisplayAxisTotal(long Control/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall GetMotorPosStr(long Control/*[in]*/, long coord/*[in]*/, 
                                            long motor/*[in]*/, 
                                            Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/, 
                                            VARIANT_BOOL bCombined/*[in]*/, BSTR* pAdr/*[in,out]*/, 
                                            BSTR* pPos/*[in,out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall get_IsSpindle(long Control/*[in]*/, long coord/*[in]*/, 
                                           long motor/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsSpindle(long Control/*[in]*/, long coord/*[in]*/, 
                                           long motor/*[in]*/);
  HRESULT         __fastcall set_IsSpindle(long Control/*[in]*/, long coord/*[in]*/, 
                                           long motor/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_IsDisplayed(long Control/*[in]*/, long coord/*[in]*/, 
                                             long motor/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsDisplayed(long Control/*[in]*/, long coord/*[in]*/, 
                                             long motor/*[in]*/);
  HRESULT         __fastcall set_IsDisplayed(long Control/*[in]*/, long coord/*[in]*/, 
                                             long motor/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall GetMotorUnitsStr(long Control/*[in]*/, long coord/*[in]*/, 
                                              long motor/*[in]*/, BSTR* pVal/*[in,out]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetProgramLines(long Control/*[in]*/, long coord/*[in]*/, 
                                             long start/*[in]*/, long count/*[in]*/, 
                                             VARIANT* pVal/*[in,out]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetProgramLine(long Control/*[in]*/, long coord/*[in]*/, 
                                            long lineNumber/*[in]*/, BSTR* pVal/*[out]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetInputLong(long Control/*[in]*/, long num/*[in]*/, 
                                          long* pVal/*[out]*/);
  HRESULT         __fastcall GetOutputLong(long Control/*[in]*/, long num/*[in]*/, 
                                           long* pVal/*[out]*/);
  HRESULT         __fastcall GetCommandLong(long Control/*[in]*/, long num/*[in]*/, 
                                            long* pVal/*[out]*/);
  HRESULT         __fastcall GetStatusLong(long Control/*[in]*/, long num/*[in]*/, 
                                           long* pVal/*[out]*/);
  HRESULT         __fastcall get_HomeInProgress(long Control/*[in]*/, 
                                                VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HomeInProgress(long Control/*[in]*/);
  HRESULT         __fastcall get_SpindleCmdRPM(long Control/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_SpindleCmdRPM(long Control/*[in]*/);
  HRESULT         __fastcall command(long Control/*[in]*/, long id/*[in]*/, long iv/*[in]*/, 
                                     double fv/*[in]*/, BSTR bStr/*[in]*/, 
                                     VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall AddErrorRecord(long Control/*[in]*/, long errnum/*[in]*/, 
                                            Pcommserverlib_tlb::NCERRORMODE em/*[in]*/, 
                                            Pcommserverlib_tlb::NCERRORTYPE et/*[in]*/, 
                                            long Line/*[in]*/, short ax/*[in]*/, BSTR Msg/*[in]*/);
  HRESULT         __fastcall GetParametricDouble(long Control/*[in]*/, long coord/*[in]*/, 
                                                 BSTR region/*[in]*/, long index/*[in]*/, 
                                                 double* pVal/*[out]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SetParametricDouble(long Control/*[in]*/, long coord/*[in]*/, 
                                                 BSTR region/*[in]*/, long index/*[in]*/, 
                                                 double newVal/*[in]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetSelectedAxisChar(long Control/*[in]*/, short* pAxChar/*[out]*/);
  HRESULT         __fastcall get_CurrentErrorLevel(long Control/*[in]*/, 
                                                   Pcommserverlib_tlb::NCERRORMODE* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCERRORMODE __fastcall get_CurrentErrorLevel(long Control/*[in]*/);
  HRESULT         __fastcall set_CurrentErrorLevel(long Control/*[in]*/, 
                                                   Pcommserverlib_tlb::NCERRORMODE pVal/*[in]*/);
  HRESULT         __fastcall GetAxisFormat(long Control/*[in]*/, long coord/*[in]*/, 
                                           short ax/*[in]*/, VARIANT_BOOL bMetric/*[in]*/, 
                                           long* pLen/*[out]*/, long* pDecPlaces/*[out]*/);
  HRESULT         __fastcall GetAxisFormatStr(long Control/*[in]*/, long coord/*[in]*/, 
                                              short ax/*[in]*/, VARIANT_BOOL bMetric/*[in]*/, 
                                              BSTR* pVal/*[in,out]*/);
  HRESULT         __fastcall SetAxisFormat(long Control/*[in]*/, long coord/*[in]*/, 
                                           short ax/*[in]*/, VARIANT_BOOL bMetric/*[in]*/, 
                                           long len/*[in]*/, long decPlaces/*[in]*/);
  HRESULT         __fastcall GetFirstError(long Control/*[in]*/, BSTR* pHeader/*[in,out]*/, 
                                           BSTR* pMessage/*[in,out]*/, BSTR* pCode/*[in,out]*/, 
                                           BSTR* pFilename/*[in,out]*/, long* pCount/*[out]*/, 
                                           long* pChanged/*[out]*/);
  HRESULT         __fastcall GetNextError(long Control/*[in]*/, BSTR* pHeader/*[in,out]*/, 
                                          BSTR* pMessage/*[in,out]*/, BSTR* pCode/*[in,out]*/, 
                                          BSTR* pFilename/*[in,out]*/, VARIANT_BOOL* pbMore/*[out]*/);
  HRESULT         __fastcall OffsetsUpdateClear(long Control/*[in]*/, long clearMask/*[in]*/);
  HRESULT         __fastcall OffsetsUpdate(long Control/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall ReadErrorMsgBoxText(long Control/*[in]*/, long index/*[in]*/, 
                                                 long* pCount/*[out]*/, BSTR* pText/*[in,out]*/, 
                                                 BSTR* pTitle/*[in,out]*/);
  HRESULT         __fastcall ResetMsgBoxError(long Control/*[in]*/, long errRetVal/*[in]*/);
  HRESULT         __fastcall SaveParametricVars(long Control/*[in]*/);
  HRESULT         __fastcall LoadParametricVars(long Control/*[in]*/);
  HRESULT         __fastcall ResetCycleTime(long Control/*[in]*/);
  HRESULT         __fastcall GetToolGuageOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                                long tool/*[in]*/, VARIANT_BOOL bMulti/*[in]*/, 
                                                short ax/*[in]*/, VARIANT_BOOL bMetric/*[in]*/, 
                                                double* pVal/*[out]*/);
  HRESULT         __fastcall SetToolGuageOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                                long tool/*[in]*/, VARIANT_BOOL bMulti/*[in]*/, 
                                                short ax/*[in]*/, VARIANT_BOOL bMetric/*[in]*/, 
                                                double newVal/*[in]*/);
  HRESULT         __fastcall AutoSetToolOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                               long tool/*[in]*/, short axis/*[in]*/);
  HRESULT         __fastcall GetOffsetValue(long Control/*[in]*/, long coord/*[in]*/, 
                                            short axis/*[in]*/, 
                                            Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                            VARIANT_BOOL bMetric/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall SetOffsetValue(long Control/*[in]*/, long coord/*[in]*/, 
                                            short axis/*[in]*/, 
                                            Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                            VARIANT_BOOL bMetric/*[in]*/, 
                                            VARIANT_BOOL bConfirm/*[in]*/, double newVal/*[in]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall AutoSetWorkOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                               short axis/*[in]*/, 
                                               Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SearchText(long Control/*[in]*/, long coord/*[in]*/, BSTR text/*[in]*/, 
                                        VARIANT_BOOL bMatchCase/*[in]*/, 
                                        VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SearchTextNext(long Control/*[in]*/, long coord/*[in]*/, 
                                            BSTR text/*[in]*/, VARIANT_BOOL bMatchCase/*[in]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetBufferText(long Control/*[in]*/, long coord/*[in]*/, 
                                           VARIANT_BOOL bMDI/*[in]*/, BSTR* pVal/*[in,out]*/);
  HRESULT         __fastcall SetBufferText(long Control/*[in]*/, long coord/*[in]*/, 
                                           long repeat/*[in]*/, VARIANT_BOOL bMDI/*[in]*/, 
                                           BSTR newVal/*[in]*/);
  HRESULT         __fastcall GetProcessorClocks(double* pIO/*[out]*/, double* pLA/*[out]*/, 
                                                double* pParse/*[out]*/, double* pFormat/*[out]*/, 
                                                double* pWrite/*[out]*/);
  HRESULT         __fastcall get_CurrentErrorCount(long Control/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_CurrentErrorCount(long Control/*[in]*/);
  HRESULT         __fastcall get_BlocksPerSecond(long Control/*[in]*/, long coord/*[in]*/, 
                                                 long* pVal/*[out,retval]*/);
  long            __fastcall get_BlocksPerSecond(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall GetMetricInput(long Control/*[in]*/, long coord/*[in]*/, 
                                            VARIANT_BOOL* pVal/*[out]*/);
  HRESULT         __fastcall GetToolInfo(long Control/*[in]*/, long coord/*[in]*/, 
                                         long* pCurrentTool/*[out]*/, long* pNextTool/*[out]*/, 
                                         long* pHolder/*[out]*/, long* pHolderTool/*[out]*/);
  HRESULT         __fastcall GetToolData(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                                         VARIANT* pVal/*[in,out]*/);
  HRESULT         __fastcall ZeroAllTypeToolOffsets(long Control/*[in]*/, long coord/*[in]*/, 
                                                    Pcommserverlib_tlb::NCTOOLOFSTYPE type/*[in]*/);
  HRESULT         __fastcall SearchLine(long Control/*[in]*/, long coord/*[in]*/, long Line/*[in]*/, 
                                        VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetAxisMotor(long Control/*[in]*/, long coord/*[in]*/, 
                                          short axis/*[in]*/, long* pMotor/*[out]*/, 
                                          VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetMotorAxis(long Control/*[in]*/, long coord/*[in]*/, 
                                          long motor/*[in]*/, short* pAxis/*[out]*/, 
                                          VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetMotorPos(long Control/*[in]*/, long coord/*[in]*/, 
                                         long motor/*[in]*/, Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/, 
                                         BSTR* pAdr/*[out]*/, double* pPos/*[out]*/, 
                                         VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetAllAxisPos(long Control/*[in]*/, long coord/*[in]*/, 
                                           Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/, 
                                           LPSAFEARRAY* pvAdrArray/*[in,out]*/, 
                                           LPSAFEARRAY* pvPosArray/*[in,out]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetAllAxisPosStr(long Control/*[in]*/, long coord/*[in]*/, 
                                              Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/, 
                                              VARIANT_BOOL bCoord/*[in]*/, 
                                              LPSAFEARRAY* pvArray/*[in,out]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetMaxFeedrates(long Control/*[in]*/, long coord/*[in]*/, 
                                             double* pMaxPerRev/*[out]*/, 
                                             double* pMaxPerMinute/*[out]*/);
  HRESULT         __fastcall SetMaxFeedrates(long Control/*[in]*/, long coord/*[in]*/, 
                                             double MaxPerRev/*[in]*/, double MaxPerMinute/*[in]*/);
  HRESULT         __fastcall ClearOffsetValue(long Control/*[in]*/, long coord/*[in]*/, 
                                              short axis/*[in]*/, 
                                              Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                              VARIANT_BOOL bMetric/*[in]*/, double newVal/*[in]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetToolDataStruct(long Control/*[in]*/, long coord/*[in]*/, 
                                               long tool/*[in]*/, 
                                               Pcommserverlib_tlb::NCTOOL* pStruct/*[in,out]*/);
  HRESULT         __fastcall StartDataCollection(long Control/*[in]*/, long CollectionMSec/*[in]*/, 
                                                 long BufferSize/*[in]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall StopDataCollection(long Control/*[in]*/);
  HRESULT         __fastcall DataCollect(long Control/*[in]*/, long coord/*[in]*/, 
                                         LPSAFEARRAY* pvArray/*[in,out]*/, 
                                         VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall ResetPartsCount(long Control/*[in]*/);
  HRESULT         __fastcall ResetPartsTotal(long Control/*[in]*/);
  HRESULT         __fastcall GetWorkOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                           Pcommserverlib_tlb::NCCOORDTYPE* t/*[out]*/, 
                                           long* pExtendedVal/*[out]*/);
  HRESULT         __fastcall get_DataCollectionEnabled(long Control/*[in]*/, 
                                                       VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DataCollectionEnabled(long Control/*[in]*/);
  HRESULT         __fastcall get_DataCollectionResolution(long Control/*[in]*/, 
                                                          long* pVal/*[out,retval]*/);
  long            __fastcall get_DataCollectionResolution(long Control/*[in]*/);
  HRESULT         __fastcall GetLatheSetXDiameter(long Control/*[in]*/, long coord/*[in]*/, 
                                                  VARIANT_BOOL bMetric/*[in]*/, 
                                                  double* pVal/*[out]*/);
  HRESULT         __fastcall SetLatheSetXDiameter(long Control/*[in]*/, long coord/*[in]*/, 
                                                  VARIANT_BOOL bMetric/*[in]*/, 
                                                  double newVal/*[in]*/);

};
typedef TCOMIPmacNCT<IPmacNC> TCOMIPmacNC;

// *********************************************************************//
// DispIntf:  IPmacNC
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0A322163-C2E1-4152-ADED-91740ACE7513}
// *********************************************************************//
template<class T>
class IPmacNCDispT : public TAutoDriver<IPmacNC>
{
public:
  IPmacNCDispT(){}

  IPmacNCDispT(IPmacNC *pintf)
  {
    TAutoDriver<IPmacNC>::Bind(pintf, false);
  }

  IPmacNCDispT(IPmacNCPtr pintf)
  {
    TAutoDriver<IPmacNC>::Bind(pintf, true);
  }

  IPmacNCDispT& operator=(IPmacNC *pintf)
  {
    TAutoDriver<IPmacNC>::Bind(pintf, false);
    return *this;
  }

  IPmacNCDispT& operator=(IPmacNCPtr pintf)
  {
    TAutoDriver<IPmacNC>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_PmacNC));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_PmacNC);
  }

  HRESULT         __fastcall Open(long Device/*[in]*/, long Control/*[in]*/, 
                                  VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall Close(long Control/*[in]*/);
  HRESULT         __fastcall OpenFile(long Control/*[in]*/, long dwCoord/*[in]*/, 
                                      BSTR szFilePath/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall CloseFile(long Control/*[in]*/, long dwCoord/*[in]*/, 
                                       VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall get_Title(long Control/*[in]*/, BSTR* pVal/*[out,retval]*/);
  BSTR            __fastcall get_Title(long Control/*[in]*/);
  HRESULT         __fastcall set_Title(long Control/*[in]*/, BSTR pVal/*[in]*/);
  HRESULT         __fastcall get_DeviceNumber(long Control/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_DeviceNumber(long Control/*[in]*/);
  HRESULT         __fastcall get_IsOpen(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsOpen(long Control/*[in]*/);
  HRESULT         __fastcall SetMachineMode(long Control/*[in]*/, 
                                            Pcommserverlib_tlb::NCMODE mode/*[in]*/);
  HRESULT         __fastcall GetMachineMode(long Control/*[in]*/, 
                                            Pcommserverlib_tlb::NCMODE* pMode/*[out]*/);
  HRESULT         __fastcall get_mode(long Control/*[in]*/, 
                                      Pcommserverlib_tlb::NCMODE* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCMODE __fastcall get_mode(long Control/*[in]*/);
  HRESULT         __fastcall set_mode(long Control/*[in]*/, Pcommserverlib_tlb::NCMODE pVal/*[in]*/);
  HRESULT         __fastcall GetRegistryBool(long Control/*[in]*/, BSTR section/*[in]*/, 
                                             BSTR name/*[in]*/, VARIANT_BOOL def/*[in]*/, 
                                             VARIANT_BOOL* pVal/*[out]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SetRegistryBool(long Control/*[in]*/, BSTR section/*[in]*/, 
                                             BSTR name/*[in]*/, VARIANT_BOOL bVal/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetRegistryLong(long Control/*[in]*/, BSTR section/*[in]*/, 
                                             BSTR name/*[in]*/, long def/*[in]*/, 
                                             long* pVal/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SetRegistryLong(long Control/*[in]*/, BSTR section/*[in]*/, 
                                             BSTR name/*[in]*/, long lVal/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetRegistryString(long Control/*[in]*/, BSTR section/*[in]*/, 
                                               BSTR name/*[in]*/, BSTR def/*[in]*/, 
                                               BSTR* pVal/*[in,out]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SetRegistryString(long Control/*[in]*/, BSTR section/*[in]*/, 
                                               BSTR name/*[in]*/, BSTR Val/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetRegistryDouble(long Control/*[in]*/, BSTR section/*[in]*/, 
                                               BSTR name/*[in]*/, double def/*[in]*/, 
                                               double* pVal/*[out]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SetRegistryDouble(long Control/*[in]*/, BSTR section/*[in]*/, 
                                               BSTR name/*[in]*/, double Val/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall get_CoordSystem(long Control/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_CoordSystem(long Control/*[in]*/);
  HRESULT         __fastcall set_CoordSystem(long Control/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_NumCoordSystems(long Control/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_NumCoordSystems(long Control/*[in]*/);
  HRESULT         __fastcall get_SingleBlock(long Control/*[in]*/, 
                                             VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SingleBlock(long Control/*[in]*/);
  HRESULT         __fastcall set_SingleBlock(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_BlockDelete(long Control/*[in]*/, 
                                             VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_BlockDelete(long Control/*[in]*/);
  HRESULT         __fastcall set_BlockDelete(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_OptionalStop(long Control/*[in]*/, 
                                              VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_OptionalStop(long Control/*[in]*/);
  HRESULT         __fastcall set_OptionalStop(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_MachineLock(long Control/*[in]*/, 
                                             VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_MachineLock(long Control/*[in]*/);
  HRESULT         __fastcall set_MachineLock(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_DryRun(long Control/*[in]*/, long coord/*[in]*/, 
                                        VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DryRun(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall set_DryRun(long Control/*[in]*/, long coord/*[in]*/, 
                                        VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_MachineType(long Control/*[in]*/, 
                                             Pcommserverlib_tlb::NCMACHINETYPE* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCMACHINETYPE __fastcall get_MachineType(long Control/*[in]*/);
  HRESULT         __fastcall get_JogSelect(long Control/*[in]*/, 
                                           Pcommserverlib_tlb::NCJOGSELECT* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCJOGSELECT __fastcall get_JogSelect(long Control/*[in]*/);
  HRESULT         __fastcall set_JogSelect(long Control/*[in]*/, 
                                           Pcommserverlib_tlb::NCJOGSELECT pVal/*[in]*/);
  HRESULT         __fastcall get_SpeedSelect(long Control/*[in]*/, 
                                             Pcommserverlib_tlb::NCSPEEDSELECT* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCSPEEDSELECT __fastcall get_SpeedSelect(long Control/*[in]*/);
  HRESULT         __fastcall set_SpeedSelect(long Control/*[in]*/, 
                                             Pcommserverlib_tlb::NCSPEEDSELECT pVal/*[in]*/);
  HRESULT         __fastcall get_ProgramLoaded(long Control/*[in]*/, long coord/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_ProgramLoaded(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall GetAxisEnabled(long Control/*[in]*/, long coord/*[in]*/, 
                                            short axis/*[in]*/, VARIANT_BOOL* pVal/*[out]*/);
  HRESULT         __fastcall GetProgramName(long Control/*[in]*/, long coord/*[in]*/, 
                                            VARIANT_BOOL bMain/*[in]*/, BSTR* pVal/*[in,out]*/);
  HRESULT         __fastcall GetProgramPath(long Control/*[in]*/, long coord/*[in]*/, 
                                            VARIANT_BOOL bMain/*[in]*/, BSTR* pVal/*[in,out]*/);
  HRESULT         __fastcall get_Semaphore(long Control/*[in]*/, long coord/*[in]*/, 
                                           long* pVal/*[out,retval]*/);
  long            __fastcall get_Semaphore(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall set_Semaphore(long Control/*[in]*/, long coord/*[in]*/, 
                                           long pVal/*[in]*/);
  HRESULT         __fastcall GetProgramStatus(long Control/*[in]*/, long coord/*[in]*/, 
                                              long* pProgID/*[out]*/, long* pNumLines/*[out]*/, 
                                              long* pLine/*[out]*/, long* pParseLine/*[out]*/, 
                                              long* pRepeat/*[out]*/, long* pCount/*[out]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetProgramNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                              long* pVal/*[out]*/);
  HRESULT         __fastcall GetCurrentLabel(long Control/*[in]*/, long coord/*[in]*/, 
                                             long* pVal/*[out]*/);
  HRESULT         __fastcall get_DistanceSelect(long Control/*[in]*/, 
                                                Pcommserverlib_tlb::NCSPEEDSELECT* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCSPEEDSELECT __fastcall get_DistanceSelect(long Control/*[in]*/);
  HRESULT         __fastcall set_DistanceSelect(long Control/*[in]*/, 
                                                Pcommserverlib_tlb::NCSPEEDSELECT pVal/*[in]*/);
  HRESULT         __fastcall GetJogStep(long Control/*[in]*/, long coord/*[in]*/, 
                                        double* pVal/*[out]*/);
  HRESULT         __fastcall GetHandleStep(long Control/*[in]*/, long coord/*[in]*/, 
                                           double* pVal/*[out]*/);
  HRESULT         __fastcall SetOrigin(long Control/*[in]*/, long coord/*[in]*/, 
                                       VARIANT_BOOL bOrginAll/*[in]*/, 
                                       Pcommserverlib_tlb::NCADDRESS adr/*[in]*/, 
                                       VARIANT_BOOL bClear/*[in]*/, double Val/*[in]*/, 
                                       VARIANT_BOOL metric/*[in]*/);
  HRESULT         __fastcall ZeroShift(long Control/*[in]*/, long coord/*[in]*/, 
                                       VARIANT_BOOL bShiftAll/*[in]*/, 
                                       Pcommserverlib_tlb::NCADDRESS adr/*[in]*/, 
                                       VARIANT_BOOL bClear/*[in]*/, double Val/*[in]*/, 
                                       VARIANT_BOOL bMetric/*[in]*/);
  HRESULT         __fastcall GetVectorVelocity(long Control/*[in]*/, long coord/*[in]*/, 
                                               double* pVal/*[out]*/);
  HRESULT         __fastcall ReadMdiBuffer(long Control/*[in]*/, long coord/*[in]*/, 
                                           long* hDlg/*[in]*/, long idControl/*[in]*/);
  HRESULT         __fastcall LoadMdiBuffer(long Control/*[in]*/, long coord/*[in]*/, 
                                           long* hDlg/*[in]*/, long idControl/*[in]*/, 
                                           long nRepeat/*[in]*/);
  HRESULT         __fastcall ClearTextBuffer(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall GetCurrentGValue(long Control/*[in]*/, long coord/*[in]*/, 
                                              long group/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall get_AxisSelect(long Control/*[in]*/, long coord/*[in]*/, 
                                            Pcommserverlib_tlb::NCAXISSELECT* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCAXISSELECT __fastcall get_AxisSelect(long Control/*[in]*/, 
                                                             long coord/*[in]*/);
  HRESULT         __fastcall set_AxisSelect(long Control/*[in]*/, long coord/*[in]*/, 
                                            Pcommserverlib_tlb::NCAXISSELECT pVal/*[in]*/);
  HRESULT         __fastcall GetInposition(long Control/*[in]*/, long coord/*[in]*/, 
                                           VARIANT_BOOL* pVal/*[out]*/);
  HRESULT         __fastcall get_BufferMode(long Control/*[in]*/, long coord/*[in]*/, 
                                            Pcommserverlib_tlb::NCBUFFERMODE* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCBUFFERMODE __fastcall get_BufferMode(long Control/*[in]*/, 
                                                             long coord/*[in]*/);
  HRESULT         __fastcall set_BufferMode(long Control/*[in]*/, long coord/*[in]*/, 
                                            Pcommserverlib_tlb::NCBUFFERMODE pVal/*[in]*/);
  HRESULT         __fastcall GetProgramMode(long Control/*[in]*/, long coord/*[in]*/, 
                                            Pcommserverlib_tlb::DEVPROGRAMMODE* pVal/*[out]*/);
  HRESULT         __fastcall GetSelectedBufferMode(long Control/*[in]*/, 
                                                   Pcommserverlib_tlb::NCBUFFERMODE* pVal/*[out]*/);
  HRESULT         __fastcall GetSelectedAxisMotionMode(long Control/*[in]*/, 
                                                       Pcommserverlib_tlb::DEVMOTIONMODE* pVal/*[out]*/);
  HRESULT         __fastcall GetProgramMotionMode(long Control/*[in]*/, long coord/*[in]*/, 
                                                  Pcommserverlib_tlb::DEVMOTIONMODE* pVal/*[out]*/);
  HRESULT         __fastcall GetBufferOpen(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out]*/);
  HRESULT         __fastcall GetBufferRemaining(long Control/*[in]*/, long coord/*[in]*/, 
                                                long* pRemain/*[out]*/, long* pParsed/*[out]*/);
  HRESULT         __fastcall get_SpindleSelect(long Control/*[in]*/, 
                                               Pcommserverlib_tlb::NCSPINDLESELECT* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCSPINDLESELECT __fastcall get_SpindleSelect(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleSelect(long Control/*[in]*/, 
                                               Pcommserverlib_tlb::NCSPINDLESELECT pVal/*[in]*/);
  HRESULT         __fastcall get_SpindleRPM(long Control/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_SpindleRPM(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleRPM(long Control/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_SpindleCSS(long Control/*[in]*/, double* pVal/*[out,retval]*/);
  double          __fastcall get_SpindleCSS(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleCSS(long Control/*[in]*/, double pVal/*[in]*/);
  HRESULT         __fastcall get_SpindleCSSMode(long Control/*[in]*/, 
                                                VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SpindleCSSMode(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleCSSMode(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_SpindleCSSUnits(long Control/*[in]*/, double* pVal/*[out,retval]*/);
  double          __fastcall get_SpindleCSSUnits(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleCSSUnits(long Control/*[in]*/, double pVal/*[in]*/);
  HRESULT         __fastcall GetSpindleActRPM(long Control/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall get_SpindleMaxRPM(long Control/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_SpindleMaxRPM(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleMaxRPM(long Control/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_SpindleOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                                 long* pVal/*[out,retval]*/);
  long            __fastcall get_SpindleOverride(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall set_SpindleOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                                 long pVal/*[in]*/);
  HRESULT         __fastcall get_FeedrateOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                                  double* pVal/*[out,retval]*/);
  double          __fastcall get_FeedrateOverride(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall set_FeedrateOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                                  double pVal/*[in]*/);
  HRESULT         __fastcall get_RapidOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                               double* pVal/*[out,retval]*/);
  double          __fastcall get_RapidOverride(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall set_RapidOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                               double pVal/*[in]*/);
  HRESULT         __fastcall get_CoolantSelect(long Control/*[in]*/, 
                                               Pcommserverlib_tlb::NCCLNTSELECT* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCCLNTSELECT __fastcall get_CoolantSelect(long Control/*[in]*/);
  HRESULT         __fastcall set_CoolantSelect(long Control/*[in]*/, 
                                               Pcommserverlib_tlb::NCCLNTSELECT pVal/*[in]*/);
  HRESULT         __fastcall get_TimebaseMode(long Control/*[in]*/, long coord/*[in]*/, 
                                              Pcommserverlib_tlb::NCTIMEBASEMODE* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCTIMEBASEMODE __fastcall get_TimebaseMode(long Control/*[in]*/, 
                                                                 long coord/*[in]*/);
  HRESULT         __fastcall set_TimebaseMode(long Control/*[in]*/, long coord/*[in]*/, 
                                              Pcommserverlib_tlb::NCTIMEBASEMODE pVal/*[in]*/);
  HRESULT         __fastcall GetFeedrate(long Control/*[in]*/, long coord/*[in]*/, 
                                         Pcommserverlib_tlb::NCFEEDRATEMODE* pMode/*[out]*/, 
                                         double* pVal/*[out]*/);
  HRESULT         __fastcall SetFeedrate(long Control/*[in]*/, long coord/*[in]*/, 
                                         Pcommserverlib_tlb::NCFEEDRATEMODE mode/*[in]*/, 
                                         double newVal/*[in]*/);
  HRESULT         __fastcall get_ThreadLead(long Control/*[in]*/, long coord/*[in]*/, 
                                            double* pVal/*[out,retval]*/);
  double          __fastcall get_ThreadLead(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall set_ThreadLead(long Control/*[in]*/, long coord/*[in]*/, 
                                            double pVal/*[in]*/);
  HRESULT         __fastcall GetNumOfTools(long Control/*[in]*/, long coord/*[in]*/, 
                                           long* pVal/*[out]*/);
  HRESULT         __fastcall get_CurrentToolNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                   long* pVal/*[out,retval]*/);
  long            __fastcall get_CurrentToolNumber(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall set_CurrentToolNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                   long pVal/*[in]*/);
  HRESULT         __fastcall get_NextToolNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                long* pVal/*[out,retval]*/);
  long            __fastcall get_NextToolNumber(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall set_NextToolNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                long pVal/*[in]*/);
  HRESULT         __fastcall get_CurrentToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                         long* pVal/*[out,retval]*/);
  long            __fastcall get_CurrentToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall set_CurrentToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                         long pVal/*[in]*/);
  HRESULT         __fastcall SetToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                 long tool/*[in]*/, long holder/*[in]*/);
  HRESULT         __fastcall GetToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                                 long tool/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall ZeroAllToolOffsets(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall GetTypeToolOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                               long tool/*[in]*/, BSTR chAxis/*[in]*/, 
                                               Pcommserverlib_tlb::NCTOOLOFSTYPE type/*[in]*/, 
                                               VARIANT_BOOL bMetric/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall SetTypeToolOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                               long tool/*[in]*/, BSTR chAxis/*[in]*/, 
                                               Pcommserverlib_tlb::NCTOOLOFSTYPE type/*[in]*/, 
                                               VARIANT_BOOL bMetric/*[in]*/, 
                                               VARIANT_BOOL bConfirm/*[in]*/, double newVal/*[in]*/
                                               , VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall get_ToolInSpindle(long Control/*[in]*/, long coord/*[in]*/, 
                                               long* pVal/*[out,retval]*/);
  long            __fastcall get_ToolInSpindle(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall set_ToolInSpindle(long Control/*[in]*/, long coord/*[in]*/, 
                                               long pVal/*[in]*/);
  HRESULT         __fastcall get_ToolDirection(long Control/*[in]*/, long coord/*[in]*/, 
                                               long tool/*[in]*/, 
                                               Pcommserverlib_tlb::NCTOOLDIRECTION* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCTOOLDIRECTION __fastcall get_ToolDirection(long Control/*[in]*/, 
                                                                   long coord/*[in]*/, 
                                                                   long tool/*[in]*/);
  HRESULT         __fastcall set_ToolDirection(long Control/*[in]*/, long coord/*[in]*/, 
                                               long tool/*[in]*/, 
                                               Pcommserverlib_tlb::NCTOOLDIRECTION pVal/*[in]*/);
  HRESULT         __fastcall get_SpindleCountsPerRev(long Control/*[in]*/, 
                                                     double* pVal/*[out,retval]*/);
  double          __fastcall get_SpindleCountsPerRev(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleCountsPerRev(long Control/*[in]*/, double pVal/*[in]*/);
  HRESULT         __fastcall get_SpindleGearRatio(long Control/*[in]*/, double* pVal/*[out,retval]*/);
  double          __fastcall get_SpindleGearRatio(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleGearRatio(long Control/*[in]*/, double pVal/*[in]*/);
  HRESULT         __fastcall get_SpindleDetect(long Control/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SpindleDetect(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleDetect(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_SpindleAtSpeed(long Control/*[in]*/, 
                                                VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SpindleAtSpeed(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleAtSpeed(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_SpindleAtZero(long Control/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SpindleAtZero(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleAtZero(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_SpindleFPR(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_SpindleFPR(long Control/*[in]*/);
  HRESULT         __fastcall set_SpindleFPR(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_HomeInit(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HomeInit(long Control/*[in]*/);
  HRESULT         __fastcall set_HomeInit(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_HomeMotorMask(long Control/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_HomeMotorMask(long Control/*[in]*/);
  HRESULT         __fastcall set_HomeMotorMask(long Control/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall GetActiveGCode(long Control/*[in]*/, long coord/*[in]*/, 
                                            long group/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall GetActiveGCodeStr(long Control/*[in]*/, long coord/*[in]*/, 
                                               long group/*[in]*/, BSTR* pVal/*[in,out]*/);
  HRESULT         __fastcall GetToolOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                           long* pVal/*[out]*/);
  HRESULT         __fastcall GetCompOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                           long* pVal/*[out]*/);
  HRESULT         __fastcall UpdateAllMotors(long Control/*[in]*/);
  HRESULT         __fastcall GetOperatingTime(long Control/*[in]*/, long* pDays/*[out]*/, 
                                              long* pHours/*[out]*/, long* pMinutes/*[out]*/, 
                                              long* pSeconds/*[out]*/);
  HRESULT         __fastcall GetTotalCuttingTime(long Control/*[in]*/, long* pDays/*[out]*/, 
                                                 long* pHours/*[out]*/, long* pMinutes/*[out]*/, 
                                                 long* pSeconds/*[out]*/);
  HRESULT         __fastcall GetRunningTime(long Control/*[in]*/, long* pDays/*[out]*/, 
                                            long* pHours/*[out]*/, long* pMinutes/*[out]*/, 
                                            long* pSeconds/*[out]*/);
  HRESULT         __fastcall GetPartTime(long Control/*[in]*/, long* pHours/*[out]*/, 
                                         long* pMinutes/*[out]*/, long* pSeconds/*[out]*/);
  HRESULT         __fastcall GetCycleCuttingTime(long Control/*[in]*/, long* pHours/*[out]*/, 
                                                 long* pMinutes/*[out]*/, long* pSeconds/*[out]*/);
  HRESULT         __fastcall GetCycleTime(long Control/*[in]*/, long* pHours/*[out]*/, 
                                          long* pMinutes/*[out]*/, long* Seconds/*[out]*/);
  HRESULT         __fastcall get_PartsRequired(long Control/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_PartsRequired(long Control/*[in]*/);
  HRESULT         __fastcall set_PartsRequired(long Control/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_PartsCount(long Control/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_PartsCount(long Control/*[in]*/);
  HRESULT         __fastcall set_PartsCount(long Control/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall get_PartsTotal(long Control/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_PartsTotal(long Control/*[in]*/);
  HRESULT         __fastcall set_PartsTotal(long Control/*[in]*/, long pVal/*[in]*/);
  HRESULT         __fastcall GetNumDisplayedAxis(long Control/*[in]*/, long coord/*[in]*/, 
                                                 long* pVal/*[out]*/);
  HRESULT         __fastcall GetNumDisplayAxisTotal(long Control/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall GetMotorPosStr(long Control/*[in]*/, long coord/*[in]*/, 
                                            long motor/*[in]*/, 
                                            Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/, 
                                            VARIANT_BOOL bCombined/*[in]*/, BSTR* pAdr/*[in,out]*/, 
                                            BSTR* pPos/*[in,out]*/, VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall get_IsSpindle(long Control/*[in]*/, long coord/*[in]*/, 
                                           long motor/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsSpindle(long Control/*[in]*/, long coord/*[in]*/, 
                                           long motor/*[in]*/);
  HRESULT         __fastcall set_IsSpindle(long Control/*[in]*/, long coord/*[in]*/, 
                                           long motor/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall get_IsDisplayed(long Control/*[in]*/, long coord/*[in]*/, 
                                             long motor/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_IsDisplayed(long Control/*[in]*/, long coord/*[in]*/, 
                                             long motor/*[in]*/);
  HRESULT         __fastcall set_IsDisplayed(long Control/*[in]*/, long coord/*[in]*/, 
                                             long motor/*[in]*/, VARIANT_BOOL pVal/*[in]*/);
  HRESULT         __fastcall GetMotorUnitsStr(long Control/*[in]*/, long coord/*[in]*/, 
                                              long motor/*[in]*/, BSTR* pVal/*[in,out]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetProgramLines(long Control/*[in]*/, long coord/*[in]*/, 
                                             long start/*[in]*/, long count/*[in]*/, 
                                             VARIANT* pVal/*[in,out]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetProgramLine(long Control/*[in]*/, long coord/*[in]*/, 
                                            long lineNumber/*[in]*/, BSTR* pVal/*[out]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetInputLong(long Control/*[in]*/, long num/*[in]*/, 
                                          long* pVal/*[out]*/);
  HRESULT         __fastcall GetOutputLong(long Control/*[in]*/, long num/*[in]*/, 
                                           long* pVal/*[out]*/);
  HRESULT         __fastcall GetCommandLong(long Control/*[in]*/, long num/*[in]*/, 
                                            long* pVal/*[out]*/);
  HRESULT         __fastcall GetStatusLong(long Control/*[in]*/, long num/*[in]*/, 
                                           long* pVal/*[out]*/);
  HRESULT         __fastcall get_HomeInProgress(long Control/*[in]*/, 
                                                VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_HomeInProgress(long Control/*[in]*/);
  HRESULT         __fastcall get_SpindleCmdRPM(long Control/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_SpindleCmdRPM(long Control/*[in]*/);
  HRESULT         __fastcall command(long Control/*[in]*/, long id/*[in]*/, long iv/*[in]*/, 
                                     double fv/*[in]*/, BSTR bStr/*[in]*/, 
                                     VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall AddErrorRecord(long Control/*[in]*/, long errnum/*[in]*/, 
                                            Pcommserverlib_tlb::NCERRORMODE em/*[in]*/, 
                                            Pcommserverlib_tlb::NCERRORTYPE et/*[in]*/, 
                                            long Line/*[in]*/, short ax/*[in]*/, BSTR Msg/*[in]*/);
  HRESULT         __fastcall GetParametricDouble(long Control/*[in]*/, long coord/*[in]*/, 
                                                 BSTR region/*[in]*/, long index/*[in]*/, 
                                                 double* pVal/*[out]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SetParametricDouble(long Control/*[in]*/, long coord/*[in]*/, 
                                                 BSTR region/*[in]*/, long index/*[in]*/, 
                                                 double newVal/*[in]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetSelectedAxisChar(long Control/*[in]*/, short* pAxChar/*[out]*/);
  HRESULT         __fastcall get_CurrentErrorLevel(long Control/*[in]*/, 
                                                   Pcommserverlib_tlb::NCERRORMODE* pVal/*[out,retval]*/);
  Pcommserverlib_tlb::NCERRORMODE __fastcall get_CurrentErrorLevel(long Control/*[in]*/);
  HRESULT         __fastcall set_CurrentErrorLevel(long Control/*[in]*/, 
                                                   Pcommserverlib_tlb::NCERRORMODE pVal/*[in]*/);
  HRESULT         __fastcall GetAxisFormat(long Control/*[in]*/, long coord/*[in]*/, 
                                           short ax/*[in]*/, VARIANT_BOOL bMetric/*[in]*/, 
                                           long* pLen/*[out]*/, long* pDecPlaces/*[out]*/);
  HRESULT         __fastcall GetAxisFormatStr(long Control/*[in]*/, long coord/*[in]*/, 
                                              short ax/*[in]*/, VARIANT_BOOL bMetric/*[in]*/, 
                                              BSTR* pVal/*[in,out]*/);
  HRESULT         __fastcall SetAxisFormat(long Control/*[in]*/, long coord/*[in]*/, 
                                           short ax/*[in]*/, VARIANT_BOOL bMetric/*[in]*/, 
                                           long len/*[in]*/, long decPlaces/*[in]*/);
  HRESULT         __fastcall GetFirstError(long Control/*[in]*/, BSTR* pHeader/*[in,out]*/, 
                                           BSTR* pMessage/*[in,out]*/, BSTR* pCode/*[in,out]*/, 
                                           BSTR* pFilename/*[in,out]*/, long* pCount/*[out]*/, 
                                           long* pChanged/*[out]*/);
  HRESULT         __fastcall GetNextError(long Control/*[in]*/, BSTR* pHeader/*[in,out]*/, 
                                          BSTR* pMessage/*[in,out]*/, BSTR* pCode/*[in,out]*/, 
                                          BSTR* pFilename/*[in,out]*/, VARIANT_BOOL* pbMore/*[out]*/);
  HRESULT         __fastcall OffsetsUpdateClear(long Control/*[in]*/, long clearMask/*[in]*/);
  HRESULT         __fastcall OffsetsUpdate(long Control/*[in]*/, long* pVal/*[out]*/);
  HRESULT         __fastcall ReadErrorMsgBoxText(long Control/*[in]*/, long index/*[in]*/, 
                                                 long* pCount/*[out]*/, BSTR* pText/*[in,out]*/, 
                                                 BSTR* pTitle/*[in,out]*/);
  HRESULT         __fastcall ResetMsgBoxError(long Control/*[in]*/, long errRetVal/*[in]*/);
  HRESULT         __fastcall SaveParametricVars(long Control/*[in]*/);
  HRESULT         __fastcall LoadParametricVars(long Control/*[in]*/);
  HRESULT         __fastcall ResetCycleTime(long Control/*[in]*/);
  HRESULT         __fastcall GetToolGuageOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                                long tool/*[in]*/, VARIANT_BOOL bMulti/*[in]*/, 
                                                short ax/*[in]*/, VARIANT_BOOL bMetric/*[in]*/, 
                                                double* pVal/*[out]*/);
  HRESULT         __fastcall SetToolGuageOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                                long tool/*[in]*/, VARIANT_BOOL bMulti/*[in]*/, 
                                                short ax/*[in]*/, VARIANT_BOOL bMetric/*[in]*/, 
                                                double newVal/*[in]*/);
  HRESULT         __fastcall AutoSetToolOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                               long tool/*[in]*/, short axis/*[in]*/);
  HRESULT         __fastcall GetOffsetValue(long Control/*[in]*/, long coord/*[in]*/, 
                                            short axis/*[in]*/, 
                                            Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                            VARIANT_BOOL bMetric/*[in]*/, double* pVal/*[out]*/);
  HRESULT         __fastcall SetOffsetValue(long Control/*[in]*/, long coord/*[in]*/, 
                                            short axis/*[in]*/, 
                                            Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                            VARIANT_BOOL bMetric/*[in]*/, 
                                            VARIANT_BOOL bConfirm/*[in]*/, double newVal/*[in]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall AutoSetWorkOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                               short axis/*[in]*/, 
                                               Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SearchText(long Control/*[in]*/, long coord/*[in]*/, BSTR text/*[in]*/
                                        , VARIANT_BOOL bMatchCase/*[in]*/, 
                                        VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall SearchTextNext(long Control/*[in]*/, long coord/*[in]*/, 
                                            BSTR text/*[in]*/, VARIANT_BOOL bMatchCase/*[in]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetBufferText(long Control/*[in]*/, long coord/*[in]*/, 
                                           VARIANT_BOOL bMDI/*[in]*/, BSTR* pVal/*[in,out]*/);
  HRESULT         __fastcall SetBufferText(long Control/*[in]*/, long coord/*[in]*/, 
                                           long repeat/*[in]*/, VARIANT_BOOL bMDI/*[in]*/, 
                                           BSTR newVal/*[in]*/);
  HRESULT         __fastcall GetProcessorClocks(double* pIO/*[out]*/, double* pLA/*[out]*/, 
                                                double* pParse/*[out]*/, double* pFormat/*[out]*/, 
                                                double* pWrite/*[out]*/);
  HRESULT         __fastcall get_CurrentErrorCount(long Control/*[in]*/, long* pVal/*[out,retval]*/);
  long            __fastcall get_CurrentErrorCount(long Control/*[in]*/);
  HRESULT         __fastcall get_BlocksPerSecond(long Control/*[in]*/, long coord/*[in]*/, 
                                                 long* pVal/*[out,retval]*/);
  long            __fastcall get_BlocksPerSecond(long Control/*[in]*/, long coord/*[in]*/);
  HRESULT         __fastcall GetMetricInput(long Control/*[in]*/, long coord/*[in]*/, 
                                            VARIANT_BOOL* pVal/*[out]*/);
  HRESULT         __fastcall GetToolInfo(long Control/*[in]*/, long coord/*[in]*/, 
                                         long* pCurrentTool/*[out]*/, long* pNextTool/*[out]*/, 
                                         long* pHolder/*[out]*/, long* pHolderTool/*[out]*/);
  HRESULT         __fastcall GetToolData(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/
                                         , VARIANT* pVal/*[in,out]*/);
  HRESULT         __fastcall ZeroAllTypeToolOffsets(long Control/*[in]*/, long coord/*[in]*/, 
                                                    Pcommserverlib_tlb::NCTOOLOFSTYPE type/*[in]*/);
  HRESULT         __fastcall SearchLine(long Control/*[in]*/, long coord/*[in]*/, long Line/*[in]*/
                                        , VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetAxisMotor(long Control/*[in]*/, long coord/*[in]*/, 
                                          short axis/*[in]*/, long* pMotor/*[out]*/, 
                                          VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetMotorAxis(long Control/*[in]*/, long coord/*[in]*/, 
                                          long motor/*[in]*/, short* pAxis/*[out]*/, 
                                          VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetMotorPos(long Control/*[in]*/, long coord/*[in]*/, 
                                         long motor/*[in]*/, Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/
                                         , BSTR* pAdr/*[out]*/, double* pPos/*[out]*/, 
                                         VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetAllAxisPos(long Control/*[in]*/, long coord/*[in]*/, 
                                           Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/, 
                                           LPSAFEARRAY* pvAdrArray/*[in,out]*/, 
                                           LPSAFEARRAY* pvPosArray/*[in,out]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetAllAxisPosStr(long Control/*[in]*/, long coord/*[in]*/, 
                                              Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/, 
                                              VARIANT_BOOL bCoord/*[in]*/, 
                                              LPSAFEARRAY* pvArray/*[in,out]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetMaxFeedrates(long Control/*[in]*/, long coord/*[in]*/, 
                                             double* pMaxPerRev/*[out]*/, 
                                             double* pMaxPerMinute/*[out]*/);
  HRESULT         __fastcall SetMaxFeedrates(long Control/*[in]*/, long coord/*[in]*/, 
                                             double MaxPerRev/*[in]*/, double MaxPerMinute/*[in]*/);
  HRESULT         __fastcall ClearOffsetValue(long Control/*[in]*/, long coord/*[in]*/, 
                                              short axis/*[in]*/, 
                                              Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                              VARIANT_BOOL bMetric/*[in]*/, double newVal/*[in]*/, 
                                              VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall GetToolDataStruct(long Control/*[in]*/, long coord/*[in]*/, 
                                               long tool/*[in]*/, 
                                               /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::NCTOOL* pStruct)*/ TVariant&  pStruct);
  HRESULT         __fastcall StartDataCollection(long Control/*[in]*/, long CollectionMSec/*[in]*/, 
                                                 long BufferSize/*[in]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall StopDataCollection(long Control/*[in]*/);
  HRESULT         __fastcall DataCollect(long Control/*[in]*/, long coord/*[in]*/, 
                                         LPSAFEARRAY* pvArray/*[in,out]*/, 
                                         VARIANT_BOOL* pbSuccess/*[out]*/);
  HRESULT         __fastcall ResetPartsCount(long Control/*[in]*/);
  HRESULT         __fastcall ResetPartsTotal(long Control/*[in]*/);
  HRESULT         __fastcall GetWorkOffset(long Control/*[in]*/, long coord/*[in]*/, 
                                           Pcommserverlib_tlb::NCCOORDTYPE* t/*[out]*/, 
                                           long* pExtendedVal/*[out]*/);
  HRESULT         __fastcall get_DataCollectionEnabled(long Control/*[in]*/, 
                                                       VARIANT_BOOL* pVal/*[out,retval]*/);
  VARIANT_BOOL    __fastcall get_DataCollectionEnabled(long Control/*[in]*/);
  HRESULT         __fastcall get_DataCollectionResolution(long Control/*[in]*/, 
                                                          long* pVal/*[out,retval]*/);
  long            __fastcall get_DataCollectionResolution(long Control/*[in]*/);
  HRESULT         __fastcall GetLatheSetXDiameter(long Control/*[in]*/, long coord/*[in]*/, 
                                                  VARIANT_BOOL bMetric/*[in]*/, 
                                                  double* pVal/*[out]*/);
  HRESULT         __fastcall SetLatheSetXDiameter(long Control/*[in]*/, long coord/*[in]*/, 
                                                  VARIANT_BOOL bMetric/*[in]*/, 
                                                  double newVal/*[in]*/);

};
typedef IPmacNCDispT<IPmacNC> IPmacNCDisp;

// *********************************************************************//
// DispIntf:  _IPmacNCEvents
// Flags:     (4096) Dispatchable
// GUID:      {32C9ADDE-9F29-4658-8EC3-F1B8395FE19F}
// *********************************************************************//
template <class T>
class _IPmacNCEventsDispT : public TAutoDriver<_IPmacNCEvents>
{
public:
  _IPmacNCEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  HRESULT         __fastcall Error(long Control, Pcommserverlib_tlb::NCERRORMODE ErrMode, 
                                   Pcommserverlib_tlb::NCERRORTYPE ErrType, long ErrId, long ErrLine
                                   , short ErrAxis, BSTR ErrMsg);
  HRESULT         __fastcall Message(long Control, BSTR Msg);
  HRESULT         __fastcall Progress(long Control, long Percent);
  HRESULT         __fastcall MessageQuery(long Control, long msgID, BSTR Msg);
  HRESULT         __fastcall SearchProgress(long Control, long Line);
  HRESULT         __fastcall Change(long Control, long changeID, VARIANT vVal);
  HRESULT         __fastcall ClearError(long Control, Pcommserverlib_tlb::NCERRORMODE ErrMode, 
                                        Pcommserverlib_tlb::NCERRORTYPE ErrType, long ErrId, 
                                        long ErrLine, short ErrAxis);
  HRESULT         __fastcall DataReady(long Control);

};
typedef _IPmacNCEventsDispT<_IPmacNCEvents> _IPmacNCEventsDisp;

// *********************************************************************//
// SmartIntf: TCOMIPmacDevice
// Interface: IPmacDevice
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::Open(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->Open(dwDevice, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::Close(long dwDevice/*[in]*/)
{
  return (*this)->Close(dwDevice);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DataStart(long dwDevice/*[in]*/, long resolution/*[in]*/, long period/*[in]*/)
{
  return (*this)->DataStart(dwDevice, resolution, period);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DataStop(long dwDevice/*[in]*/)
{
  return (*this)->DataStop(dwDevice);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DataCollect(long dwDevice/*[in]*/, VARIANT* pvArray/*[in,out]*/, 
                                 VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DataCollect(dwDevice, pvArray, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRBackGroundVar(long dwDevice/*[in]*/, VARIANT_BOOL bOn/*[in]*/)
{
  return (*this)->DPRBackGroundVar(dwDevice, bOn);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRAddressRange(long dwDevice/*[in]*/, VARIANT_BOOL bUpper/*[in]*/, 
                                     VARIANT_BOOL bPC/*[in]*/, long* pVal/*[out]*/)
{
  return (*this)->DPRAddressRange(dwDevice, bUpper, bPC, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetPmacType(long dwDevice/*[in]*/, 
                                 Pcommserverlib_tlb::DEVPMACTYPE* pVal/*[out]*/)
{
  return (*this)->GetPmacType(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRVarBufRemove(long dwDevice/*[in]*/, long index/*[in]*/, 
                                     VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRVarBufRemove(dwDevice, index, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRVarBufRead(long dwDevice/*[in]*/, long h/*[in]*/, long entryNum/*[in]*/, 
                                   VARIANT* pVal/*[in,out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRVarBufRead(dwDevice, h, entryNum, pVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRGetFloat(long dwDevice/*[in]*/, long offset/*[in]*/, float* pVal/*[out]*/, 
                                 VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRGetFloat(dwDevice, offset, pVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRGetLong(long dwDevice/*[in]*/, long offset/*[in]*/, long* pVal/*[out]*/, 
                                VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRGetLong(dwDevice, offset, pVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRVarBufInit(long dwDevice/*[in]*/, VARIANT vAddressArray/*[in]*/, 
                                   VARIANT vTypeArray/*[in]*/, long* pHandle/*[out]*/, 
                                   VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRVarBufInit(dwDevice, vAddressArray, vTypeArray, pHandle, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRSetFloat(long dwDevice/*[in]*/, long offset/*[in]*/, float newVal/*[in]*/, 
                                 VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRSetFloat(dwDevice, offset, newVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRSetLong(long dwDevice/*[in]*/, long offset/*[in]*/, long newVal/*[in]*/, 
                                VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRSetLong(dwDevice, offset, newVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRVarBufWrite(long dwDevice/*[in]*/, VARIANT vData/*[in]*/, 
                                    VARIANT vAddresses/*[in]*/, VARIANT vTypes/*[in]*/, 
                                    long* pWritten/*[out]*/)
{
  return (*this)->DPRVarBufWrite(dwDevice, vData, vAddresses, vTypes, pWritten);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRFloat(__int64 d/*[in]*/, double scale/*[in]*/, double* pVal/*[out]*/)
{
  return (*this)->DPRFloat(d, scale, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetRomVersion(long dwDevice/*[in]*/, BSTR* pVal/*[out]*/)
{
  return (*this)->GetRomVersion(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetRomDate(long dwDevice/*[in]*/, BSTR* pVal/*[out]*/)
{
  return (*this)->GetRomDate(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetPmacLocation(long dwDevice/*[in]*/, 
                                     Pcommserverlib_tlb::DEVLOCATIONTYPE* pVal/*[out]*/)
{
  return (*this)->GetPmacLocation(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetResponse(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                 BSTR* pAnswer/*[out]*/)
{
  return (*this)->GetResponse(dwDevice, question, pAnswer);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::SelectDevice(long hWindow/*[in]*/, long* pDeviceNumber/*[out]*/, 
                                  VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->SelectDevice(hWindow, pDeviceNumber, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_DPRSize(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_DPRSize(dwDevice, pVal);
}

template <class T> long __fastcall
TCOMIPmacDeviceT<T>::get_DPRSize(long dwDevice/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_DPRSize(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_DPRAvailable(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_DPRAvailable(dwDevice, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_DPRAvailable(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_DPRAvailable(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::SetChecksums(long dwDevice/*[in]*/, VARIANT_BOOL bActive/*[in]*/)
{
  return (*this)->SetChecksums(dwDevice, bActive);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetControlResponse(long dwDevice/*[in]*/, short question/*[in]*/, 
                                        BSTR* pAnswer/*[out]*/)
{
  return (*this)->GetControlResponse(dwDevice, question, pAnswer);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_LastCommError(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_LastCommError(dwDevice, pVal);
}

template <class T> long __fastcall
TCOMIPmacDeviceT<T>::get_LastCommError(long dwDevice/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_LastCommError(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetLastCommErrorStr(long dwDevice/*[in]*/, BSTR* pVal/*[out]*/)
{
  return (*this)->GetLastCommErrorStr(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetMacroIVariableLong(long dwDevice/*[in]*/, long node/*[in]*/, 
                                           long num/*[in]*/, long def/*[in]*/, long* pVal/*[out]*/)
{
  return (*this)->GetMacroIVariableLong(dwDevice, node, num, def, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_DoChecksums(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_DoChecksums(dwDevice, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_DoChecksums(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_DoChecksums(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::set_DoChecksums(long dwDevice/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_DoChecksums(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetIVariableLong(long dwDevice/*[in]*/, long num/*[in]*/, long def/*[in]*/, 
                                      long* pVal/*[out]*/)
{
  return (*this)->GetIVariableLong(dwDevice, num, def, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetIVariableDouble(long dwDevice/*[in]*/, long num/*[in]*/, double def/*[in]*/, 
                                        double* pVal/*[out]*/)
{
  return (*this)->GetIVariableDouble(dwDevice, num, def, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::SetIVariableLong(long dwDevice/*[in]*/, long num/*[in]*/, long newVal/*[in]*/)
{
  return (*this)->SetIVariableLong(dwDevice, num, newVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::SetIVariableDouble(long dwDevice/*[in]*/, long num/*[in]*/, 
                                        double newVal/*[in]*/)
{
  return (*this)->SetIVariableDouble(dwDevice, num, newVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetAsciiComm(long dwDevice/*[in]*/, 
                                  Pcommserverlib_tlb::DEVASCIIMODE* pVal/*[out]*/)
{
  return (*this)->GetAsciiComm(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::SetAsciiComm(long dwDevice/*[in]*/, 
                                  Pcommserverlib_tlb::DEVASCIIMODE newVal/*[in]*/)
{
  return (*this)->SetAsciiComm(dwDevice, newVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetVariableLong(long dwDevice/*[in]*/, short ch/*[in]*/, long num/*[in]*/, 
                                     long def/*[in]*/, long* pVal/*[out]*/, 
                                     VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetVariableLong(dwDevice, ch, num, def, pVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetVariableDouble(long dwDevice/*[in]*/, short ch/*[in]*/, long num/*[in]*/, 
                                       double def/*[in]*/, double* pVal/*[out]*/, 
                                       VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetVariableDouble(dwDevice, ch, num, def, pVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::SetVariableLong(long dwDevice/*[in]*/, short ch/*[in]*/, long num/*[in]*/, 
                                     long newVal/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->SetVariableLong(dwDevice, ch, num, newVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::SetVariableDouble(long dwDevice/*[in]*/, short ch/*[in]*/, long num/*[in]*/, 
                                       double newVal/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->SetVariableDouble(dwDevice, ch, num, newVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_InBootStrapMode(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_InBootStrapMode(dwDevice, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_InBootStrapMode(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_InBootStrapMode(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_MotionBufferOpen(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_MotionBufferOpen(dwDevice, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_MotionBufferOpen(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_MotionBufferOpen(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_RotaryBufferOpen(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_RotaryBufferOpen(dwDevice, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_RotaryBufferOpen(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_RotaryBufferOpen(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_IsTurbo(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsTurbo(dwDevice, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_IsTurbo(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsTurbo(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::RestoreLinkList(BSTR firmwareVersion/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->RestoreLinkList(firmwareVersion, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::BackupLinkList(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->BackupLinkList(dwDevice, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::SetCriticalIVars(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->SetCriticalIVars(dwDevice, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetLocAndEnum(long dwDevice/*[in]*/, long* pLoc/*[out]*/, long* pEnum/*[out]*/, 
                                   VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetLocAndEnum(dwDevice, pLoc, pEnum, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetProgramInfo(long dwDevice/*[in]*/, VARIANT_BOOL bPlc/*[in]*/, 
                                    long num/*[in]*/, long* pSAdr/*[out]*/, long* pFAdr/*[out]*/)
{
  return (*this)->GetProgramInfo(dwDevice, bPlc, num, pSAdr, pFAdr);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DownloadFile(long dwDevice/*[in]*/, BSTR filePath/*[in]*/)
{
  return (*this)->DownloadFile(dwDevice, filePath);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::AbortDownload(long dwDevice/*[in]*/)
{
  return (*this)->AbortDownload(dwDevice);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DownloadFirmwareFile(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                                          VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DownloadFirmwareFile(dwDevice, filePath, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::Download(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                              VARIANT_BOOL bMacro/*[in]*/, VARIANT_BOOL bMap/*[in]*/, 
                              VARIANT_BOOL bLog/*[in]*/, VARIANT_BOOL bDnld/*[in]*/, 
                              VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->Download(dwDevice, filePath, bMacro, bMap, bLog, bDnld, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_Downloading(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_Downloading(dwDevice, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_Downloading(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_Downloading(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_MaxDownloadErrors(long* pVal/*[out,retval]*/)
{
  return (*this)->get_MaxDownloadErrors(pVal);
}

template <class T> long __fastcall
TCOMIPmacDeviceT<T>::get_MaxDownloadErrors(void)
{
  long pVal;
  OLECHECK(this->get_MaxDownloadErrors((long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::set_MaxDownloadErrors(long pVal/*[in]*/)
{
  return (*this)->set_MaxDownloadErrors(pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::CompilePLCC(long dwDevice/*[in]*/, BSTR inFilePath/*[in]*/, 
                                 BSTR outFilePath/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->CompilePLCC(dwDevice, inFilePath, outFilePath, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::SendCommand(long dwDevice/*[in]*/, BSTR cmd/*[in]*/, long* pstatus/*[out]*/)
{
  return (*this)->SendCommand(dwDevice, cmd, pstatus);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetPlcStatus(long dwDevice/*[in]*/, long* pNumPlc/*[out]*/, 
                                  long* pNumPlcc/*[out]*/, long* pI5/*[out]*/)
{
  return (*this)->GetPlcStatus(dwDevice, pNumPlc, pNumPlcc, pI5);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetFirstPlcc(long dwDevice/*[in]*/, VARIANT_BOOL* pbLoaded/*[out]*/, 
                                  VARIANT_BOOL* pbEnabled/*[out]*/, long* pStartAdr/*[out]*/, 
                                  long* pLastAdr/*[out]*/, long* pSize/*[out]*/, 
                                  VARIANT_BOOL* pbMore/*[out]*/)
{
  return (*this)->GetFirstPlcc(dwDevice, pbLoaded, pbEnabled, pStartAdr, pLastAdr, pSize, pbMore);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetNextPlcc(long dwDevice/*[in]*/, VARIANT_BOOL* pbLoaded/*[out]*/, 
                                 VARIANT_BOOL* pbEnabled/*[out]*/, long* pStartAdr/*[out]*/, 
                                 long* pLastAdr/*[out]*/, long* pSize/*[out]*/, 
                                 VARIANT_BOOL* pbMore/*[out]*/)
{
  return (*this)->GetNextPlcc(dwDevice, pbLoaded, pbEnabled, pStartAdr, pLastAdr, pSize, pbMore);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetFirstPlc(long dwDevice/*[in]*/, VARIANT_BOOL* pbEnabled/*[out]*/, 
                                 long* pStartAdr/*[out]*/, long* pLastAdr/*[out]*/, 
                                 long* pSize/*[out]*/, VARIANT_BOOL* pbMore/*[out]*/)
{
  return (*this)->GetFirstPlc(dwDevice, pbEnabled, pStartAdr, pLastAdr, pSize, pbMore);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetNextPlc(long dwDevice/*[in]*/, VARIANT_BOOL* pbEnabled/*[out]*/, 
                                long* pStartAdr/*[out]*/, long* pLastAdr/*[out]*/, 
                                long* pSize/*[out]*/, VARIANT_BOOL* pbMore/*[out]*/)
{
  return (*this)->GetNextPlc(dwDevice, pbEnabled, pStartAdr, pLastAdr, pSize, pbMore);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_IsAnyPlcRunning(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsAnyPlcRunning(dwDevice, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_IsAnyPlcRunning(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsAnyPlcRunning(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetGlobalStatus(long dwDevice/*[in]*/, long* pStatusX/*[out]*/, 
                                     long* pStatusY/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetGlobalStatus(dwDevice, pStatusX, pStatusY, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetCoordStatus(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                    long* pStatusX/*[out]*/, long* pStatusY/*[out]*/, 
                                    VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetCoordStatus(dwDevice, dwCoord, pStatusX, pStatusY, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetMotorStatus(long dwDevice/*[in]*/, long lMotor/*[in]*/, 
                                    long* pStatusX/*[out]*/, long* pStatusY/*[out]*/, 
                                    VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetMotorStatus(dwDevice, lMotor, pStatusX, pStatusY, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_SysServoError(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_SysServoError(dwDevice, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_SysServoError(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_SysServoError(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_SysReEntryError(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_SysReEntryError(dwDevice, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_SysReEntryError(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_SysReEntryError(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_SysMemChecksumError(long dwDevice/*[in]*/, 
                                             VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_SysMemChecksumError(dwDevice, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_SysMemChecksumError(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_SysMemChecksumError(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_SysPromChecksumError(long dwDevice/*[in]*/, 
                                              VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_SysPromChecksumError(dwDevice, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_SysPromChecksumError(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_SysPromChecksumError(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_SysInposition(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                       VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_SysInposition(dwDevice, dwCoord, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_SysInposition(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_SysInposition(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_SysWarnFError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                       VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_SysWarnFError(dwDevice, dwCoord, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_SysWarnFError(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_SysWarnFError(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_SysFatalFError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                        VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_SysFatalFError(dwDevice, dwCoord, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_SysFatalFError(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_SysFatalFError(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_SysRuntimeError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                         VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_SysRuntimeError(dwDevice, dwCoord, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_SysRuntimeError(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_SysRuntimeError(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_SysCircleRadError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                           VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_SysCircleRadError(dwDevice, dwCoord, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_SysCircleRadError(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_SysCircleRadError(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_SysAmpFaultError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                          VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_SysAmpFaultError(dwDevice, dwCoord, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_SysAmpFaultError(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_SysAmpFaultError(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetCommandedPos(long dwDevice/*[in]*/, long mtr/*[in]*/, double scale/*[in]*/, 
                                     double* pVal/*[out]*/)
{
  return (*this)->GetCommandedPos(dwDevice, mtr, scale, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetPosition(long dwDevice/*[in]*/, long mtr/*[in]*/, double scale/*[in]*/, 
                                 double* pVal/*[out]*/)
{
  return (*this)->GetPosition(dwDevice, mtr, scale, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetNetActualPosition(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                          double scale/*[in]*/, double* pVal/*[out]*/)
{
  return (*this)->GetNetActualPosition(dwDevice, mtr, scale, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetFollowError(long dwDevice/*[in]*/, long mtr/*[in]*/, double scale/*[in]*/, 
                                    double* pVal/*[out]*/)
{
  return (*this)->GetFollowError(dwDevice, mtr, scale, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetVelocity(long dwDevice/*[in]*/, long mtr/*[in]*/, double scale/*[in]*/, 
                                 double* pVal/*[out]*/)
{
  return (*this)->GetVelocity(dwDevice, mtr, scale, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetMasterPos(long dwDevice/*[in]*/, long mtr/*[in]*/, double scale/*[in]*/, 
                                  double* pVal/*[out]*/)
{
  return (*this)->GetMasterPos(dwDevice, mtr, scale, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetCompensationPos(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                        double scale/*[in]*/, double* pVal/*[out]*/)
{
  return (*this)->GetCompensationPos(dwDevice, mtr, scale, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetTargetPos(long dwDevice/*[in]*/, long mtr/*[in]*/, double scale/*[in]*/, 
                                  double* pVal/*[out]*/)
{
  return (*this)->GetTargetPos(dwDevice, mtr, scale, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetBiasPos(long dwDevice/*[in]*/, long mtr/*[in]*/, double scale/*[in]*/, 
                                double* pVal/*[out]*/)
{
  return (*this)->GetBiasPos(dwDevice, mtr, scale, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetProgExecPoint(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                      long* pVal/*[out]*/)
{
  return (*this)->GetProgExecPoint(dwDevice, dwCoord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetRotBufFull(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                   VARIANT_BOOL* pVal/*[out]*/)
{
  return (*this)->GetRotBufFull(dwDevice, dwCoord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_ProgramRunning(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                        VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_ProgramRunning(dwDevice, dwCoord, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_ProgramRunning(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_ProgramRunning(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_ProgramStepping(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                         VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_ProgramStepping(dwDevice, dwCoord, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_ProgramStepping(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_ProgramStepping(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_ProgramContMotion(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                           VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_ProgramContMotion(dwDevice, dwCoord, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_ProgramContMotion(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_ProgramContMotion(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_ProgramContRequest(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                            VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_ProgramContRequest(dwDevice, dwCoord, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_ProgramContRequest(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_ProgramContRequest(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_ProgramRemaining(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                          long* pVal/*[out,retval]*/)
{
  return (*this)->get_ProgramRemaining(dwDevice, dwCoord, pVal);
}

template <class T> long __fastcall
TCOMIPmacDeviceT<T>::get_ProgramRemaining(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_ProgramRemaining(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_MotionBufOpen(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_MotionBufOpen(dwDevice, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_MotionBufOpen(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_MotionBufOpen(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_ProgramFeedMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                         VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_ProgramFeedMode(dwDevice, dwCoord, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_ProgramFeedMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_ProgramFeedMode(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_MotorAmpEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                         VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_MotorAmpEnabled(dwDevice, mtr, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_MotorAmpEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_MotorAmpEnabled(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_MotorWarnFError(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                         VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_MotorWarnFError(dwDevice, mtr, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_MotorWarnFError(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_MotorWarnFError(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_MotorFatalFError(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                          VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_MotorFatalFError(dwDevice, mtr, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_MotorFatalFError(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_MotorFatalFError(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_MotorAmpFault(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                       VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_MotorAmpFault(dwDevice, mtr, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_MotorAmpFault(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_MotorAmpFault(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_MotorOnPositionLimit(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                              VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_MotorOnPositionLimit(dwDevice, mtr, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_MotorOnPositionLimit(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_MotorOnPositionLimit(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_MotorHomeComplete(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                           VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_MotorHomeComplete(dwDevice, mtr, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_MotorHomeComplete(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_MotorHomeComplete(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_MotorInPosition(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                         VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_MotorInPosition(dwDevice, mtr, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_MotorInPosition(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_MotorInPosition(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_TimRemInMove(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                      long* pVal/*[out,retval]*/)
{
  return (*this)->get_TimRemInMove(dwDevice, dwCoord, pVal);
}

template <class T> long __fastcall
TCOMIPmacDeviceT<T>::get_TimRemInMove(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_TimRemInMove(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_TimeRemInTATS(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                       long* pVal/*[out,retval]*/)
{
  return (*this)->get_TimeRemInTATS(dwDevice, dwCoord, pVal);
}

template <class T> long __fastcall
TCOMIPmacDeviceT<T>::get_TimeRemInTATS(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_TimeRemInTATS(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_MotorDataBlockError(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                             VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_MotorDataBlockError(dwDevice, mtr, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_MotorDataBlockError(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_MotorDataBlockError(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_MotorPhased(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                     VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_MotorPhased(dwDevice, mtr, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_MotorPhased(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_MotorPhased(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_MotorEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                      VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_MotorEnabled(dwDevice, mtr, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_MotorEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_MotorEnabled(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_MotorHandwheelEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_MotorHandwheelEnabled(dwDevice, mtr, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_MotorHandwheelEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_MotorHandwheelEnabled(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_MotorOpenLoop(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                       VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_MotorOpenLoop(dwDevice, mtr, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_MotorOpenLoop(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_MotorOpenLoop(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_MotorOnNegLimit(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                         VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_MotorOnNegLimit(dwDevice, mtr, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_MotorOnNegLimit(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_MotorOnNegLimit(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_MotorOnPosLimit(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                         VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_MotorOnPosLimit(dwDevice, mtr, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_MotorOnPosLimit(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_MotorOnPosLimit(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::SetJogReturn(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  return (*this)->SetJogReturn(dwDevice, mtr);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetWhyMotorNotMoving(long dwDevice/*[in]*/, long motor/*[in]*/, 
                                          long* pVal/*[out]*/)
{
  return (*this)->GetWhyMotorNotMoving(dwDevice, motor, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetWhyMotorNotMovingStr(long err/*[in]*/, BSTR* pVal/*[in,out]*/)
{
  return (*this)->GetWhyMotorNotMovingStr(err, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetWhyCSNotMoving(long dwDevice/*[in]*/, long cs/*[in]*/, long* pVal/*[out]*/)
{
  return (*this)->GetWhyCSNotMoving(dwDevice, cs, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetWhyCSNotMovingStr(long err/*[in]*/, BSTR* pVal/*[in,out]*/)
{
  return (*this)->GetWhyCSNotMovingStr(err, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_BufferOpen(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_BufferOpen(dwDevice, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_BufferOpen(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_BufferOpen(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_GatherPeriod(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_GatherPeriod(dwDevice, pVal);
}

template <class T> long __fastcall
TCOMIPmacDeviceT<T>::get_GatherPeriod(long dwDevice/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_GatherPeriod(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::set_GatherPeriod(long dwDevice/*[in]*/, long pVal/*[in]*/)
{
  return (*this)->set_GatherPeriod(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_GatherEnabled(long dwDevice/*[in]*/, long num/*[in]*/, 
                                       VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_GatherEnabled(dwDevice, num, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_GatherEnabled(long dwDevice/*[in]*/, long num/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_GatherEnabled(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::set_GatherEnabled(long dwDevice/*[in]*/, long num/*[in]*/, 
                                       VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_GatherEnabled(dwDevice, num, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_GatherMode(long dwDevice/*[in]*/, 
                                    Pcommserverlib_tlb::DEVGATMODE* pVal/*[out,retval]*/)
{
  return (*this)->get_GatherMode(dwDevice, pVal);
}

template <class T> Pcommserverlib_tlb::DEVGATMODE __fastcall
TCOMIPmacDeviceT<T>::get_GatherMode(long dwDevice/*[in]*/)
{
  Pcommserverlib_tlb::DEVGATMODE pVal;
  OLECHECK(this->get_GatherMode(, (Pcommserverlib_tlb::DEVGATMODE*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::set_GatherMode(long dwDevice/*[in]*/, 
                                    Pcommserverlib_tlb::DEVGATMODE pVal/*[in]*/)
{
  return (*this)->set_GatherMode(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_GatherSampleTime(long dwDevice/*[in]*/, double* pVal/*[out,retval]*/)
{
  return (*this)->get_GatherSampleTime(dwDevice, pVal);
}

template <class T> double __fastcall
TCOMIPmacDeviceT<T>::get_GatherSampleTime(long dwDevice/*[in]*/)
{
  double pVal;
  OLECHECK(this->get_GatherSampleTime(, (double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::set_GatherSampleTime(long dwDevice/*[in]*/, double pVal/*[in]*/)
{
  return (*this)->set_GatherSampleTime(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetNumGatherSources(long dwDevice/*[in]*/, long* pVal/*[out]*/)
{
  return (*this)->GetNumGatherSources(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetNumGatherSamples(long dwDevice/*[in]*/, long* pVal/*[out]*/)
{
  return (*this)->GetNumGatherSamples(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::SetGather(long dwDevice/*[in]*/, long num/*[in]*/, BSTR str/*[in]*/, 
                               VARIANT_BOOL bEnable/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->SetGather(dwDevice, num, str, bEnable, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::SetQuickGather(long dwDevice/*[in]*/, long lComMask/*[in]*/, 
                                    long lEncMask/*[in]*/, long lDacMask/*[in]*/, 
                                    long lCurMask/*[in]*/, VARIANT_BOOL bEnable/*[in]*/, 
                                    VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->SetQuickGather(dwDevice, lComMask, lEncMask, lDacMask, lCurMask, bEnable, 
                                 pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::SetQuickGatherWithDirectCurrent(long dwDevice/*[in]*/, long lComMask/*[in]*/, 
                                                     long lEncMask/*[in]*/, long lDacMask/*[in]*/, 
                                                     long lCurMask/*[in]*/, 
                                                     VARIANT_BOOL bEnable/*[in]*/, 
                                                     VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->SetQuickGatherWithDirectCurrent(dwDevice, lComMask, lEncMask, lDacMask, lCurMask, 
                                                  bEnable, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetGather(long dwDevice/*[in]*/, long num/*[in]*/, BSTR* pStr/*[in,out]*/, 
                               VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetGather(dwDevice, num, pStr, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::ClearGather(long dwDevice/*[in]*/)
{
  return (*this)->ClearGather(dwDevice);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::InitGather(long dwDevice/*[in]*/, long size/*[in]*/, double msec/*[in]*/, 
                                VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->InitGather(dwDevice, size, msec, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::ClearGatherData(long dwDevice/*[in]*/)
{
  return (*this)->ClearGatherData(dwDevice);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::CollectGatherData(long dwDevice/*[in]*/, long* pSources/*[out]*/, 
                                       long* pSamples/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->CollectGatherData(dwDevice, pSources, pSamples, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetGatherSamples(long dwDevice/*[in]*/, long sourceNum/*[in]*/, 
                                      VARIANT* pVariant/*[in,out]*/, 
                                      VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetGatherSamples(dwDevice, sourceNum, pVariant, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetGatherPoint(long dwDevice/*[in]*/, long sourceNum/*[in]*/, 
                                    long sampleNum/*[in]*/, double* pVal/*[out]*/, 
                                    VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetGatherPoint(dwDevice, sourceNum, sampleNum, pVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::StartGather(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->StartGather(dwDevice, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::StopGather(long dwDevice/*[in]*/)
{
  return (*this)->StopGather(dwDevice);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::InitPlotGather(long dwDevice/*[in]*/, long size/*[in]*/, long period/*[in]*/, 
                                    VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->InitPlotGather(dwDevice, size, period, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::ReadGatherFile(long dwDevice/*[in]*/, BSTR bsFilePath/*[in]*/, 
                                    VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->ReadGatherFile(dwDevice, bsFilePath, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::WriteGatherFile(long dwDevice/*[in]*/, BSTR bsFilePath/*[in]*/, 
                                     VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->WriteGatherFile(dwDevice, bsFilePath, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::strtod48f(BSTR str/*[in]*/, double* pVal/*[out]*/)
{
  return (*this)->strtod48f(str, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::strtod48l(BSTR str/*[in]*/, double* pVal/*[out]*/)
{
  return (*this)->strtod48l(str, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::strtod24(BSTR str/*[in]*/, double* pVal/*[out]*/)
{
  return (*this)->strtod24(str, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::strtod32dp(BSTR str/*[in]*/, double* pVal/*[out]*/)
{
  return (*this)->strtod32dp(str, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::strto32f(BSTR str/*[in]*/, double* pVal/*[out]*/)
{
  return (*this)->strto32f(str, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::UploadMacroConfig(long dwDevice/*[in]*/, BSTR bsFilePath/*[in]*/, 
                                       VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->UploadMacroConfig(dwDevice, bsFilePath, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DownloadCurrentFeedbackTest(long dwDevice/*[in]*/, short mtr/*[in]*/, 
                                                 double pwmDutyCycle/*[in]*/, short pwmFreq/*[in]*/, 
                                                 VARIANT_BOOL bMacro/*[in]*/, 
                                                 VARIANT_BOOL bUltra/*[in]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DownloadCurrentFeedbackTest(dwDevice, mtr, pwmDutyCycle, pwmFreq, bMacro, bUltra, 
                                              pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::ReadResultsFromCurrentFeedbackTest(long dwDevice/*[in]*/, short mtr/*[in]*/, 
                                                        long* pVal/*[out]*/)
{
  return (*this)->ReadResultsFromCurrentFeedbackTest(dwDevice, mtr, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DownloadVoltageSixStepTest(long dwDevice/*[in]*/, short mtr/*[in]*/, 
                                                double pwmDutyCycle/*[in]*/, 
                                                VARIANT_BOOL bMacro/*[in]*/, 
                                                VARIANT_BOOL bUltra/*[in]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DownloadVoltageSixStepTest(dwDevice, mtr, pwmDutyCycle, bMacro, bUltra, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::ReadResultsFromSixStepTest(long dwDevice/*[in]*/, 
                                                VARIANT_BOOL bSipFirstStep/*[in]*/, 
                                                VARIANT* pvStepArray/*[in,out]*/, 
                                                long* pResult/*[out]*/)
{
  return (*this)->ReadResultsFromSixStepTest(dwDevice, bSipFirstStep, pvStepArray, pResult);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DownloadCurrentSixStepTest(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                double pwmDutyCycle/*[in]*/, 
                                                VARIANT_BOOL bMacro/*[in]*/, 
                                                VARIANT_BOOL bUltra/*[in]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DownloadCurrentSixStepTest(dwDevice, motor, pwmDutyCycle, bMacro, bUltra, 
                                             pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DownloadOpenLoopTest(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                          short magnitude/*[in]*/, short time/*[in]*/, 
                                          short reps/*[in]*/, VARIANT_BOOL bGatherCurrents/*[in]*/, 
                                          VARIANT_BOOL bMacro/*[in]*/, 
                                          VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DownloadOpenLoopTest(dwDevice, motor, magnitude, time, reps, bGatherCurrents, 
                                       bMacro, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DownloadOpenLoopTest1(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                           short magnitude/*[in]*/, short time/*[in]*/, 
                                           short reps/*[in]*/, VARIANT_BOOL bGatherCurrents/*[in]*/, 
                                           VARIANT_BOOL bMacro/*[in]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DownloadOpenLoopTest1(dwDevice, motor, magnitude, time, reps, bGatherCurrents, 
                                        bMacro, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DownloadVelLimitPLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                         long maxspd/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DownloadVelLimitPLC(dwDevice, motor, maxspd, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DownloadPosLimitPLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                         VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DownloadPosLimitPLC(dwDevice, motor, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DownloadUVWSixStepTest(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                            double pwmDutyCycle/*[in]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DownloadUVWSixStepTest(dwDevice, motor, pwmDutyCycle, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::ReadResultsFromUVWSixStepTest(long dwDevice/*[in]*/, 
                                                   VARIANT* pvArray/*[in,out]*/, 
                                                   long* pResult/*[out]*/)
{
  return (*this)->ReadResultsFromUVWSixStepTest(dwDevice, pvArray, pResult);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::SetIVarForFeedback(long dwDevice/*[in]*/, short ivar/*[in]*/, 
                                        long address/*[in]*/, 
                                        Pcommserverlib_tlb::DEVFEEDBACKTYPE fbType/*[in]*/, 
                                        VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->SetIVarForFeedback(dwDevice, ivar, address, fbType, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DownloadAndRunRoughPhasePLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DownloadAndRunRoughPhasePLC(dwDevice, motor, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::CreateIncrementalFinePhasePLC(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                                                   short PLCNumber/*[in]*/, short motor/*[in]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->CreateIncrementalFinePhasePLC(dwDevice, filePath, PLCNumber, motor, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DoACurrentLoopStep(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                        short dwellTime/*[in]*/, long magnitude/*[in]*/, 
                                        VARIANT_BOOL bAutoTune/*[in]*/, BSTR* pbsCTSCurrent/*[out]*/, 
                                        double pwmDutyCycle/*[in]*/, short divisor/*[in]*/, 
                                        VARIANT_BOOL bUltra/*[in]*/)
{
  return (*this)->DoACurrentLoopStep(dwDevice, motor, dwellTime, magnitude, bAutoTune, pbsCTSCurrent, 
                                     pwmDutyCycle, divisor, bUltra);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DoACurrentLoopStepBrush(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                             short dwellTime/*[in]*/, long magnitude/*[in]*/, 
                                             VARIANT_BOOL bAutoTune/*[in]*/, 
                                             BSTR* pbsCTSCurrent/*[out]*/, 
                                             double pwmDutyCycle/*[in]*/, short divisor/*[in]*/, 
                                             VARIANT_BOOL bUltra/*[in]*/)
{
  return (*this)->DoACurrentLoopStepBrush(dwDevice, motor, dwellTime, magnitude, bAutoTune, 
                                          pbsCTSCurrent, pwmDutyCycle, divisor, bUltra);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DoAPositionLoopStep(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                         short stepSize/*[in]*/, short stepTime/*[in]*/, 
                                         VARIANT_BOOL bBiDirectional/*[in]*/, 
                                         VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DoAPositionLoopStep(dwDevice, motor, stepSize, stepTime, bBiDirectional, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DoAParabolicMove(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                      long stepSize/*[in]*/, short stepTime/*[in]*/, 
                                      VARIANT_BOOL bBiDirectional/*[in]*/, 
                                      VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DoAParabolicMove(dwDevice, motor, stepSize, stepTime, bBiDirectional, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DoAGantryPositionLoopStep(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                               short motor2/*[in]*/, short stepSize/*[in]*/, 
                                               short stepTime/*[in]*/, 
                                               VARIANT_BOOL bBiDirectional/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DoAGantryPositionLoopStep(dwDevice, motor, motor2, stepSize, stepTime, 
                                            bBiDirectional, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DoAGantryParabolicMove(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                            short motor2/*[in]*/, long stepSize/*[in]*/, 
                                            short stepTime/*[in]*/, 
                                            VARIANT_BOOL bBiDirectional/*[in]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DoAGantryParabolicMove(dwDevice, motor, motor2, stepSize, stepTime, bBiDirectional, 
                                         pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DoAGantryParabolic(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                        short motor2/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DoAGantryParabolic(dwDevice, motor, motor2, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::ConvertWordToStringFloat(BSTR word/*[in]*/, BSTR* pVal/*[out]*/)
{
  return (*this)->ConvertWordToStringFloat(word, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::ConvertWordToShort(BSTR word/*[in]*/, short offset/*[in]*/, 
                                        short* pVal/*[out]*/)
{
  return (*this)->ConvertWordToShort(word, offset, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::ConvertWordToLong(BSTR word/*[in]*/, long* pVal/*[out]*/)
{
  return (*this)->ConvertWordToLong(word, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::RestoreModifiedIVars(long dwDevice/*[in]*/, short motor/*[in]*/)
{
  return (*this)->RestoreModifiedIVars(dwDevice, motor);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::CalculateStepStatistics(VARIANT* pvData/*[in,out]*/, long stepSize/*[in]*/, 
                                             long I10/*[in]*/, long I19/*[in]*/, 
                                             BSTR* pbsRiseTime/*[out]*/, BSTR* pbsPeakTime/*[out]*/, 
                                             BSTR* pbsNatFreq/*[out]*/, BSTR* pbsOvershoot/*[out]*/, 
                                             BSTR* pbsDamping/*[out]*/, BSTR* pbsSettleTime/*[out]*/)
{
  return (*this)->CalculateStepStatistics(pvData, stepSize, I10, I19, pbsRiseTime, pbsPeakTime, 
                                          pbsNatFreq, pbsOvershoot, pbsDamping, pbsSettleTime);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::LowPassFilterTheData(VARIANT* pvData/*[in,out]*/, BSTR bsCurrent/*[in]*/)
{
  return (*this)->LowPassFilterTheData(pvData, bsCurrent);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DifferentiateTheData(VARIANT* pvData/*[in,out]*/, long I10/*[in]*/, 
                                          long I19/*[in]*/, long* pMinVal/*[out]*/, 
                                          long* pMaxVal/*[out]*/)
{
  return (*this)->DifferentiateTheData(pvData, I10, I19, pMinVal, pMaxVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DownloadAutoTuningPLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                           VARIANT_BOOL bCurrentLoop/*[in]*/, 
                                           VARIANT_BOOL bBypassJog/*[in]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DownloadAutoTuningPLC(dwDevice, motor, bCurrentLoop, bBypassJog, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DownloadGantryAutoTuningPLCP1(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                   short motor2/*[in]*/, 
                                                   VARIANT_BOOL bCurrentLoop/*[in]*/, 
                                                   VARIANT_BOOL bBypassJog/*[in]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DownloadGantryAutoTuningPLCP1(dwDevice, motor, motor2, bCurrentLoop, bBypassJog, 
                                                pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DownloadGantryAutoTuningPLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                 short motor2/*[in]*/, 
                                                 VARIANT_BOOL bCurrentLoop/*[in]*/, 
                                                 VARIANT_BOOL bBypassJog/*[in]*/, 
                                                 double MaxTravel/*[in]*/, long time/*[in]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DownloadGantryAutoTuningPLC(dwDevice, motor, motor2, bCurrentLoop, bBypassJog, 
                                              MaxTravel, time, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::MagEstimation(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                                   VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->MagEstimation(dwDevice, filePath, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::SlopeEstimation(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                                     VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->SlopeEstimation(dwDevice, filePath, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::SetCurrentGather(long dwDevice/*[in]*/, long mask/*[in]*/, 
                                      VARIANT_BOOL bEnable/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->SetCurrentGather(dwDevice, mask, bEnable, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DownloadOpenLoopTestForPMAC1(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                  short magnitude/*[in]*/, short time/*[in]*/, 
                                                  short reps/*[in]*/, 
                                                  VARIANT_BOOL bGatherCurrents/*[in]*/, 
                                                  VARIANT_BOOL bMacro/*[in]*/, 
                                                  VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DownloadOpenLoopTestForPMAC1(dwDevice, motor, magnitude, time, reps, 
                                               bGatherCurrents, bMacro, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetMacroNodes(long dwDevice/*[in]*/, long* pNumMacroStations/*[out]*/, 
                                   long* pNumActiveNodes/*[out]*/)
{
  return (*this)->GetMacroNodes(dwDevice, pNumMacroStations, pNumActiveNodes);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetMacroNodeInfo(long dwDevice/*[in]*/, long modeNum/*[in]*/, 
                                      VARIANT_BOOL* pbEnabled/*[out]*/, 
                                      VARIANT_BOOL* pbIsIONode/*[out]*/, long* pID/*[out]*/)
{
  return (*this)->GetMacroNodeInfo(dwDevice, modeNum, pbEnabled, pbIsIONode, pID);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::SetMacroIVariableString(long dwDevice/*[in]*/, long node/*[in]*/, 
                                             long num/*[in]*/, BSTR bsMIVarValue/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->SetMacroIVariableString(dwDevice, node, num, bsMIVarValue, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetMacroIVariableString(long dwDevice/*[in]*/, long node/*[in]*/, 
                                             long num/*[in]*/, BSTR bsDefault/*[in]*/, 
                                             BSTR* pbsVal/*[out]*/)
{
  return (*this)->GetMacroIVariableString(dwDevice, node, num, bsDefault, pbsVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetCommandLogging(long dwDevice/*[in]*/, VARIANT_BOOL* pbON/*[out]*/)
{
  return (*this)->GetCommandLogging(dwDevice, pbON);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::SetCommandLogging(long dwDevice/*[in]*/, VARIANT_BOOL bOn/*[in]*/, 
                                       BSTR bsFilePath/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->SetCommandLogging(dwDevice, bOn, bsFilePath, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetEnumeration(long dwDevice/*[in]*/, long* pVal/*[out]*/)
{
  return (*this)->GetEnumeration(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetControlValues(long dwDevice/*[in]*/, short ctrlCh/*[in]*/, 
                                      VARIANT* pVariant/*[in,out]*/, 
                                      VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetControlValues(dwDevice, ctrlCh, pVariant, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::MultiDownload(long dwDevice/*[in]*/, BSTR outFile/*[in]*/, BSTR iniFile/*[in]*/, 
                                   BSTR userID/*[in]*/, VARIANT_BOOL bMacro/*[in]*/, 
                                   VARIANT_BOOL bMap/*[in]*/, VARIANT_BOOL bLog/*[in]*/, 
                                   VARIANT_BOOL bDnld/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->MultiDownload(dwDevice, outFile, iniFile, userID, bMacro, bMap, bLog, bDnld, 
                                pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::AddDownloadFile(long dwDevice/*[in]*/, BSTR iniFile/*[in]*/, 
                                     BSTR userID/*[in]*/, BSTR dlFile/*[in]*/, 
                                     VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->AddDownloadFile(dwDevice, iniFile, userID, dlFile, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::RemoveDownloadFile(long dwDevice/*[in]*/, BSTR iniFile/*[in]*/, 
                                        BSTR userID/*[in]*/, BSTR dlFile/*[in]*/, 
                                        VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->RemoveDownloadFile(dwDevice, iniFile, userID, dlFile, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::RenumberFiles(long dwDevice/*[in]*/, long fileNumber/*[in]*/, 
                                   BSTR iniFile/*[in]*/)
{
  return (*this)->RenumberFiles(dwDevice, fileNumber, iniFile);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetVariableStr(long dwDevice/*[in]*/, short ch/*[in]*/, long num/*[in]*/, 
                                    BSTR* pVal/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetVariableStr(dwDevice, ch, num, pVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRVarBufReadAll(long dwDevice/*[in]*/, long h/*[in]*/, 
                                      VARIANT* pVal/*[in,out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRVarBufReadAll(dwDevice, h, pVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::UltraLightAnalyze(long dwDevice/*[in]*/, VARIANT* pVal/*[in,out]*/, 
                                       long* pActiveNodes/*[out]*/)
{
  return (*this)->UltraLightAnalyze(dwDevice, pVal, pActiveNodes);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetPlcStatusStructure(long dwDevice/*[in]*/, VARIANT* pVal/*[in,out]*/, 
                                           long* pPrograms/*[out]*/)
{
  return (*this)->GetPlcStatusStructure(dwDevice, pVal, pPrograms);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetBitValue(BSTR hexStr/*[in]*/, short bit/*[in]*/, VARIANT_BOOL* pVal/*[out]*/)
{
  return (*this)->GetBitValue(hexStr, bit, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetNumDeviceKeys(long* pVal/*[out]*/)
{
  return (*this)->GetNumDeviceKeys(pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRGetLongDouble(long dwDevice/*[in]*/, long address/*[in]*/, 
                                      double* pVal/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRGetLongDouble(dwDevice, address, pVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRGetFixedDouble(long dwDevice/*[in]*/, long address/*[in]*/, 
                                       double* pVal/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRGetFixedDouble(dwDevice, address, pVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRGetShort(long dwDevice/*[in]*/, long address/*[in]*/, short* pVal/*[out]*/, 
                                 VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRGetShort(dwDevice, address, pVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRSetShort(long dwDevice/*[in]*/, long address/*[in]*/, short newVal/*[in]*/, 
                                 VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRSetShort(dwDevice, address, newVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRDWordBitSet(long dwDevice/*[in]*/, long offset/*[in]*/, long bit/*[in]*/, 
                                    VARIANT_BOOL* pVal/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRDWordBitSet(dwDevice, offset, bit, pVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRResetDWordBit(long dwDevice/*[in]*/, long offset/*[in]*/, long bit/*[in]*/, 
                                      VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRResetDWordBit(dwDevice, offset, bit, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRSetDWordBit(long dwDevice/*[in]*/, long offset/*[in]*/, long bit/*[in]*/, 
                                    VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRSetDWordBit(dwDevice, offset, bit, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetFirmwareType(long dwDevice/*[in]*/, 
                                     Pcommserverlib_tlb::DEVPMACFIRMWARETYPE* pVal/*[out]*/)
{
  return (*this)->GetFirmwareType(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetResponseEx(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                   VARIANT_BOOL bAddLF/*[in]*/, BSTR* pAnswer/*[out]*/, 
                                   long* pstatus/*[out]*/)
{
  return (*this)->GetResponseEx(dwDevice, question, bAddLF, pAnswer, pstatus);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRVarBufWriteEx(long dwDevice/*[in]*/, VARIANT vData/*[in]*/, 
                                      long* pWritten/*[out]*/)
{
  return (*this)->DPRVarBufWriteEx(dwDevice, vData, pWritten);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRGetDWordMask(long dwDevice/*[in]*/, long offset/*[in]*/, long mask/*[in]*/, 
                                     long* pVal/*[out]*/)
{
  return (*this)->DPRGetDWordMask(dwDevice, offset, mask, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRSetDWordMask(long dwDevice/*[in]*/, long offset/*[in]*/, long mask/*[in]*/, 
                                     long Val/*[in]*/)
{
  return (*this)->DPRSetDWordMask(dwDevice, offset, mask, Val);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRRotBufRemove(long dwDevice/*[in]*/, long bufnum/*[in]*/)
{
  return (*this)->DPRRotBufRemove(dwDevice, bufnum);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRRotBufInit(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRRotBufInit(dwDevice, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRRotBufClr(long dwDevice/*[in]*/, long bufnum/*[in]*/)
{
  return (*this)->DPRRotBufClr(dwDevice, bufnum);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRSetRotBuf(long dwDevice/*[in]*/, VARIANT_BOOL on/*[in]*/)
{
  return (*this)->DPRSetRotBuf(dwDevice, on);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRAsciiStrToRotEx(long dwDevice/*[in]*/, BSTR inpstr/*[in]*/, 
                                        long bufnum/*[in]*/, VARIANT_BOOL bSendRemaining/*[in]*/, 
                                        long* pstatus/*[out]*/)
{
  return (*this)->DPRAsciiStrToRotEx(dwDevice, inpstr, bufnum, bSendRemaining, pstatus);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRAsciiStrToRot(long dwDevice/*[in]*/, BSTR inpstr/*[in]*/, 
                                      long bufnum/*[in]*/, long* pstatus/*[out]*/)
{
  return (*this)->DPRAsciiStrToRot(dwDevice, inpstr, bufnum, pstatus);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetProgramMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                    Pcommserverlib_tlb::DEVPROGRAMMODE* pVal/*[out]*/)
{
  return (*this)->GetProgramMode(dwDevice, dwCoord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetProgramMotionMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                          Pcommserverlib_tlb::DEVMOTIONMODE* pVal/*[out]*/)
{
  return (*this)->GetProgramMotionMode(dwDevice, dwCoord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::MapDeviceNumToEnum(long location/*[in]*/, long enumeration/*[in]*/, 
                                        long* pDeviceNumber/*[out]*/)
{
  return (*this)->MapDeviceNumToEnum(location, enumeration, pDeviceNumber);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::MapLocAndEnumFromDeviceNum(long dwDevice/*[in]*/, long* pLocation/*[out]*/, 
                                                long* pEnumeration/*[out]*/)
{
  return (*this)->MapLocAndEnumFromDeviceNum(dwDevice, pLocation, pEnumeration);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetFeedRateAndMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                        double* pRate/*[out]*/, VARIANT_BOOL* pMode/*[out]*/)
{
  return (*this)->GetFeedRateAndMode(dwDevice, dwCoord, pRate, pMode);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetMotorMotionMode(long dwDevice/*[in]*/, long dwMotor/*[in]*/, 
                                        Pcommserverlib_tlb::DEVMOTION* pVal/*[out]*/)
{
  return (*this)->GetMotorMotionMode(dwDevice, dwMotor, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::CommandLog(long dwDevice/*[in]*/, BSTR bStr/*[in]*/, 
                                VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->CommandLog(dwDevice, bStr, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRGetMem(long dwDevice/*[in]*/, long offset/*[in]*/, long bytes/*[in]*/, 
                               VARIANT* pVal/*[in,out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRGetMem(dwDevice, offset, bytes, pVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRSetMem(long dwDevice/*[in]*/, long offset/*[in]*/, long bytes/*[in]*/, 
                               VARIANT Val/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRSetMem(dwDevice, offset, bytes, Val, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetResponseProgress(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                         VARIANT_BOOL bAddLF/*[in]*/, BSTR* pAnswer/*[out]*/, 
                                         long* pstatus/*[out]*/)
{
  return (*this)->GetResponseProgress(dwDevice, question, bAddLF, pAnswer, pstatus);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::Abort(long dwDevice/*[in]*/)
{
  return (*this)->Abort(dwDevice);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_InterruptsEnabled(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_InterruptsEnabled(dwDevice, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_InterruptsEnabled(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_InterruptsEnabled(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::set_InterruptsEnabled(long dwDevice/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_InterruptsEnabled(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_InterruptMask(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_InterruptMask(dwDevice, pVal);
}

template <class T> long __fastcall
TCOMIPmacDeviceT<T>::get_InterruptMask(long dwDevice/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_InterruptMask(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::set_InterruptMask(long dwDevice/*[in]*/, long pVal/*[in]*/)
{
  return (*this)->set_InterruptMask(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::PmacSave(long dwDevice/*[in]*/, BSTR question/*[in]*/, long* pstatus/*[out]*/)
{
  return (*this)->PmacSave(dwDevice, question, pstatus);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::PmacReset(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                               VARIANT_BOOL bAsciiRingComm/*[in]*/, long* pstatus/*[out]*/)
{
  return (*this)->PmacReset(dwDevice, question, bAsciiRingComm, pstatus);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::PhaseMotor(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                long* pStatuss/*[out]*/)
{
  return (*this)->PhaseMotor(dwDevice, question, pStatuss);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetControlResponseEx(long dwDevice/*[in]*/, short question/*[in]*/, 
                                          BSTR* pAnswer/*[out]*/, long* pstatus/*[out]*/)
{
  return (*this)->GetControlResponseEx(dwDevice, question, pAnswer, pstatus);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_USMonitoringEnabled(long dwDevice/*[in]*/, 
                                             VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_USMonitoringEnabled(dwDevice, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_USMonitoringEnabled(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_USMonitoringEnabled(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::set_USMonitoringEnabled(long dwDevice/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_USMonitoringEnabled(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_USMonitoringPeriod(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_USMonitoringPeriod(dwDevice, pVal);
}

template <class T> long __fastcall
TCOMIPmacDeviceT<T>::get_USMonitoringPeriod(long dwDevice/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_USMonitoringPeriod(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::set_USMonitoringPeriod(long dwDevice/*[in]*/, long pVal/*[in]*/)
{
  return (*this)->set_USMonitoringPeriod(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRTest(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRTest(dwDevice, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::AbortTest(long dwDevice/*[in]*/)
{
  return (*this)->AbortTest(dwDevice);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRGetMotorRpt(long dwDevice/*[in]*/, long motor/*[in]*/, 
                                    Pcommserverlib_tlb::DEVFGMOTOR* pStruct/*[in,out]*/, 
                                    long* pServo/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRGetMotorRpt(dwDevice, motor, pStruct, pServo, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRGetMotorRptTurbo(long dwDevice/*[in]*/, long motor/*[in]*/, 
                                         Pcommserverlib_tlb::DEVFGMOTORTURBO* pStruct/*[in,out]*/, 
                                         long* pServo/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRGetMotorRptTurbo(dwDevice, motor, pStruct, pServo, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRGetCoordRpt(long dwDevice/*[in]*/, long coord/*[in]*/, 
                                    Pcommserverlib_tlb::DEVBGCOORD* pStruct/*[in,out]*/, 
                                    long* pServo/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRGetCoordRpt(dwDevice, coord, pStruct, pServo, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRGetCoordRptTurbo(long dwDevice/*[in]*/, long coord/*[in]*/, 
                                         Pcommserverlib_tlb::DEVBGCOORDTURBO* pStruct/*[in,out]*/, 
                                         long* pServo/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRGetCoordRptTurbo(dwDevice, coord, pStruct, pServo, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_DPRMotorRptEnabled(long dwDevice/*[in]*/, 
                                            VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_DPRMotorRptEnabled(dwDevice, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_DPRMotorRptEnabled(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_DPRMotorRptEnabled(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::set_DPRMotorRptEnabled(long dwDevice/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_DPRMotorRptEnabled(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_DPRMotorRptMask(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_DPRMotorRptMask(dwDevice, pVal);
}

template <class T> long __fastcall
TCOMIPmacDeviceT<T>::get_DPRMotorRptMask(long dwDevice/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_DPRMotorRptMask(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::set_DPRMotorRptMask(long dwDevice/*[in]*/, long pVal/*[in]*/)
{
  return (*this)->set_DPRMotorRptMask(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_DPRMotorRptMSec(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_DPRMotorRptMSec(dwDevice, pVal);
}

template <class T> long __fastcall
TCOMIPmacDeviceT<T>::get_DPRMotorRptMSec(long dwDevice/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_DPRMotorRptMSec(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::set_DPRMotorRptMSec(long dwDevice/*[in]*/, long pVal/*[in]*/)
{
  return (*this)->set_DPRMotorRptMSec(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_DPRCoordRptEnabled(long dwDevice/*[in]*/, 
                                            VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_DPRCoordRptEnabled(dwDevice, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_DPRCoordRptEnabled(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_DPRCoordRptEnabled(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::set_DPRCoordRptEnabled(long dwDevice/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_DPRCoordRptEnabled(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_DPRCoordRptMSec(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_DPRCoordRptMSec(dwDevice, pVal);
}

template <class T> long __fastcall
TCOMIPmacDeviceT<T>::get_DPRCoordRptMSec(long dwDevice/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_DPRCoordRptMSec(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::set_DPRCoordRptMSec(long dwDevice/*[in]*/, long pVal/*[in]*/)
{
  return (*this)->set_DPRCoordRptMSec(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_DPRCoordRptMax(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_DPRCoordRptMax(dwDevice, pVal);
}

template <class T> long __fastcall
TCOMIPmacDeviceT<T>::get_DPRCoordRptMax(long dwDevice/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_DPRCoordRptMax(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::set_DPRCoordRptMax(long dwDevice/*[in]*/, long pVal/*[in]*/)
{
  return (*this)->set_DPRCoordRptMax(dwDevice, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::UltraLightAnalyzeStruct(long dwDevice/*[in]*/, 
                                             Pcommserverlib_tlb::DEVULTRALIGHT_INFO* pStruct/*[in,out]*/, 
                                             long* pActiveNodes/*[out]*/)
{
  return (*this)->UltraLightAnalyzeStruct(dwDevice, pStruct, pActiveNodes);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetPlcStatusStruct(long dwDevice/*[in]*/, 
                                        Pcommserverlib_tlb::DEVTOTAL_PLC_STATUS_STRUCT* pStruct/*[in,out]*/, 
                                        long* pPrograms/*[out]*/)
{
  return (*this)->GetPlcStatusStruct(dwDevice, pStruct, pPrograms);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_DPRTesting(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_DPRTesting(dwDevice, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_DPRTesting(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_DPRTesting(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::RawGetResponseEx(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                      VARIANT_BOOL bAddLF/*[in]*/, BSTR* pAnswer/*[out]*/, 
                                      long* pstatus/*[out]*/)
{
  return (*this)->RawGetResponseEx(dwDevice, question, bAddLF, pAnswer, pstatus);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::RawGetControlResponseEx(long dwDevice/*[in]*/, short question/*[in]*/, 
                                             BSTR* pAnswer/*[out]*/, long* pstatus/*[out]*/)
{
  return (*this)->RawGetControlResponseEx(dwDevice, question, pAnswer, pstatus);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::ModBusCommand(long dwDevice/*[in]*/, unsigned_char command/*[in]*/, 
                                   VARIANT* counters/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->ModBusCommand(dwDevice, command, counters, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::ModbusAvailable(long dwDevice/*[in]*/, unsigned_char command/*[in]*/, 
                                     VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->ModbusAvailable(dwDevice, command, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRSetupBuffers(unsigned_long dwDevice/*[in]*/, 
                                     VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRSetupBuffers(dwDevice, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DPRBackground(long dwDevice/*[in]*/, long on/*[in]*/, long period/*[in]*/, 
                                   long coord/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DPRBackground(dwDevice, on, period, coord, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_DataCollectionEnabled(long dwDevice/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_DataCollectionEnabled(dwDevice, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacDeviceT<T>::get_DataCollectionEnabled(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_DataCollectionEnabled(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::get_DataCollectionResolution(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_DataCollectionResolution(dwDevice, pVal);
}

template <class T> long __fastcall
TCOMIPmacDeviceT<T>::get_DataCollectionResolution(long dwDevice/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_DataCollectionResolution(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetTurboMotorStatusEx(long dwDevice/*[in]*/, long lMotor/*[in]*/, 
                                           Pcommserverlib_tlb::DEVMSTURBO* pstatus/*[in,out]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetTurboMotorStatusEx(dwDevice, lMotor, pstatus, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetNTMotorStatusEx(long dwDevice/*[in]*/, long lMotor/*[in]*/, 
                                        Pcommserverlib_tlb::DEVMSNONTURBO* pstatus/*[in,out]*/, 
                                        VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetNTMotorStatusEx(dwDevice, lMotor, pstatus, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetTurboGlobalStatusEx(long dwDevice/*[in]*/, 
                                            Pcommserverlib_tlb::DEVGSTURBO* pstatus/*[in,out]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetTurboGlobalStatusEx(dwDevice, pstatus, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetNTGlobalStatusEx(long dwDevice/*[in]*/, 
                                         Pcommserverlib_tlb::DEVGSNONTURBO* pstatus/*[in,out]*/, 
                                         VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetNTGlobalStatusEx(dwDevice, pstatus, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetTurboCoordinateStatusEx(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                Pcommserverlib_tlb::DEVCSTURBO* pstatus/*[in,out]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetTurboCoordinateStatusEx(dwDevice, dwCoord, pstatus, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::GetNTCoordinateStatusEx(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                             Pcommserverlib_tlb::DEVCSNONTURBO* pstatus/*[in,out]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetNTCoordinateStatusEx(dwDevice, dwCoord, pstatus, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::DataGather(long dwDevice/*[in]*/, LPSAFEARRAY* pvArray/*[in,out]*/, 
                                VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DataGather(dwDevice, pvArray, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::Upload(long dwDevice/*[in]*/, Pcommserverlib_tlb::DEVUPLOAD pUpload/*[in]*/, 
                            BSTR* pData/*[out]*/, long* pstatus/*[out]*/)
{
  return (*this)->Upload(dwDevice, pUpload, pData, pstatus);
}

template <class T> HRESULT __fastcall
TCOMIPmacDeviceT<T>::ModbusActive(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->ModbusActive(dwDevice, pbSuccess);
}

// *********************************************************************//
// DispIntf:  IPmacDevice
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {8A00B576-9C14-425B-8878-493C91D8DE5C}
// *********************************************************************//
template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::Open(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(1));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::Close(long dwDevice/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DataStart(long dwDevice/*[in]*/, long resolution/*[in]*/, long period/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataStart"), DISPID(5));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = resolution /*[VT_I4:0]*/;
  _args[3] = period /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DataStop(long dwDevice/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataStop"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DataCollect(long dwDevice/*[in]*/, VARIANT* pvArray/*[in,out]*/, 
                                 VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataCollect"), DISPID(7));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pvArray /*[VT_VARIANT:1]*/;
  _args[3] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRBackGroundVar(long dwDevice/*[in]*/, VARIANT_BOOL bOn/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRBackGroundVar"), DISPID(8));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = bOn /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRAddressRange(long dwDevice/*[in]*/, VARIANT_BOOL bUpper/*[in]*/, 
                                     VARIANT_BOOL bPC/*[in]*/, long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRAddressRange"), DISPID(9));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = bUpper /*[VT_BOOL:0]*/;
  _args[3] = bPC /*[VT_BOOL:0]*/;
  _args[4] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetPmacType(long dwDevice/*[in]*/, 
                                 Pcommserverlib_tlb::DEVPMACTYPE* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetPmacType"), DISPID(10));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = (int*)pVal /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRVarBufRemove(long dwDevice/*[in]*/, long index/*[in]*/, 
                                     VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRVarBufRemove"), DISPID(11));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = index /*[VT_I4:0]*/;
  _args[3] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRVarBufRead(long dwDevice/*[in]*/, long h/*[in]*/, long entryNum/*[in]*/, 
                                   VARIANT* pVal/*[in,out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRVarBufRead"), DISPID(12));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = h /*[VT_I4:0]*/;
  _args[3] = entryNum /*[VT_I4:0]*/;
  _args[4] = pVal /*[VT_VARIANT:1]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRGetFloat(long dwDevice/*[in]*/, long offset/*[in]*/, float* pVal/*[out]*/, 
                                 VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRGetFloat"), DISPID(13));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = offset /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_R4:1]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRGetLong(long dwDevice/*[in]*/, long offset/*[in]*/, long* pVal/*[out]*/, 
                                VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRGetLong"), DISPID(14));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = offset /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_I4:1]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRVarBufInit(long dwDevice/*[in]*/, VARIANT vAddressArray/*[in]*/, 
                                   VARIANT vTypeArray/*[in]*/, long* pHandle/*[out]*/, 
                                   VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRVarBufInit"), DISPID(15));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = vAddressArray /*[VT_VARIANT:0]*/;
  _args[3] = vTypeArray /*[VT_VARIANT:0]*/;
  _args[4] = pHandle /*[VT_I4:1]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRSetFloat(long dwDevice/*[in]*/, long offset/*[in]*/, float newVal/*[in]*/, 
                                 VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRSetFloat"), DISPID(16));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = offset /*[VT_I4:0]*/;
  _args[3] = newVal /*[VT_R4:0]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRSetLong(long dwDevice/*[in]*/, long offset/*[in]*/, long newVal/*[in]*/, 
                                VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRSetLong"), DISPID(17));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = offset /*[VT_I4:0]*/;
  _args[3] = newVal /*[VT_I4:0]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRVarBufWrite(long dwDevice/*[in]*/, VARIANT vData/*[in]*/, 
                                    VARIANT vAddresses/*[in]*/, VARIANT vTypes/*[in]*/, 
                                    long* pWritten/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRVarBufWrite"), DISPID(18));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = vData /*[VT_VARIANT:0]*/;
  _args[3] = vAddresses /*[VT_VARIANT:0]*/;
  _args[4] = vTypes /*[VT_VARIANT:0]*/;
  _args[5] = pWritten /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRFloat(__int64 d/*[in]*/, double scale/*[in]*/, double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRFloat"), DISPID(19));
  TAutoArgs<3> _args;
  _args[1] = d /*[VT_I8:0]*/;
  _args[2] = scale /*[VT_R8:0]*/;
  _args[3] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetRomVersion(long dwDevice/*[in]*/, BSTR* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetRomVersion"), DISPID(20));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetRomDate(long dwDevice/*[in]*/, BSTR* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetRomDate"), DISPID(21));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetPmacLocation(long dwDevice/*[in]*/, 
                                     Pcommserverlib_tlb::DEVLOCATIONTYPE* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetPmacLocation"), DISPID(22));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = (int*)pVal /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetResponse(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                 BSTR* pAnswer/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetResponse"), DISPID(23));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = question /*[VT_BSTR:0]*/;
  _args[3] = pAnswer /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::SelectDevice(long hWindow/*[in]*/, long* pDeviceNumber/*[out]*/, 
                                  VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SelectDevice"), DISPID(26));
  TAutoArgs<3> _args;
  _args[1] = hWindow /*[VT_I4:0]*/;
  _args[2] = pDeviceNumber /*[VT_I4:1]*/;
  _args[3] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_DPRSize(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRSize"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacDeviceDispT<T>::get_DPRSize(long dwDevice/*[in]*/)
{
  long pVal;
  this->get_DPRSize(dwDevice, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_DPRAvailable(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRAvailable"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_DPRAvailable(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_DPRAvailable(dwDevice, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::SetChecksums(long dwDevice/*[in]*/, VARIANT_BOOL bActive/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetChecksums"), DISPID(29));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = bActive /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetControlResponse(long dwDevice/*[in]*/, short question/*[in]*/, 
                                        BSTR* pAnswer/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetControlResponse"), DISPID(30));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = question /*[VT_I2:0]*/;
  _args[3] = pAnswer /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_LastCommError(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("LastCommError"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacDeviceDispT<T>::get_LastCommError(long dwDevice/*[in]*/)
{
  long pVal;
  this->get_LastCommError(dwDevice, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetLastCommErrorStr(long dwDevice/*[in]*/, BSTR* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetLastCommErrorStr"), DISPID(32));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetMacroIVariableLong(long dwDevice/*[in]*/, long node/*[in]*/, 
                                           long num/*[in]*/, long def/*[in]*/, long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMacroIVariableLong"), DISPID(33));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = node /*[VT_I4:0]*/;
  _args[3] = num /*[VT_I4:0]*/;
  _args[4] = def /*[VT_I4:0]*/;
  _args[5] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_DoChecksums(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoChecksums"), DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_DoChecksums(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_DoChecksums(dwDevice, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::set_DoChecksums(long dwDevice/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoChecksums"), DISPID(37));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetIVariableLong(long dwDevice/*[in]*/, long num/*[in]*/, long def/*[in]*/, 
                                      long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIVariableLong"), DISPID(38));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = num /*[VT_I4:0]*/;
  _args[3] = def /*[VT_I4:0]*/;
  _args[4] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetIVariableDouble(long dwDevice/*[in]*/, long num/*[in]*/, double def/*[in]*/
                                        , double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetIVariableDouble"), DISPID(39));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = num /*[VT_I4:0]*/;
  _args[3] = def /*[VT_R8:0]*/;
  _args[4] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::SetIVariableLong(long dwDevice/*[in]*/, long num/*[in]*/, long newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetIVariableLong"), DISPID(40));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = num /*[VT_I4:0]*/;
  _args[3] = newVal /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::SetIVariableDouble(long dwDevice/*[in]*/, long num/*[in]*/, 
                                        double newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetIVariableDouble"), DISPID(41));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = num /*[VT_I4:0]*/;
  _args[3] = newVal /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetAsciiComm(long dwDevice/*[in]*/, 
                                  Pcommserverlib_tlb::DEVASCIIMODE* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetAsciiComm"), DISPID(42));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = (int*)pVal /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::SetAsciiComm(long dwDevice/*[in]*/, 
                                  Pcommserverlib_tlb::DEVASCIIMODE newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAsciiComm"), DISPID(43));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = (int)newVal /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetVariableLong(long dwDevice/*[in]*/, short ch/*[in]*/, long num/*[in]*/, 
                                     long def/*[in]*/, long* pVal/*[out]*/, 
                                     VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetVariableLong"), DISPID(44));
  TAutoArgs<6> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = ch /*[VT_I2:0]*/;
  _args[3] = num /*[VT_I4:0]*/;
  _args[4] = def /*[VT_I4:0]*/;
  _args[5] = pVal /*[VT_I4:1]*/;
  _args[6] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetVariableDouble(long dwDevice/*[in]*/, short ch/*[in]*/, long num/*[in]*/, 
                                       double def/*[in]*/, double* pVal/*[out]*/, 
                                       VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetVariableDouble"), DISPID(45));
  TAutoArgs<6> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = ch /*[VT_I2:0]*/;
  _args[3] = num /*[VT_I4:0]*/;
  _args[4] = def /*[VT_R8:0]*/;
  _args[5] = pVal /*[VT_R8:1]*/;
  _args[6] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::SetVariableLong(long dwDevice/*[in]*/, short ch/*[in]*/, long num/*[in]*/, 
                                     long newVal/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetVariableLong"), DISPID(46));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = ch /*[VT_I2:0]*/;
  _args[3] = num /*[VT_I4:0]*/;
  _args[4] = newVal /*[VT_I4:0]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::SetVariableDouble(long dwDevice/*[in]*/, short ch/*[in]*/, long num/*[in]*/, 
                                       double newVal/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetVariableDouble"), DISPID(47));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = ch /*[VT_I2:0]*/;
  _args[3] = num /*[VT_I4:0]*/;
  _args[4] = newVal /*[VT_R8:0]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_InBootStrapMode(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InBootStrapMode"), DISPID(48));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_InBootStrapMode(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_InBootStrapMode(dwDevice, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_MotionBufferOpen(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MotionBufferOpen"), DISPID(49));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_MotionBufferOpen(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_MotionBufferOpen(dwDevice, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_RotaryBufferOpen(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RotaryBufferOpen"), DISPID(50));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_RotaryBufferOpen(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_RotaryBufferOpen(dwDevice, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_IsTurbo(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsTurbo"), DISPID(51));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_IsTurbo(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_IsTurbo(dwDevice, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::RestoreLinkList(BSTR firmwareVersion/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("RestoreLinkList"), DISPID(52));
  TAutoArgs<2> _args;
  _args[1] = firmwareVersion /*[VT_BSTR:0]*/;
  _args[2] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::BackupLinkList(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("BackupLinkList"), DISPID(53));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::SetCriticalIVars(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCriticalIVars"), DISPID(54));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetLocAndEnum(long dwDevice/*[in]*/, long* pLoc/*[out]*/, long* pEnum/*[out]*/
                                   , VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetLocAndEnum"), DISPID(57));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pLoc /*[VT_I4:1]*/;
  _args[3] = pEnum /*[VT_I4:1]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetProgramInfo(long dwDevice/*[in]*/, VARIANT_BOOL bPlc/*[in]*/, 
                                    long num/*[in]*/, long* pSAdr/*[out]*/, long* pFAdr/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetProgramInfo"), DISPID(58));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = bPlc /*[VT_BOOL:0]*/;
  _args[3] = num /*[VT_I4:0]*/;
  _args[4] = pSAdr /*[VT_I4:1]*/;
  _args[5] = pFAdr /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DownloadFile(long dwDevice/*[in]*/, BSTR filePath/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DownloadFile"), DISPID(59));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = filePath /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::AbortDownload(long dwDevice/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AbortDownload"), DISPID(60));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DownloadFirmwareFile(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                                          VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DownloadFirmwareFile"), DISPID(61));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = filePath /*[VT_BSTR:0]*/;
  _args[3] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::Download(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                              VARIANT_BOOL bMacro/*[in]*/, VARIANT_BOOL bMap/*[in]*/, 
                              VARIANT_BOOL bLog/*[in]*/, VARIANT_BOOL bDnld/*[in]*/, 
                              VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("Download"), DISPID(62));
  TAutoArgs<7> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = filePath /*[VT_BSTR:0]*/;
  _args[3] = bMacro /*[VT_BOOL:0]*/;
  _args[4] = bMap /*[VT_BOOL:0]*/;
  _args[5] = bLog /*[VT_BOOL:0]*/;
  _args[6] = bDnld /*[VT_BOOL:0]*/;
  _args[7] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_Downloading(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Downloading"), DISPID(63));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_Downloading(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_Downloading(dwDevice, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_MaxDownloadErrors(long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxDownloadErrors"), DISPID(64));
  TAutoArgs<0> _args;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacDeviceDispT<T>::get_MaxDownloadErrors(void)
{
  long pVal;
  this->get_MaxDownloadErrors((long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::set_MaxDownloadErrors(long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MaxDownloadErrors"), DISPID(64));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::CompilePLCC(long dwDevice/*[in]*/, BSTR inFilePath/*[in]*/, 
                                 BSTR outFilePath/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("CompilePLCC"), DISPID(65));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = inFilePath /*[VT_BSTR:0]*/;
  _args[3] = outFilePath /*[VT_BSTR:0]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::SendCommand(long dwDevice/*[in]*/, BSTR cmd/*[in]*/, long* pstatus/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SendCommand"), DISPID(66));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = cmd /*[VT_BSTR:0]*/;
  _args[3] = pstatus /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetPlcStatus(long dwDevice/*[in]*/, long* pNumPlc/*[out]*/, 
                                  long* pNumPlcc/*[out]*/, long* pI5/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetPlcStatus"), DISPID(68));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pNumPlc /*[VT_I4:1]*/;
  _args[3] = pNumPlcc /*[VT_I4:1]*/;
  _args[4] = pI5 /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetFirstPlcc(long dwDevice/*[in]*/, VARIANT_BOOL* pbLoaded/*[out]*/, 
                                  VARIANT_BOOL* pbEnabled/*[out]*/, long* pStartAdr/*[out]*/, 
                                  long* pLastAdr/*[out]*/, long* pSize/*[out]*/, 
                                  VARIANT_BOOL* pbMore/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetFirstPlcc"), DISPID(69));
  TAutoArgs<7> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pbLoaded /*[VT_BOOL:1]*/;
  _args[3] = pbEnabled /*[VT_BOOL:1]*/;
  _args[4] = pStartAdr /*[VT_I4:1]*/;
  _args[5] = pLastAdr /*[VT_I4:1]*/;
  _args[6] = pSize /*[VT_I4:1]*/;
  _args[7] = pbMore /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetNextPlcc(long dwDevice/*[in]*/, VARIANT_BOOL* pbLoaded/*[out]*/, 
                                 VARIANT_BOOL* pbEnabled/*[out]*/, long* pStartAdr/*[out]*/, 
                                 long* pLastAdr/*[out]*/, long* pSize/*[out]*/, 
                                 VARIANT_BOOL* pbMore/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNextPlcc"), DISPID(70));
  TAutoArgs<7> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pbLoaded /*[VT_BOOL:1]*/;
  _args[3] = pbEnabled /*[VT_BOOL:1]*/;
  _args[4] = pStartAdr /*[VT_I4:1]*/;
  _args[5] = pLastAdr /*[VT_I4:1]*/;
  _args[6] = pSize /*[VT_I4:1]*/;
  _args[7] = pbMore /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetFirstPlc(long dwDevice/*[in]*/, VARIANT_BOOL* pbEnabled/*[out]*/, 
                                 long* pStartAdr/*[out]*/, long* pLastAdr/*[out]*/, 
                                 long* pSize/*[out]*/, VARIANT_BOOL* pbMore/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetFirstPlc"), DISPID(71));
  TAutoArgs<6> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pbEnabled /*[VT_BOOL:1]*/;
  _args[3] = pStartAdr /*[VT_I4:1]*/;
  _args[4] = pLastAdr /*[VT_I4:1]*/;
  _args[5] = pSize /*[VT_I4:1]*/;
  _args[6] = pbMore /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetNextPlc(long dwDevice/*[in]*/, VARIANT_BOOL* pbEnabled/*[out]*/, 
                                long* pStartAdr/*[out]*/, long* pLastAdr/*[out]*/, 
                                long* pSize/*[out]*/, VARIANT_BOOL* pbMore/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNextPlc"), DISPID(72));
  TAutoArgs<6> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pbEnabled /*[VT_BOOL:1]*/;
  _args[3] = pStartAdr /*[VT_I4:1]*/;
  _args[4] = pLastAdr /*[VT_I4:1]*/;
  _args[5] = pSize /*[VT_I4:1]*/;
  _args[6] = pbMore /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_IsAnyPlcRunning(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsAnyPlcRunning"), DISPID(73));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_IsAnyPlcRunning(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_IsAnyPlcRunning(dwDevice, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetGlobalStatus(long dwDevice/*[in]*/, long* pStatusX/*[out]*/, 
                                     long* pStatusY/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetGlobalStatus"), DISPID(74));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pStatusX /*[VT_I4:1]*/;
  _args[3] = pStatusY /*[VT_I4:1]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetCoordStatus(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                    long* pStatusX/*[out]*/, long* pStatusY/*[out]*/, 
                                    VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCoordStatus"), DISPID(75));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  _args[3] = pStatusX /*[VT_I4:1]*/;
  _args[4] = pStatusY /*[VT_I4:1]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetMotorStatus(long dwDevice/*[in]*/, long lMotor/*[in]*/, 
                                    long* pStatusX/*[out]*/, long* pStatusY/*[out]*/, 
                                    VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMotorStatus"), DISPID(76));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = lMotor /*[VT_I4:0]*/;
  _args[3] = pStatusX /*[VT_I4:1]*/;
  _args[4] = pStatusY /*[VT_I4:1]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_SysServoError(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SysServoError"), DISPID(77));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_SysServoError(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_SysServoError(dwDevice, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_SysReEntryError(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SysReEntryError"), DISPID(78));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_SysReEntryError(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_SysReEntryError(dwDevice, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_SysMemChecksumError(long dwDevice/*[in]*/, 
                                             VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SysMemChecksumError"), DISPID(79));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_SysMemChecksumError(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_SysMemChecksumError(dwDevice, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_SysPromChecksumError(long dwDevice/*[in]*/, 
                                              VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SysPromChecksumError"), DISPID(80));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_SysPromChecksumError(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_SysPromChecksumError(dwDevice, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_SysInposition(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                       VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SysInposition"), DISPID(81));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_SysInposition(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_SysInposition(dwDevice, dwCoord, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_SysWarnFError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                       VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SysWarnFError"), DISPID(82));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_SysWarnFError(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_SysWarnFError(dwDevice, dwCoord, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_SysFatalFError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                        VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SysFatalFError"), DISPID(83));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_SysFatalFError(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_SysFatalFError(dwDevice, dwCoord, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_SysRuntimeError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                         VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SysRuntimeError"), DISPID(84));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_SysRuntimeError(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_SysRuntimeError(dwDevice, dwCoord, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_SysCircleRadError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                           VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SysCircleRadError"), DISPID(85));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_SysCircleRadError(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_SysCircleRadError(dwDevice, dwCoord, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_SysAmpFaultError(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                          VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SysAmpFaultError"), DISPID(86));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_SysAmpFaultError(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_SysAmpFaultError(dwDevice, dwCoord, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetCommandedPos(long dwDevice/*[in]*/, long mtr/*[in]*/, double scale/*[in]*/, 
                                     double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCommandedPos"), DISPID(87));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  _args[3] = scale /*[VT_R8:0]*/;
  _args[4] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetPosition(long dwDevice/*[in]*/, long mtr/*[in]*/, double scale/*[in]*/, 
                                 double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetPosition"), DISPID(88));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  _args[3] = scale /*[VT_R8:0]*/;
  _args[4] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetNetActualPosition(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                          double scale/*[in]*/, double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNetActualPosition"), DISPID(89));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  _args[3] = scale /*[VT_R8:0]*/;
  _args[4] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetFollowError(long dwDevice/*[in]*/, long mtr/*[in]*/, double scale/*[in]*/, 
                                    double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetFollowError"), DISPID(90));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  _args[3] = scale /*[VT_R8:0]*/;
  _args[4] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetVelocity(long dwDevice/*[in]*/, long mtr/*[in]*/, double scale/*[in]*/, 
                                 double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetVelocity"), DISPID(91));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  _args[3] = scale /*[VT_R8:0]*/;
  _args[4] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetMasterPos(long dwDevice/*[in]*/, long mtr/*[in]*/, double scale/*[in]*/, 
                                  double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMasterPos"), DISPID(92));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  _args[3] = scale /*[VT_R8:0]*/;
  _args[4] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetCompensationPos(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                        double scale/*[in]*/, double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCompensationPos"), DISPID(93));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  _args[3] = scale /*[VT_R8:0]*/;
  _args[4] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetTargetPos(long dwDevice/*[in]*/, long mtr/*[in]*/, double scale/*[in]*/, 
                                  double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetTargetPos"), DISPID(94));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  _args[3] = scale /*[VT_R8:0]*/;
  _args[4] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetBiasPos(long dwDevice/*[in]*/, long mtr/*[in]*/, double scale/*[in]*/, 
                                double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetBiasPos"), DISPID(95));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  _args[3] = scale /*[VT_R8:0]*/;
  _args[4] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetProgExecPoint(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                      long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetProgExecPoint"), DISPID(96));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetRotBufFull(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                   VARIANT_BOOL* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetRotBufFull"), DISPID(97));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_ProgramRunning(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                        VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProgramRunning"), DISPID(98));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_ProgramRunning(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_ProgramRunning(dwDevice, dwCoord, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_ProgramStepping(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                         VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProgramStepping"), DISPID(99));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_ProgramStepping(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_ProgramStepping(dwDevice, dwCoord, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_ProgramContMotion(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                           VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProgramContMotion"), DISPID(100));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_ProgramContMotion(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_ProgramContMotion(dwDevice, dwCoord, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_ProgramContRequest(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                            VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProgramContRequest"), DISPID(101));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_ProgramContRequest(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_ProgramContRequest(dwDevice, dwCoord, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_ProgramRemaining(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                          long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProgramRemaining"), DISPID(102));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacDeviceDispT<T>::get_ProgramRemaining(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  long pVal;
  this->get_ProgramRemaining(dwDevice, dwCoord, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_MotionBufOpen(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MotionBufOpen"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_MotionBufOpen(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_MotionBufOpen(dwDevice, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_ProgramFeedMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                         VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProgramFeedMode"), DISPID(105));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_ProgramFeedMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_ProgramFeedMode(dwDevice, dwCoord, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_MotorAmpEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                         VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MotorAmpEnabled"), DISPID(106));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_MotorAmpEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_MotorAmpEnabled(dwDevice, mtr, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_MotorWarnFError(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                         VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MotorWarnFError"), DISPID(107));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_MotorWarnFError(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_MotorWarnFError(dwDevice, mtr, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_MotorFatalFError(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                          VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MotorFatalFError"), DISPID(108));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_MotorFatalFError(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_MotorFatalFError(dwDevice, mtr, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_MotorAmpFault(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                       VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MotorAmpFault"), DISPID(109));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_MotorAmpFault(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_MotorAmpFault(dwDevice, mtr, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_MotorOnPositionLimit(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                              VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MotorOnPositionLimit"), DISPID(110));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_MotorOnPositionLimit(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_MotorOnPositionLimit(dwDevice, mtr, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_MotorHomeComplete(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                           VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MotorHomeComplete"), DISPID(111));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_MotorHomeComplete(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_MotorHomeComplete(dwDevice, mtr, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_MotorInPosition(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                         VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MotorInPosition"), DISPID(112));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_MotorInPosition(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_MotorInPosition(dwDevice, mtr, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_TimRemInMove(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                      long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TimRemInMove"), DISPID(113));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacDeviceDispT<T>::get_TimRemInMove(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  long pVal;
  this->get_TimRemInMove(dwDevice, dwCoord, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_TimeRemInTATS(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                       long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TimeRemInTATS"), DISPID(114));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacDeviceDispT<T>::get_TimeRemInTATS(long dwDevice/*[in]*/, long dwCoord/*[in]*/)
{
  long pVal;
  this->get_TimeRemInTATS(dwDevice, dwCoord, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_MotorDataBlockError(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                             VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MotorDataBlockError"), DISPID(115));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_MotorDataBlockError(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_MotorDataBlockError(dwDevice, mtr, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_MotorPhased(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                     VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MotorPhased"), DISPID(116));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_MotorPhased(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_MotorPhased(dwDevice, mtr, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_MotorEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                      VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MotorEnabled"), DISPID(117));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_MotorEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_MotorEnabled(dwDevice, mtr, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_MotorHandwheelEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MotorHandwheelEnabled"), DISPID(118));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_MotorHandwheelEnabled(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_MotorHandwheelEnabled(dwDevice, mtr, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_MotorOpenLoop(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                       VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MotorOpenLoop"), DISPID(119));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_MotorOpenLoop(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_MotorOpenLoop(dwDevice, mtr, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_MotorOnNegLimit(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                         VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MotorOnNegLimit"), DISPID(120));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_MotorOnNegLimit(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_MotorOnNegLimit(dwDevice, mtr, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_MotorOnPosLimit(long dwDevice/*[in]*/, long mtr/*[in]*/, 
                                         VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MotorOnPosLimit"), DISPID(121));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_MotorOnPosLimit(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_MotorOnPosLimit(dwDevice, mtr, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::SetJogReturn(long dwDevice/*[in]*/, long mtr/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetJogReturn"), DISPID(122));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetWhyMotorNotMoving(long dwDevice/*[in]*/, long motor/*[in]*/, 
                                          long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetWhyMotorNotMoving"), DISPID(123));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = motor /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetWhyMotorNotMovingStr(long err/*[in]*/, BSTR* pVal/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetWhyMotorNotMovingStr"), DISPID(124));
  TAutoArgs<2> _args;
  _args[1] = err /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetWhyCSNotMoving(long dwDevice/*[in]*/, long cs/*[in]*/, long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetWhyCSNotMoving"), DISPID(125));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = cs /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetWhyCSNotMovingStr(long err/*[in]*/, BSTR* pVal/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetWhyCSNotMovingStr"), DISPID(126));
  TAutoArgs<2> _args;
  _args[1] = err /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_BufferOpen(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BufferOpen"), DISPID(127));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_BufferOpen(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_BufferOpen(dwDevice, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_GatherPeriod(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatherPeriod"), DISPID(128));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacDeviceDispT<T>::get_GatherPeriod(long dwDevice/*[in]*/)
{
  long pVal;
  this->get_GatherPeriod(dwDevice, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::set_GatherPeriod(long dwDevice/*[in]*/, long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatherPeriod"), DISPID(128));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_GatherEnabled(long dwDevice/*[in]*/, long num/*[in]*/, 
                                       VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatherEnabled"), DISPID(129));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = num /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_GatherEnabled(long dwDevice/*[in]*/, long num/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_GatherEnabled(dwDevice, num, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::set_GatherEnabled(long dwDevice/*[in]*/, long num/*[in]*/, 
                                       VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatherEnabled"), DISPID(129));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = num /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_GatherMode(long dwDevice/*[in]*/, 
                                    Pcommserverlib_tlb::DEVGATMODE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatherMode"), DISPID(130));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Pcommserverlib_tlb::DEVGATMODE __fastcall
IPmacDeviceDispT<T>::get_GatherMode(long dwDevice/*[in]*/)
{
  Pcommserverlib_tlb::DEVGATMODE pVal;
  this->get_GatherMode(dwDevice, (Pcommserverlib_tlb::DEVGATMODE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::set_GatherMode(long dwDevice/*[in]*/, 
                                    Pcommserverlib_tlb::DEVGATMODE pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatherMode"), DISPID(130));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_GatherSampleTime(long dwDevice/*[in]*/, double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatherSampleTime"), DISPID(131));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IPmacDeviceDispT<T>::get_GatherSampleTime(long dwDevice/*[in]*/)
{
  double pVal;
  this->get_GatherSampleTime(dwDevice, (double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::set_GatherSampleTime(long dwDevice/*[in]*/, double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("GatherSampleTime"), DISPID(131));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetNumGatherSources(long dwDevice/*[in]*/, long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNumGatherSources"), DISPID(132));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetNumGatherSamples(long dwDevice/*[in]*/, long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNumGatherSamples"), DISPID(133));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::SetGather(long dwDevice/*[in]*/, long num/*[in]*/, BSTR str/*[in]*/, 
                               VARIANT_BOOL bEnable/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetGather"), DISPID(134));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = num /*[VT_I4:0]*/;
  _args[3] = str /*[VT_BSTR:0]*/;
  _args[4] = bEnable /*[VT_BOOL:0]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::SetQuickGather(long dwDevice/*[in]*/, long lComMask/*[in]*/, 
                                    long lEncMask/*[in]*/, long lDacMask/*[in]*/, 
                                    long lCurMask/*[in]*/, VARIANT_BOOL bEnable/*[in]*/, 
                                    VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetQuickGather"), DISPID(135));
  TAutoArgs<7> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = lComMask /*[VT_I4:0]*/;
  _args[3] = lEncMask /*[VT_I4:0]*/;
  _args[4] = lDacMask /*[VT_I4:0]*/;
  _args[5] = lCurMask /*[VT_I4:0]*/;
  _args[6] = bEnable /*[VT_BOOL:0]*/;
  _args[7] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::SetQuickGatherWithDirectCurrent(long dwDevice/*[in]*/, long lComMask/*[in]*/, 
                                                     long lEncMask/*[in]*/, long lDacMask/*[in]*/, 
                                                     long lCurMask/*[in]*/, 
                                                     VARIANT_BOOL bEnable/*[in]*/, 
                                                     VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetQuickGatherWithDirectCurrent"), DISPID(136));
  TAutoArgs<7> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = lComMask /*[VT_I4:0]*/;
  _args[3] = lEncMask /*[VT_I4:0]*/;
  _args[4] = lDacMask /*[VT_I4:0]*/;
  _args[5] = lCurMask /*[VT_I4:0]*/;
  _args[6] = bEnable /*[VT_BOOL:0]*/;
  _args[7] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetGather(long dwDevice/*[in]*/, long num/*[in]*/, BSTR* pStr/*[in,out]*/, 
                               VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetGather"), DISPID(137));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = num /*[VT_I4:0]*/;
  _args[3] = pStr /*[VT_BSTR:1]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::ClearGather(long dwDevice/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClearGather"), DISPID(138));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::InitGather(long dwDevice/*[in]*/, long size/*[in]*/, double msec/*[in]*/, 
                                VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("InitGather"), DISPID(139));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = size /*[VT_I4:0]*/;
  _args[3] = msec /*[VT_R8:0]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::ClearGatherData(long dwDevice/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClearGatherData"), DISPID(140));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::CollectGatherData(long dwDevice/*[in]*/, long* pSources/*[out]*/, 
                                       long* pSamples/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("CollectGatherData"), DISPID(141));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pSources /*[VT_I4:1]*/;
  _args[3] = pSamples /*[VT_I4:1]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetGatherSamples(long dwDevice/*[in]*/, long sourceNum/*[in]*/, 
                                      VARIANT* pVariant/*[in,out]*/, 
                                      VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetGatherSamples"), DISPID(142));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = sourceNum /*[VT_I4:0]*/;
  _args[3] = pVariant /*[VT_VARIANT:1]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetGatherPoint(long dwDevice/*[in]*/, long sourceNum/*[in]*/, 
                                    long sampleNum/*[in]*/, double* pVal/*[out]*/, 
                                    VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetGatherPoint"), DISPID(143));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = sourceNum /*[VT_I4:0]*/;
  _args[3] = sampleNum /*[VT_I4:0]*/;
  _args[4] = pVal /*[VT_R8:1]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::StartGather(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartGather"), DISPID(144));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::StopGather(long dwDevice/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StopGather"), DISPID(145));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::InitPlotGather(long dwDevice/*[in]*/, long size/*[in]*/, long period/*[in]*/, 
                                    VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("InitPlotGather"), DISPID(146));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = size /*[VT_I4:0]*/;
  _args[3] = period /*[VT_I4:0]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::ReadGatherFile(long dwDevice/*[in]*/, BSTR bsFilePath/*[in]*/, 
                                    VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadGatherFile"), DISPID(147));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = bsFilePath /*[VT_BSTR:0]*/;
  _args[3] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::WriteGatherFile(long dwDevice/*[in]*/, BSTR bsFilePath/*[in]*/, 
                                     VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("WriteGatherFile"), DISPID(148));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = bsFilePath /*[VT_BSTR:0]*/;
  _args[3] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::strtod48f(BSTR str/*[in]*/, double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("strtod48f"), DISPID(149));
  TAutoArgs<2> _args;
  _args[1] = str /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::strtod48l(BSTR str/*[in]*/, double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("strtod48l"), DISPID(150));
  TAutoArgs<2> _args;
  _args[1] = str /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::strtod24(BSTR str/*[in]*/, double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("strtod24"), DISPID(151));
  TAutoArgs<2> _args;
  _args[1] = str /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::strtod32dp(BSTR str/*[in]*/, double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("strtod32dp"), DISPID(152));
  TAutoArgs<2> _args;
  _args[1] = str /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::strto32f(BSTR str/*[in]*/, double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("strto32f"), DISPID(153));
  TAutoArgs<2> _args;
  _args[1] = str /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::UploadMacroConfig(long dwDevice/*[in]*/, BSTR bsFilePath/*[in]*/, 
                                       VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("UploadMacroConfig"), DISPID(154));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = bsFilePath /*[VT_BSTR:0]*/;
  _args[3] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DownloadCurrentFeedbackTest(long dwDevice/*[in]*/, short mtr/*[in]*/, 
                                                 double pwmDutyCycle/*[in]*/, short pwmFreq/*[in]*/
                                                 , VARIANT_BOOL bMacro/*[in]*/, 
                                                 VARIANT_BOOL bUltra/*[in]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DownloadCurrentFeedbackTest"), DISPID(155));
  TAutoArgs<7> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I2:0]*/;
  _args[3] = pwmDutyCycle /*[VT_R8:0]*/;
  _args[4] = pwmFreq /*[VT_I2:0]*/;
  _args[5] = bMacro /*[VT_BOOL:0]*/;
  _args[6] = bUltra /*[VT_BOOL:0]*/;
  _args[7] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::ReadResultsFromCurrentFeedbackTest(long dwDevice/*[in]*/, short mtr/*[in]*/, 
                                                        long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadResultsFromCurrentFeedbackTest"), DISPID(156));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I2:0]*/;
  _args[3] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DownloadVoltageSixStepTest(long dwDevice/*[in]*/, short mtr/*[in]*/, 
                                                double pwmDutyCycle/*[in]*/, 
                                                VARIANT_BOOL bMacro/*[in]*/, 
                                                VARIANT_BOOL bUltra/*[in]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DownloadVoltageSixStepTest"), DISPID(157));
  TAutoArgs<6> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mtr /*[VT_I2:0]*/;
  _args[3] = pwmDutyCycle /*[VT_R8:0]*/;
  _args[4] = bMacro /*[VT_BOOL:0]*/;
  _args[5] = bUltra /*[VT_BOOL:0]*/;
  _args[6] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::ReadResultsFromSixStepTest(long dwDevice/*[in]*/, 
                                                VARIANT_BOOL bSipFirstStep/*[in]*/, 
                                                VARIANT* pvStepArray/*[in,out]*/, 
                                                long* pResult/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadResultsFromSixStepTest"), DISPID(158));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = bSipFirstStep /*[VT_BOOL:0]*/;
  _args[3] = pvStepArray /*[VT_VARIANT:1]*/;
  _args[4] = pResult /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DownloadCurrentSixStepTest(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                double pwmDutyCycle/*[in]*/, 
                                                VARIANT_BOOL bMacro/*[in]*/, 
                                                VARIANT_BOOL bUltra/*[in]*/, 
                                                VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DownloadCurrentSixStepTest"), DISPID(159));
  TAutoArgs<6> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = motor /*[VT_I2:0]*/;
  _args[3] = pwmDutyCycle /*[VT_R8:0]*/;
  _args[4] = bMacro /*[VT_BOOL:0]*/;
  _args[5] = bUltra /*[VT_BOOL:0]*/;
  _args[6] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DownloadOpenLoopTest(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                          short magnitude/*[in]*/, short time/*[in]*/, 
                                          short reps/*[in]*/, VARIANT_BOOL bGatherCurrents/*[in]*/, 
                                          VARIANT_BOOL bMacro/*[in]*/, 
                                          VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DownloadOpenLoopTest"), DISPID(160));
  TAutoArgs<8> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = motor /*[VT_I2:0]*/;
  _args[3] = magnitude /*[VT_I2:0]*/;
  _args[4] = time /*[VT_I2:0]*/;
  _args[5] = reps /*[VT_I2:0]*/;
  _args[6] = bGatherCurrents /*[VT_BOOL:0]*/;
  _args[7] = bMacro /*[VT_BOOL:0]*/;
  _args[8] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DownloadOpenLoopTest1(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                           short magnitude/*[in]*/, short time/*[in]*/, 
                                           short reps/*[in]*/, VARIANT_BOOL bGatherCurrents/*[in]*/
                                           , VARIANT_BOOL bMacro/*[in]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DownloadOpenLoopTest1"), DISPID(161));
  TAutoArgs<8> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = motor /*[VT_I2:0]*/;
  _args[3] = magnitude /*[VT_I2:0]*/;
  _args[4] = time /*[VT_I2:0]*/;
  _args[5] = reps /*[VT_I2:0]*/;
  _args[6] = bGatherCurrents /*[VT_BOOL:0]*/;
  _args[7] = bMacro /*[VT_BOOL:0]*/;
  _args[8] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DownloadVelLimitPLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                         long maxspd/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DownloadVelLimitPLC"), DISPID(162));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = motor /*[VT_I2:0]*/;
  _args[3] = maxspd /*[VT_I4:0]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DownloadPosLimitPLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                         VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DownloadPosLimitPLC"), DISPID(163));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = motor /*[VT_I2:0]*/;
  _args[3] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DownloadUVWSixStepTest(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                            double pwmDutyCycle/*[in]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DownloadUVWSixStepTest"), DISPID(164));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = motor /*[VT_I2:0]*/;
  _args[3] = pwmDutyCycle /*[VT_R8:0]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::ReadResultsFromUVWSixStepTest(long dwDevice/*[in]*/, 
                                                   VARIANT* pvArray/*[in,out]*/, 
                                                   long* pResult/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadResultsFromUVWSixStepTest"), DISPID(165));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pvArray /*[VT_VARIANT:1]*/;
  _args[3] = pResult /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::SetIVarForFeedback(long dwDevice/*[in]*/, short ivar/*[in]*/, 
                                        long address/*[in]*/, 
                                        Pcommserverlib_tlb::DEVFEEDBACKTYPE fbType/*[in]*/, 
                                        VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetIVarForFeedback"), DISPID(166));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = ivar /*[VT_I2:0]*/;
  _args[3] = address /*[VT_I4:0]*/;
  _args[4] = (int)fbType /*[VT_USERDEFINED:0]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DownloadAndRunRoughPhasePLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DownloadAndRunRoughPhasePLC"), DISPID(167));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = motor /*[VT_I2:0]*/;
  _args[3] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::CreateIncrementalFinePhasePLC(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                                                   short PLCNumber/*[in]*/, short motor/*[in]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("CreateIncrementalFinePhasePLC"), DISPID(168));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = filePath /*[VT_BSTR:0]*/;
  _args[3] = PLCNumber /*[VT_I2:0]*/;
  _args[4] = motor /*[VT_I2:0]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DoACurrentLoopStep(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                        short dwellTime/*[in]*/, long magnitude/*[in]*/, 
                                        VARIANT_BOOL bAutoTune/*[in]*/, BSTR* pbsCTSCurrent/*[out]*/
                                        , double pwmDutyCycle/*[in]*/, short divisor/*[in]*/, 
                                        VARIANT_BOOL bUltra/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoACurrentLoopStep"), DISPID(169));
  TAutoArgs<9> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = motor /*[VT_I2:0]*/;
  _args[3] = dwellTime /*[VT_I2:0]*/;
  _args[4] = magnitude /*[VT_I4:0]*/;
  _args[5] = bAutoTune /*[VT_BOOL:0]*/;
  _args[6] = pbsCTSCurrent /*[VT_BSTR:1]*/;
  _args[7] = pwmDutyCycle /*[VT_R8:0]*/;
  _args[8] = divisor /*[VT_I2:0]*/;
  _args[9] = bUltra /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DoACurrentLoopStepBrush(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                             short dwellTime/*[in]*/, long magnitude/*[in]*/, 
                                             VARIANT_BOOL bAutoTune/*[in]*/, 
                                             BSTR* pbsCTSCurrent/*[out]*/, 
                                             double pwmDutyCycle/*[in]*/, short divisor/*[in]*/, 
                                             VARIANT_BOOL bUltra/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoACurrentLoopStepBrush"), DISPID(170));
  TAutoArgs<9> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = motor /*[VT_I2:0]*/;
  _args[3] = dwellTime /*[VT_I2:0]*/;
  _args[4] = magnitude /*[VT_I4:0]*/;
  _args[5] = bAutoTune /*[VT_BOOL:0]*/;
  _args[6] = pbsCTSCurrent /*[VT_BSTR:1]*/;
  _args[7] = pwmDutyCycle /*[VT_R8:0]*/;
  _args[8] = divisor /*[VT_I2:0]*/;
  _args[9] = bUltra /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DoAPositionLoopStep(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                         short stepSize/*[in]*/, short stepTime/*[in]*/, 
                                         VARIANT_BOOL bBiDirectional/*[in]*/, 
                                         VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoAPositionLoopStep"), DISPID(171));
  TAutoArgs<6> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = motor /*[VT_I2:0]*/;
  _args[3] = stepSize /*[VT_I2:0]*/;
  _args[4] = stepTime /*[VT_I2:0]*/;
  _args[5] = bBiDirectional /*[VT_BOOL:0]*/;
  _args[6] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DoAParabolicMove(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                      long stepSize/*[in]*/, short stepTime/*[in]*/, 
                                      VARIANT_BOOL bBiDirectional/*[in]*/, 
                                      VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoAParabolicMove"), DISPID(172));
  TAutoArgs<6> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = motor /*[VT_I2:0]*/;
  _args[3] = stepSize /*[VT_I4:0]*/;
  _args[4] = stepTime /*[VT_I2:0]*/;
  _args[5] = bBiDirectional /*[VT_BOOL:0]*/;
  _args[6] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DoAGantryPositionLoopStep(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                               short motor2/*[in]*/, short stepSize/*[in]*/, 
                                               short stepTime/*[in]*/, 
                                               VARIANT_BOOL bBiDirectional/*[in]*/, 
                                               VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoAGantryPositionLoopStep"), DISPID(173));
  TAutoArgs<7> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = motor /*[VT_I2:0]*/;
  _args[3] = motor2 /*[VT_I2:0]*/;
  _args[4] = stepSize /*[VT_I2:0]*/;
  _args[5] = stepTime /*[VT_I2:0]*/;
  _args[6] = bBiDirectional /*[VT_BOOL:0]*/;
  _args[7] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DoAGantryParabolicMove(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                            short motor2/*[in]*/, long stepSize/*[in]*/, 
                                            short stepTime/*[in]*/, 
                                            VARIANT_BOOL bBiDirectional/*[in]*/, 
                                            VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoAGantryParabolicMove"), DISPID(174));
  TAutoArgs<7> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = motor /*[VT_I2:0]*/;
  _args[3] = motor2 /*[VT_I2:0]*/;
  _args[4] = stepSize /*[VT_I4:0]*/;
  _args[5] = stepTime /*[VT_I2:0]*/;
  _args[6] = bBiDirectional /*[VT_BOOL:0]*/;
  _args[7] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DoAGantryParabolic(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                        short motor2/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DoAGantryParabolic"), DISPID(175));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = motor /*[VT_I2:0]*/;
  _args[3] = motor2 /*[VT_I2:0]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::ConvertWordToStringFloat(BSTR word/*[in]*/, BSTR* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConvertWordToStringFloat"), DISPID(176));
  TAutoArgs<2> _args;
  _args[1] = word /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::ConvertWordToShort(BSTR word/*[in]*/, short offset/*[in]*/, 
                                        short* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConvertWordToShort"), DISPID(177));
  TAutoArgs<3> _args;
  _args[1] = word /*[VT_BSTR:0]*/;
  _args[2] = offset /*[VT_I2:0]*/;
  _args[3] = pVal /*[VT_I2:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::ConvertWordToLong(BSTR word/*[in]*/, long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("ConvertWordToLong"), DISPID(178));
  TAutoArgs<2> _args;
  _args[1] = word /*[VT_BSTR:0]*/;
  _args[2] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::RestoreModifiedIVars(long dwDevice/*[in]*/, short motor/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RestoreModifiedIVars"), DISPID(179));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = motor /*[VT_I2:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::CalculateStepStatistics(VARIANT* pvData/*[in,out]*/, long stepSize/*[in]*/, 
                                             long I10/*[in]*/, long I19/*[in]*/, 
                                             BSTR* pbsRiseTime/*[out]*/, BSTR* pbsPeakTime/*[out]*/
                                             , BSTR* pbsNatFreq/*[out]*/, 
                                             BSTR* pbsOvershoot/*[out]*/, BSTR* pbsDamping/*[out]*/
                                             , BSTR* pbsSettleTime/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("CalculateStepStatistics"), DISPID(180));
  TAutoArgs<10> _args;
  _args[1] = pvData /*[VT_VARIANT:1]*/;
  _args[2] = stepSize /*[VT_I4:0]*/;
  _args[3] = I10 /*[VT_I4:0]*/;
  _args[4] = I19 /*[VT_I4:0]*/;
  _args[5] = pbsRiseTime /*[VT_BSTR:1]*/;
  _args[6] = pbsPeakTime /*[VT_BSTR:1]*/;
  _args[7] = pbsNatFreq /*[VT_BSTR:1]*/;
  _args[8] = pbsOvershoot /*[VT_BSTR:1]*/;
  _args[9] = pbsDamping /*[VT_BSTR:1]*/;
  _args[10] = pbsSettleTime /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::LowPassFilterTheData(VARIANT* pvData/*[in,out]*/, BSTR bsCurrent/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LowPassFilterTheData"), DISPID(181));
  TAutoArgs<2> _args;
  _args[1] = pvData /*[VT_VARIANT:1]*/;
  _args[2] = bsCurrent /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DifferentiateTheData(VARIANT* pvData/*[in,out]*/, long I10/*[in]*/, 
                                          long I19/*[in]*/, long* pMinVal/*[out]*/, 
                                          long* pMaxVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DifferentiateTheData"), DISPID(182));
  TAutoArgs<5> _args;
  _args[1] = pvData /*[VT_VARIANT:1]*/;
  _args[2] = I10 /*[VT_I4:0]*/;
  _args[3] = I19 /*[VT_I4:0]*/;
  _args[4] = pMinVal /*[VT_I4:1]*/;
  _args[5] = pMaxVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DownloadAutoTuningPLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                           VARIANT_BOOL bCurrentLoop/*[in]*/, 
                                           VARIANT_BOOL bBypassJog/*[in]*/, 
                                           VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DownloadAutoTuningPLC"), DISPID(183));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = motor /*[VT_I2:0]*/;
  _args[3] = bCurrentLoop /*[VT_BOOL:0]*/;
  _args[4] = bBypassJog /*[VT_BOOL:0]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DownloadGantryAutoTuningPLCP1(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                   short motor2/*[in]*/, 
                                                   VARIANT_BOOL bCurrentLoop/*[in]*/, 
                                                   VARIANT_BOOL bBypassJog/*[in]*/, 
                                                   VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DownloadGantryAutoTuningPLCP1"), DISPID(184));
  TAutoArgs<6> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = motor /*[VT_I2:0]*/;
  _args[3] = motor2 /*[VT_I2:0]*/;
  _args[4] = bCurrentLoop /*[VT_BOOL:0]*/;
  _args[5] = bBypassJog /*[VT_BOOL:0]*/;
  _args[6] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DownloadGantryAutoTuningPLC(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                 short motor2/*[in]*/, 
                                                 VARIANT_BOOL bCurrentLoop/*[in]*/, 
                                                 VARIANT_BOOL bBypassJog/*[in]*/, 
                                                 double MaxTravel/*[in]*/, long time/*[in]*/, 
                                                 VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DownloadGantryAutoTuningPLC"), DISPID(185));
  TAutoArgs<8> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = motor /*[VT_I2:0]*/;
  _args[3] = motor2 /*[VT_I2:0]*/;
  _args[4] = bCurrentLoop /*[VT_BOOL:0]*/;
  _args[5] = bBypassJog /*[VT_BOOL:0]*/;
  _args[6] = MaxTravel /*[VT_R8:0]*/;
  _args[7] = time /*[VT_I4:0]*/;
  _args[8] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::MagEstimation(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                                   VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("MagEstimation"), DISPID(186));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = filePath /*[VT_BSTR:0]*/;
  _args[3] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::SlopeEstimation(long dwDevice/*[in]*/, BSTR filePath/*[in]*/, 
                                     VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SlopeEstimation"), DISPID(187));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = filePath /*[VT_BSTR:0]*/;
  _args[3] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::SetCurrentGather(long dwDevice/*[in]*/, long mask/*[in]*/, 
                                      VARIANT_BOOL bEnable/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCurrentGather"), DISPID(188));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = mask /*[VT_I4:0]*/;
  _args[3] = bEnable /*[VT_BOOL:0]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DownloadOpenLoopTestForPMAC1(long dwDevice/*[in]*/, short motor/*[in]*/, 
                                                  short magnitude/*[in]*/, short time/*[in]*/, 
                                                  short reps/*[in]*/, 
                                                  VARIANT_BOOL bGatherCurrents/*[in]*/, 
                                                  VARIANT_BOOL bMacro/*[in]*/, 
                                                  VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DownloadOpenLoopTestForPMAC1"), DISPID(189));
  TAutoArgs<8> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = motor /*[VT_I2:0]*/;
  _args[3] = magnitude /*[VT_I2:0]*/;
  _args[4] = time /*[VT_I2:0]*/;
  _args[5] = reps /*[VT_I2:0]*/;
  _args[6] = bGatherCurrents /*[VT_BOOL:0]*/;
  _args[7] = bMacro /*[VT_BOOL:0]*/;
  _args[8] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetMacroNodes(long dwDevice/*[in]*/, long* pNumMacroStations/*[out]*/, 
                                   long* pNumActiveNodes/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMacroNodes"), DISPID(190));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pNumMacroStations /*[VT_I4:1]*/;
  _args[3] = pNumActiveNodes /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetMacroNodeInfo(long dwDevice/*[in]*/, long modeNum/*[in]*/, 
                                      VARIANT_BOOL* pbEnabled/*[out]*/, 
                                      VARIANT_BOOL* pbIsIONode/*[out]*/, long* pID/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMacroNodeInfo"), DISPID(191));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = modeNum /*[VT_I4:0]*/;
  _args[3] = pbEnabled /*[VT_BOOL:1]*/;
  _args[4] = pbIsIONode /*[VT_BOOL:1]*/;
  _args[5] = pID /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::SetMacroIVariableString(long dwDevice/*[in]*/, long node/*[in]*/, 
                                             long num/*[in]*/, BSTR bsMIVarValue/*[in]*/, 
                                             VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetMacroIVariableString"), DISPID(192));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = node /*[VT_I4:0]*/;
  _args[3] = num /*[VT_I4:0]*/;
  _args[4] = bsMIVarValue /*[VT_BSTR:0]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetMacroIVariableString(long dwDevice/*[in]*/, long node/*[in]*/, 
                                             long num/*[in]*/, BSTR bsDefault/*[in]*/, 
                                             BSTR* pbsVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMacroIVariableString"), DISPID(193));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = node /*[VT_I4:0]*/;
  _args[3] = num /*[VT_I4:0]*/;
  _args[4] = bsDefault /*[VT_BSTR:0]*/;
  _args[5] = pbsVal /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetCommandLogging(long dwDevice/*[in]*/, VARIANT_BOOL* pbON/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCommandLogging"), DISPID(194));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pbON /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::SetCommandLogging(long dwDevice/*[in]*/, VARIANT_BOOL bOn/*[in]*/, 
                                       BSTR bsFilePath/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetCommandLogging"), DISPID(195));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = bOn /*[VT_BOOL:0]*/;
  _args[3] = bsFilePath /*[VT_BSTR:0]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetEnumeration(long dwDevice/*[in]*/, long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetEnumeration"), DISPID(196));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetControlValues(long dwDevice/*[in]*/, short ctrlCh/*[in]*/, 
                                      VARIANT* pVariant/*[in,out]*/, 
                                      VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetControlValues"), DISPID(197));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = ctrlCh /*[VT_I2:0]*/;
  _args[3] = pVariant /*[VT_VARIANT:1]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::MultiDownload(long dwDevice/*[in]*/, BSTR outFile/*[in]*/, BSTR iniFile/*[in]*/
                                   , BSTR userID/*[in]*/, VARIANT_BOOL bMacro/*[in]*/, 
                                   VARIANT_BOOL bMap/*[in]*/, VARIANT_BOOL bLog/*[in]*/, 
                                   VARIANT_BOOL bDnld/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("MultiDownload"), DISPID(198));
  TAutoArgs<9> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = outFile /*[VT_BSTR:0]*/;
  _args[3] = iniFile /*[VT_BSTR:0]*/;
  _args[4] = userID /*[VT_BSTR:0]*/;
  _args[5] = bMacro /*[VT_BOOL:0]*/;
  _args[6] = bMap /*[VT_BOOL:0]*/;
  _args[7] = bLog /*[VT_BOOL:0]*/;
  _args[8] = bDnld /*[VT_BOOL:0]*/;
  _args[9] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::AddDownloadFile(long dwDevice/*[in]*/, BSTR iniFile/*[in]*/, 
                                     BSTR userID/*[in]*/, BSTR dlFile/*[in]*/, 
                                     VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddDownloadFile"), DISPID(199));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = iniFile /*[VT_BSTR:0]*/;
  _args[3] = userID /*[VT_BSTR:0]*/;
  _args[4] = dlFile /*[VT_BSTR:0]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::RemoveDownloadFile(long dwDevice/*[in]*/, BSTR iniFile/*[in]*/, 
                                        BSTR userID/*[in]*/, BSTR dlFile/*[in]*/, 
                                        VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("RemoveDownloadFile"), DISPID(200));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = iniFile /*[VT_BSTR:0]*/;
  _args[3] = userID /*[VT_BSTR:0]*/;
  _args[4] = dlFile /*[VT_BSTR:0]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::RenumberFiles(long dwDevice/*[in]*/, long fileNumber/*[in]*/, 
                                   BSTR iniFile/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RenumberFiles"), DISPID(201));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = fileNumber /*[VT_I4:0]*/;
  _args[3] = iniFile /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetVariableStr(long dwDevice/*[in]*/, short ch/*[in]*/, long num/*[in]*/, 
                                    BSTR* pVal/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetVariableStr"), DISPID(202));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = ch /*[VT_I2:0]*/;
  _args[3] = num /*[VT_I4:0]*/;
  _args[4] = pVal /*[VT_BSTR:1]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRVarBufReadAll(long dwDevice/*[in]*/, long h/*[in]*/, 
                                      VARIANT* pVal/*[in,out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRVarBufReadAll"), DISPID(203));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = h /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_VARIANT:1]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::UltraLightAnalyze(long dwDevice/*[in]*/, VARIANT* pVal/*[in,out]*/, 
                                       long* pActiveNodes/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("UltraLightAnalyze"), DISPID(204));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_VARIANT:1]*/;
  _args[3] = pActiveNodes /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetPlcStatusStructure(long dwDevice/*[in]*/, VARIANT* pVal/*[in,out]*/, 
                                           long* pPrograms/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetPlcStatusStructure"), DISPID(205));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_VARIANT:1]*/;
  _args[3] = pPrograms /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetBitValue(BSTR hexStr/*[in]*/, short bit/*[in]*/, VARIANT_BOOL* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetBitValue"), DISPID(206));
  TAutoArgs<3> _args;
  _args[1] = hexStr /*[VT_BSTR:0]*/;
  _args[2] = bit /*[VT_I2:0]*/;
  _args[3] = pVal /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetNumDeviceKeys(long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNumDeviceKeys"), DISPID(207));
  TAutoArgs<1> _args;
  _args[1] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRGetLongDouble(long dwDevice/*[in]*/, long address/*[in]*/, 
                                      double* pVal/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRGetLongDouble"), DISPID(208));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = address /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_R8:1]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRGetFixedDouble(long dwDevice/*[in]*/, long address/*[in]*/, 
                                       double* pVal/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRGetFixedDouble"), DISPID(209));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = address /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_R8:1]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRGetShort(long dwDevice/*[in]*/, long address/*[in]*/, short* pVal/*[out]*/, 
                                 VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRGetShort"), DISPID(210));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = address /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_I2:1]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRSetShort(long dwDevice/*[in]*/, long address/*[in]*/, short newVal/*[in]*/, 
                                 VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRSetShort"), DISPID(211));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = address /*[VT_I4:0]*/;
  _args[3] = newVal /*[VT_I2:0]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRDWordBitSet(long dwDevice/*[in]*/, long offset/*[in]*/, long bit/*[in]*/, 
                                    VARIANT_BOOL* pVal/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRDWordBitSet"), DISPID(212));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = offset /*[VT_I4:0]*/;
  _args[3] = bit /*[VT_I4:0]*/;
  _args[4] = pVal /*[VT_BOOL:1]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRResetDWordBit(long dwDevice/*[in]*/, long offset/*[in]*/, long bit/*[in]*/, 
                                      VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRResetDWordBit"), DISPID(213));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = offset /*[VT_I4:0]*/;
  _args[3] = bit /*[VT_I4:0]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRSetDWordBit(long dwDevice/*[in]*/, long offset/*[in]*/, long bit/*[in]*/, 
                                    VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRSetDWordBit"), DISPID(214));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = offset /*[VT_I4:0]*/;
  _args[3] = bit /*[VT_I4:0]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetFirmwareType(long dwDevice/*[in]*/, 
                                     Pcommserverlib_tlb::DEVPMACFIRMWARETYPE* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetFirmwareType"), DISPID(215));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = (int*)pVal /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetResponseEx(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                   VARIANT_BOOL bAddLF/*[in]*/, BSTR* pAnswer/*[out]*/, 
                                   long* pstatus/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetResponseEx"), DISPID(216));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = question /*[VT_BSTR:0]*/;
  _args[3] = bAddLF /*[VT_BOOL:0]*/;
  _args[4] = pAnswer /*[VT_BSTR:1]*/;
  _args[5] = pstatus /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRVarBufWriteEx(long dwDevice/*[in]*/, VARIANT vData/*[in]*/, 
                                      long* pWritten/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRVarBufWriteEx"), DISPID(217));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = vData /*[VT_VARIANT:0]*/;
  _args[3] = pWritten /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRGetDWordMask(long dwDevice/*[in]*/, long offset/*[in]*/, long mask/*[in]*/, 
                                     long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRGetDWordMask"), DISPID(218));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = offset /*[VT_I4:0]*/;
  _args[3] = mask /*[VT_I4:0]*/;
  _args[4] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRSetDWordMask(long dwDevice/*[in]*/, long offset/*[in]*/, long mask/*[in]*/, 
                                     long Val/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRSetDWordMask"), DISPID(219));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = offset /*[VT_I4:0]*/;
  _args[3] = mask /*[VT_I4:0]*/;
  _args[4] = Val /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRRotBufRemove(long dwDevice/*[in]*/, long bufnum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRRotBufRemove"), DISPID(221));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = bufnum /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRRotBufInit(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRRotBufInit"), DISPID(222));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRRotBufClr(long dwDevice/*[in]*/, long bufnum/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRRotBufClr"), DISPID(223));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = bufnum /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRSetRotBuf(long dwDevice/*[in]*/, VARIANT_BOOL on/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRSetRotBuf"), DISPID(224));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = on /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRAsciiStrToRotEx(long dwDevice/*[in]*/, BSTR inpstr/*[in]*/, 
                                        long bufnum/*[in]*/, VARIANT_BOOL bSendRemaining/*[in]*/, 
                                        long* pstatus/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRAsciiStrToRotEx"), DISPID(225));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = inpstr /*[VT_BSTR:0]*/;
  _args[3] = bufnum /*[VT_I4:0]*/;
  _args[4] = bSendRemaining /*[VT_BOOL:0]*/;
  _args[5] = pstatus /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRAsciiStrToRot(long dwDevice/*[in]*/, BSTR inpstr/*[in]*/, 
                                      long bufnum/*[in]*/, long* pstatus/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRAsciiStrToRot"), DISPID(226));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = inpstr /*[VT_BSTR:0]*/;
  _args[3] = bufnum /*[VT_I4:0]*/;
  _args[4] = pstatus /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetProgramMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                    Pcommserverlib_tlb::DEVPROGRAMMODE* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetProgramMode"), DISPID(227));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  _args[3] = (int*)pVal /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetProgramMotionMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                          Pcommserverlib_tlb::DEVMOTIONMODE* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetProgramMotionMode"), DISPID(228));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  _args[3] = (int*)pVal /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::MapDeviceNumToEnum(long location/*[in]*/, long enumeration/*[in]*/, 
                                        long* pDeviceNumber/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("MapDeviceNumToEnum"), DISPID(230));
  TAutoArgs<3> _args;
  _args[1] = location /*[VT_I4:0]*/;
  _args[2] = enumeration /*[VT_I4:0]*/;
  _args[3] = pDeviceNumber /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::MapLocAndEnumFromDeviceNum(long dwDevice/*[in]*/, long* pLocation/*[out]*/, 
                                                long* pEnumeration/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("MapLocAndEnumFromDeviceNum"), DISPID(231));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pLocation /*[VT_I4:1]*/;
  _args[3] = pEnumeration /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetFeedRateAndMode(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                        double* pRate/*[out]*/, VARIANT_BOOL* pMode/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetFeedRateAndMode"), DISPID(232));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  _args[3] = pRate /*[VT_R8:1]*/;
  _args[4] = pMode /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetMotorMotionMode(long dwDevice/*[in]*/, long dwMotor/*[in]*/, 
                                        Pcommserverlib_tlb::DEVMOTION* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMotorMotionMode"), DISPID(233));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = dwMotor /*[VT_I4:0]*/;
  _args[3] = (int*)pVal /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::CommandLog(long dwDevice/*[in]*/, BSTR bStr/*[in]*/, 
                                VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("CommandLog"), DISPID(234));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = bStr /*[VT_BSTR:0]*/;
  _args[3] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRGetMem(long dwDevice/*[in]*/, long offset/*[in]*/, long bytes/*[in]*/, 
                               VARIANT* pVal/*[in,out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRGetMem"), DISPID(235));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = offset /*[VT_I4:0]*/;
  _args[3] = bytes /*[VT_I4:0]*/;
  _args[4] = pVal /*[VT_VARIANT:1]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRSetMem(long dwDevice/*[in]*/, long offset/*[in]*/, long bytes/*[in]*/, 
                               VARIANT Val/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRSetMem"), DISPID(236));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = offset /*[VT_I4:0]*/;
  _args[3] = bytes /*[VT_I4:0]*/;
  _args[4] = Val /*[VT_VARIANT:0]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetResponseProgress(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                         VARIANT_BOOL bAddLF/*[in]*/, BSTR* pAnswer/*[out]*/, 
                                         long* pstatus/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetResponseProgress"), DISPID(237));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = question /*[VT_BSTR:0]*/;
  _args[3] = bAddLF /*[VT_BOOL:0]*/;
  _args[4] = pAnswer /*[VT_BSTR:1]*/;
  _args[5] = pstatus /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::Abort(long dwDevice/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Abort"), DISPID(238));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_InterruptsEnabled(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InterruptsEnabled"), DISPID(239));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_InterruptsEnabled(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_InterruptsEnabled(dwDevice, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::set_InterruptsEnabled(long dwDevice/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InterruptsEnabled"), DISPID(239));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_InterruptMask(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("InterruptMask"), DISPID(240));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacDeviceDispT<T>::get_InterruptMask(long dwDevice/*[in]*/)
{
  long pVal;
  this->get_InterruptMask(dwDevice, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::set_InterruptMask(long dwDevice/*[in]*/, long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("InterruptMask"), DISPID(240));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::PmacSave(long dwDevice/*[in]*/, BSTR question/*[in]*/, long* pstatus/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("PmacSave"), DISPID(241));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = question /*[VT_BSTR:0]*/;
  _args[3] = pstatus /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::PmacReset(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                               VARIANT_BOOL bAsciiRingComm/*[in]*/, long* pstatus/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("PmacReset"), DISPID(242));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = question /*[VT_BSTR:0]*/;
  _args[3] = bAsciiRingComm /*[VT_BOOL:0]*/;
  _args[4] = pstatus /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::PhaseMotor(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                long* pStatuss/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("PhaseMotor"), DISPID(244));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = question /*[VT_BSTR:0]*/;
  _args[3] = pStatuss /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetControlResponseEx(long dwDevice/*[in]*/, short question/*[in]*/, 
                                          BSTR* pAnswer/*[out]*/, long* pstatus/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetControlResponseEx"), DISPID(245));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = question /*[VT_I2:0]*/;
  _args[3] = pAnswer /*[VT_BSTR:1]*/;
  _args[4] = pstatus /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_USMonitoringEnabled(long dwDevice/*[in]*/, 
                                             VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("USMonitoringEnabled"), DISPID(246));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_USMonitoringEnabled(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_USMonitoringEnabled(dwDevice, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::set_USMonitoringEnabled(long dwDevice/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("USMonitoringEnabled"), DISPID(246));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_USMonitoringPeriod(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("USMonitoringPeriod"), DISPID(247));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacDeviceDispT<T>::get_USMonitoringPeriod(long dwDevice/*[in]*/)
{
  long pVal;
  this->get_USMonitoringPeriod(dwDevice, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::set_USMonitoringPeriod(long dwDevice/*[in]*/, long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("USMonitoringPeriod"), DISPID(247));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRTest(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRTest"), DISPID(248));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::AbortTest(long dwDevice/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AbortTest"), DISPID(249));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRGetMotorRpt(long dwDevice/*[in]*/, long motor/*[in]*/, 
                                    /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVFGMOTOR* pStruct)*/ TVariant&  pStruct
                                    , long* pServo/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRGetMotorRpt"), DISPID(250));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = motor /*[VT_I4:0]*/;
  _args[3] = pStruct /*[VT_USERDEFINED:1]*/;
  _args[4] = pServo /*[VT_I4:1]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRGetMotorRptTurbo(long dwDevice/*[in]*/, long motor/*[in]*/, 
                                         /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVFGMOTORTURBO* pStruct)*/ TVariant&  pStruct
                                         , long* pServo/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRGetMotorRptTurbo"), DISPID(251));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = motor /*[VT_I4:0]*/;
  _args[3] = pStruct /*[VT_USERDEFINED:1]*/;
  _args[4] = pServo /*[VT_I4:1]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRGetCoordRpt(long dwDevice/*[in]*/, long coord/*[in]*/, 
                                    /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVBGCOORD* pStruct)*/ TVariant&  pStruct
                                    , long* pServo/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRGetCoordRpt"), DISPID(252));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pStruct /*[VT_USERDEFINED:1]*/;
  _args[4] = pServo /*[VT_I4:1]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRGetCoordRptTurbo(long dwDevice/*[in]*/, long coord/*[in]*/, 
                                         /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVBGCOORDTURBO* pStruct)*/ TVariant&  pStruct
                                         , long* pServo/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRGetCoordRptTurbo"), DISPID(253));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pStruct /*[VT_USERDEFINED:1]*/;
  _args[4] = pServo /*[VT_I4:1]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_DPRMotorRptEnabled(long dwDevice/*[in]*/, 
                                            VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRMotorRptEnabled"), DISPID(254));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_DPRMotorRptEnabled(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_DPRMotorRptEnabled(dwDevice, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::set_DPRMotorRptEnabled(long dwDevice/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRMotorRptEnabled"), DISPID(254));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_DPRMotorRptMask(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRMotorRptMask"), DISPID(255));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacDeviceDispT<T>::get_DPRMotorRptMask(long dwDevice/*[in]*/)
{
  long pVal;
  this->get_DPRMotorRptMask(dwDevice, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::set_DPRMotorRptMask(long dwDevice/*[in]*/, long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRMotorRptMask"), DISPID(255));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_DPRMotorRptMSec(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRMotorRptMSec"), DISPID(256));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacDeviceDispT<T>::get_DPRMotorRptMSec(long dwDevice/*[in]*/)
{
  long pVal;
  this->get_DPRMotorRptMSec(dwDevice, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::set_DPRMotorRptMSec(long dwDevice/*[in]*/, long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRMotorRptMSec"), DISPID(256));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_DPRCoordRptEnabled(long dwDevice/*[in]*/, 
                                            VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRCoordRptEnabled"), DISPID(257));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_DPRCoordRptEnabled(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_DPRCoordRptEnabled(dwDevice, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::set_DPRCoordRptEnabled(long dwDevice/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRCoordRptEnabled"), DISPID(257));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_DPRCoordRptMSec(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRCoordRptMSec"), DISPID(258));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacDeviceDispT<T>::get_DPRCoordRptMSec(long dwDevice/*[in]*/)
{
  long pVal;
  this->get_DPRCoordRptMSec(dwDevice, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::set_DPRCoordRptMSec(long dwDevice/*[in]*/, long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRCoordRptMSec"), DISPID(258));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_DPRCoordRptMax(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRCoordRptMax"), DISPID(259));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacDeviceDispT<T>::get_DPRCoordRptMax(long dwDevice/*[in]*/)
{
  long pVal;
  this->get_DPRCoordRptMax(dwDevice, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::set_DPRCoordRptMax(long dwDevice/*[in]*/, long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRCoordRptMax"), DISPID(259));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::UltraLightAnalyzeStruct(long dwDevice/*[in]*/, 
                                             /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVULTRALIGHT_INFO* pStruct)*/ TVariant&  pStruct
                                             , long* pActiveNodes/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("UltraLightAnalyzeStruct"), DISPID(260));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pStruct /*[VT_USERDEFINED:1]*/;
  _args[3] = pActiveNodes /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetPlcStatusStruct(long dwDevice/*[in]*/, 
                                        /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVTOTAL_PLC_STATUS_STRUCT* pStruct)*/ TVariant&  pStruct
                                        , long* pPrograms/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetPlcStatusStruct"), DISPID(261));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pStruct /*[VT_USERDEFINED:1]*/;
  _args[3] = pPrograms /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_DPRTesting(long dwDevice/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("get_DPRTesting"), DISPID(262));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OleFunction(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_DPRTesting(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_DPRTesting(dwDevice, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::RawGetResponseEx(long dwDevice/*[in]*/, BSTR question/*[in]*/, 
                                      VARIANT_BOOL bAddLF/*[in]*/, BSTR* pAnswer/*[out]*/, 
                                      long* pstatus/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("RawGetResponseEx"), DISPID(263));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = question /*[VT_BSTR:0]*/;
  _args[3] = bAddLF /*[VT_BOOL:0]*/;
  _args[4] = pAnswer /*[VT_BSTR:1]*/;
  _args[5] = pstatus /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::RawGetControlResponseEx(long dwDevice/*[in]*/, short question/*[in]*/, 
                                             BSTR* pAnswer/*[out]*/, long* pstatus/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("RawGetControlResponseEx"), DISPID(264));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = question /*[VT_I2:0]*/;
  _args[3] = pAnswer /*[VT_BSTR:1]*/;
  _args[4] = pstatus /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::ModBusCommand(long dwDevice/*[in]*/, unsigned_char command/*[in]*/, 
                                   VARIANT* counters/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModBusCommand"), DISPID(265));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = command /*[VT_UI1:0]*/;
  _args[3] = counters /*[VT_VARIANT:1]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::ModbusAvailable(long dwDevice/*[in]*/, unsigned_char command/*[in]*/, 
                                     VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModbusAvailable"), DISPID(266));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = command /*[VT_UI1:0]*/;
  _args[3] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRSetupBuffers(unsigned_long dwDevice/*[in]*/, 
                                     VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRSetupBuffers"), DISPID(267));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_UI4:0]*/;
  _args[2] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DPRBackground(long dwDevice/*[in]*/, long on/*[in]*/, long period/*[in]*/, 
                                   long coord/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DPRBackground"), DISPID(268));
  TAutoArgs<5> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = on /*[VT_I4:0]*/;
  _args[3] = period /*[VT_I4:0]*/;
  _args[4] = coord /*[VT_I4:0]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_DataCollectionEnabled(long dwDevice/*[in]*/, 
                                               VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataCollectionEnabled"), DISPID(269));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacDeviceDispT<T>::get_DataCollectionEnabled(long dwDevice/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_DataCollectionEnabled(dwDevice, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::get_DataCollectionResolution(long dwDevice/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataCollectionResolution"), DISPID(270));
  TAutoArgs<1> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacDeviceDispT<T>::get_DataCollectionResolution(long dwDevice/*[in]*/)
{
  long pVal;
  this->get_DataCollectionResolution(dwDevice, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetTurboMotorStatusEx(long dwDevice/*[in]*/, long lMotor/*[in]*/, 
                                           /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVMSTURBO* pstatus)*/ TVariant&  pstatus
                                           , VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetTurboMotorStatusEx"), DISPID(271));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = lMotor /*[VT_I4:0]*/;
  _args[3] = pstatus /*[VT_USERDEFINED:1]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetNTMotorStatusEx(long dwDevice/*[in]*/, long lMotor/*[in]*/, 
                                        /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVMSNONTURBO* pstatus)*/ TVariant&  pstatus
                                        , VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNTMotorStatusEx"), DISPID(272));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = lMotor /*[VT_I4:0]*/;
  _args[3] = pstatus /*[VT_USERDEFINED:1]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetTurboGlobalStatusEx(long dwDevice/*[in]*/, 
                                            /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVGSTURBO* pstatus)*/ TVariant&  pstatus
                                            , VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetTurboGlobalStatusEx"), DISPID(274));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pstatus /*[VT_USERDEFINED:1]*/;
  _args[3] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetNTGlobalStatusEx(long dwDevice/*[in]*/, 
                                         /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVGSNONTURBO* pstatus)*/ TVariant&  pstatus
                                         , VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNTGlobalStatusEx"), DISPID(273));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pstatus /*[VT_USERDEFINED:1]*/;
  _args[3] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetTurboCoordinateStatusEx(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                                /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVCSTURBO* pstatus)*/ TVariant&  pstatus
                                                , VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetTurboCoordinateStatusEx"), DISPID(275));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  _args[3] = pstatus /*[VT_USERDEFINED:1]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::GetNTCoordinateStatusEx(long dwDevice/*[in]*/, long dwCoord/*[in]*/, 
                                             /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVCSNONTURBO* pstatus)*/ TVariant&  pstatus
                                             , VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNTCoordinateStatusEx"), DISPID(276));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  _args[3] = pstatus /*[VT_USERDEFINED:1]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::DataGather(long dwDevice/*[in]*/, LPSAFEARRAY* pvArray/*[in,out]*/, 
                                VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataGather"), DISPID(277));
  TAutoArgs<3> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pvArray /*[VT_SAFEARRAY:1]*/;
  _args[3] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::Upload(long dwDevice/*[in]*/, 
                            /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::DEVUPLOAD pUpload)*/ TVariant&  pUpload
                            , BSTR* pData/*[out]*/, long* pstatus/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("Upload"), DISPID(278));
  TAutoArgs<4> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pUpload /*[VT_USERDEFINED:0]*/;
  _args[3] = pData /*[VT_BSTR:1]*/;
  _args[4] = pstatus /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacDeviceDispT<T>::ModbusActive(long dwDevice/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("ModbusActive"), DISPID(279));
  TAutoArgs<2> _args;
  _args[1] = dwDevice /*[VT_I4:0]*/;
  _args[2] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  _IPmacDeviceEvents
// Flags:     (4096) Dispatchable
// GUID:      {D1C5C7C8-5E0C-495E-9AAF-85B146DA5F13}
// *********************************************************************//
template <class T> HRESULT __fastcall
_IPmacDeviceEventsDispT<T>::Message(long Device, BSTR Msg, VARIANT_BOOL bNewLine)
{
  _TDispID _dispid(/* Message */ DISPID(1));
  TAutoArgs<3> _args;
  _args[1] = Device /*[VT_I4:0]*/;
  _args[2] = Msg /*[VT_BSTR:0]*/;
  _args[3] = bNewLine /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_IPmacDeviceEventsDispT<T>::Progress(long Device, long dwPercent)
{
  _TDispID _dispid(/* Progress */ DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = Device /*[VT_I4:0]*/;
  _args[2] = dwPercent /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_IPmacDeviceEventsDispT<T>::Error(long Device, BSTR FileName, long ErrorID, long LineNum, BSTR Line)
{
  _TDispID _dispid(/* Error */ DISPID(3));
  TAutoArgs<5> _args;
  _args[1] = Device /*[VT_I4:0]*/;
  _args[2] = FileName /*[VT_BSTR:0]*/;
  _args[3] = ErrorID /*[VT_I4:0]*/;
  _args[4] = LineNum /*[VT_I4:0]*/;
  _args[5] = Line /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_IPmacDeviceEventsDispT<T>::Interrupt(long Device, long lLevel)
{
  _TDispID _dispid(/* Interrupt */ DISPID(4));
  TAutoArgs<2> _args;
  _args[1] = Device /*[VT_I4:0]*/;
  _args[2] = lLevel /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_IPmacDeviceEventsDispT<T>::Unsolicited(long Device, BSTR Msg)
{
  _TDispID _dispid(/* Unsolicited */ DISPID(5));
  TAutoArgs<2> _args;
  _args[1] = Device /*[VT_I4:0]*/;
  _args[2] = Msg /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_IPmacDeviceEventsDispT<T>::DataReady(long Device)
{
  _TDispID _dispid(/* DataReady */ DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Device /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// SmartIntf: TCOMIPmacNC
// Interface: IPmacNC
// *********************************************************************//
template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::Open(long Device/*[in]*/, long Control/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->Open(Device, Control, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::Close(long Control/*[in]*/)
{
  return (*this)->Close(Control);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::OpenFile(long Control/*[in]*/, long dwCoord/*[in]*/, BSTR szFilePath/*[in]*/, 
                          VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->OpenFile(Control, dwCoord, szFilePath, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::CloseFile(long Control/*[in]*/, long dwCoord/*[in]*/, 
                           VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->CloseFile(Control, dwCoord, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_Title(long Control/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  return (*this)->get_Title(Control, pVal);
}

template <class T> BSTR __fastcall
TCOMIPmacNCT<T>::get_Title(long Control/*[in]*/)
{
  BSTR pVal = 0;
  OLECHECK(this->get_Title(, (BSTR*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_Title(long Control/*[in]*/, BSTR pVal/*[in]*/)
{
  return (*this)->set_Title(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_DeviceNumber(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_DeviceNumber(Control, pVal);
}

template <class T> long __fastcall
TCOMIPmacNCT<T>::get_DeviceNumber(long Control/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_DeviceNumber(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_IsOpen(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsOpen(Control, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacNCT<T>::get_IsOpen(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsOpen(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::SetMachineMode(long Control/*[in]*/, Pcommserverlib_tlb::NCMODE mode/*[in]*/)
{
  return (*this)->SetMachineMode(Control, mode);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetMachineMode(long Control/*[in]*/, Pcommserverlib_tlb::NCMODE* pMode/*[out]*/)
{
  return (*this)->GetMachineMode(Control, pMode);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_mode(long Control/*[in]*/, Pcommserverlib_tlb::NCMODE* pVal/*[out,retval]*/)
{
  return (*this)->get_mode(Control, pVal);
}

template <class T> Pcommserverlib_tlb::NCMODE __fastcall
TCOMIPmacNCT<T>::get_mode(long Control/*[in]*/)
{
  Pcommserverlib_tlb::NCMODE pVal;
  OLECHECK(this->get_mode(, (Pcommserverlib_tlb::NCMODE*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_mode(long Control/*[in]*/, Pcommserverlib_tlb::NCMODE pVal/*[in]*/)
{
  return (*this)->set_mode(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetRegistryBool(long Control/*[in]*/, BSTR section/*[in]*/, BSTR name/*[in]*/, 
                                 VARIANT_BOOL def/*[in]*/, VARIANT_BOOL* pVal/*[out]*/, 
                                 VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetRegistryBool(Control, section, name, def, pVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::SetRegistryBool(long Control/*[in]*/, BSTR section/*[in]*/, BSTR name/*[in]*/, 
                                 VARIANT_BOOL bVal/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->SetRegistryBool(Control, section, name, bVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetRegistryLong(long Control/*[in]*/, BSTR section/*[in]*/, BSTR name/*[in]*/, 
                                 long def/*[in]*/, long* pVal/*[out]*/, 
                                 VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetRegistryLong(Control, section, name, def, pVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::SetRegistryLong(long Control/*[in]*/, BSTR section/*[in]*/, BSTR name/*[in]*/, 
                                 long lVal/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->SetRegistryLong(Control, section, name, lVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetRegistryString(long Control/*[in]*/, BSTR section/*[in]*/, BSTR name/*[in]*/, 
                                   BSTR def/*[in]*/, BSTR* pVal/*[in,out]*/, 
                                   VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetRegistryString(Control, section, name, def, pVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::SetRegistryString(long Control/*[in]*/, BSTR section/*[in]*/, BSTR name/*[in]*/, 
                                   BSTR Val/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->SetRegistryString(Control, section, name, Val, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetRegistryDouble(long Control/*[in]*/, BSTR section/*[in]*/, BSTR name/*[in]*/, 
                                   double def/*[in]*/, double* pVal/*[out]*/, 
                                   VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetRegistryDouble(Control, section, name, def, pVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::SetRegistryDouble(long Control/*[in]*/, BSTR section/*[in]*/, BSTR name/*[in]*/, 
                                   double Val/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->SetRegistryDouble(Control, section, name, Val, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_CoordSystem(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_CoordSystem(Control, pVal);
}

template <class T> long __fastcall
TCOMIPmacNCT<T>::get_CoordSystem(long Control/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_CoordSystem(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_CoordSystem(long Control/*[in]*/, long pVal/*[in]*/)
{
  return (*this)->set_CoordSystem(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_NumCoordSystems(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_NumCoordSystems(Control, pVal);
}

template <class T> long __fastcall
TCOMIPmacNCT<T>::get_NumCoordSystems(long Control/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_NumCoordSystems(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_SingleBlock(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_SingleBlock(Control, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacNCT<T>::get_SingleBlock(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_SingleBlock(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_SingleBlock(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_SingleBlock(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_BlockDelete(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_BlockDelete(Control, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacNCT<T>::get_BlockDelete(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_BlockDelete(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_BlockDelete(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_BlockDelete(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_OptionalStop(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_OptionalStop(Control, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacNCT<T>::get_OptionalStop(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_OptionalStop(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_OptionalStop(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_OptionalStop(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_MachineLock(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_MachineLock(Control, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacNCT<T>::get_MachineLock(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_MachineLock(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_MachineLock(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_MachineLock(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_DryRun(long Control/*[in]*/, long coord/*[in]*/, 
                            VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_DryRun(Control, coord, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacNCT<T>::get_DryRun(long Control/*[in]*/, long coord/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_DryRun(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_DryRun(long Control/*[in]*/, long coord/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_DryRun(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_MachineType(long Control/*[in]*/, 
                                 Pcommserverlib_tlb::NCMACHINETYPE* pVal/*[out,retval]*/)
{
  return (*this)->get_MachineType(Control, pVal);
}

template <class T> Pcommserverlib_tlb::NCMACHINETYPE __fastcall
TCOMIPmacNCT<T>::get_MachineType(long Control/*[in]*/)
{
  Pcommserverlib_tlb::NCMACHINETYPE pVal;
  OLECHECK(this->get_MachineType(, (Pcommserverlib_tlb::NCMACHINETYPE*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_JogSelect(long Control/*[in]*/, 
                               Pcommserverlib_tlb::NCJOGSELECT* pVal/*[out,retval]*/)
{
  return (*this)->get_JogSelect(Control, pVal);
}

template <class T> Pcommserverlib_tlb::NCJOGSELECT __fastcall
TCOMIPmacNCT<T>::get_JogSelect(long Control/*[in]*/)
{
  Pcommserverlib_tlb::NCJOGSELECT pVal;
  OLECHECK(this->get_JogSelect(, (Pcommserverlib_tlb::NCJOGSELECT*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_JogSelect(long Control/*[in]*/, Pcommserverlib_tlb::NCJOGSELECT pVal/*[in]*/)
{
  return (*this)->set_JogSelect(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_SpeedSelect(long Control/*[in]*/, 
                                 Pcommserverlib_tlb::NCSPEEDSELECT* pVal/*[out,retval]*/)
{
  return (*this)->get_SpeedSelect(Control, pVal);
}

template <class T> Pcommserverlib_tlb::NCSPEEDSELECT __fastcall
TCOMIPmacNCT<T>::get_SpeedSelect(long Control/*[in]*/)
{
  Pcommserverlib_tlb::NCSPEEDSELECT pVal;
  OLECHECK(this->get_SpeedSelect(, (Pcommserverlib_tlb::NCSPEEDSELECT*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_SpeedSelect(long Control/*[in]*/, 
                                 Pcommserverlib_tlb::NCSPEEDSELECT pVal/*[in]*/)
{
  return (*this)->set_SpeedSelect(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_ProgramLoaded(long Control/*[in]*/, long coord/*[in]*/, 
                                   VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_ProgramLoaded(Control, coord, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacNCT<T>::get_ProgramLoaded(long Control/*[in]*/, long coord/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_ProgramLoaded(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetAxisEnabled(long Control/*[in]*/, long coord/*[in]*/, short axis/*[in]*/, 
                                VARIANT_BOOL* pVal/*[out]*/)
{
  return (*this)->GetAxisEnabled(Control, coord, axis, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetProgramName(long Control/*[in]*/, long coord/*[in]*/, VARIANT_BOOL bMain/*[in]*/, 
                                BSTR* pVal/*[in,out]*/)
{
  return (*this)->GetProgramName(Control, coord, bMain, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetProgramPath(long Control/*[in]*/, long coord/*[in]*/, VARIANT_BOOL bMain/*[in]*/, 
                                BSTR* pVal/*[in,out]*/)
{
  return (*this)->GetProgramPath(Control, coord, bMain, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_Semaphore(long Control/*[in]*/, long coord/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_Semaphore(Control, coord, pVal);
}

template <class T> long __fastcall
TCOMIPmacNCT<T>::get_Semaphore(long Control/*[in]*/, long coord/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_Semaphore(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_Semaphore(long Control/*[in]*/, long coord/*[in]*/, long pVal/*[in]*/)
{
  return (*this)->set_Semaphore(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetProgramStatus(long Control/*[in]*/, long coord/*[in]*/, long* pProgID/*[out]*/, 
                                  long* pNumLines/*[out]*/, long* pLine/*[out]*/, 
                                  long* pParseLine/*[out]*/, long* pRepeat/*[out]*/, 
                                  long* pCount/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetProgramStatus(Control, coord, pProgID, pNumLines, pLine, pParseLine, pRepeat, 
                                   pCount, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetProgramNumber(long Control/*[in]*/, long coord/*[in]*/, long* pVal/*[out]*/)
{
  return (*this)->GetProgramNumber(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetCurrentLabel(long Control/*[in]*/, long coord/*[in]*/, long* pVal/*[out]*/)
{
  return (*this)->GetCurrentLabel(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_DistanceSelect(long Control/*[in]*/, 
                                    Pcommserverlib_tlb::NCSPEEDSELECT* pVal/*[out,retval]*/)
{
  return (*this)->get_DistanceSelect(Control, pVal);
}

template <class T> Pcommserverlib_tlb::NCSPEEDSELECT __fastcall
TCOMIPmacNCT<T>::get_DistanceSelect(long Control/*[in]*/)
{
  Pcommserverlib_tlb::NCSPEEDSELECT pVal;
  OLECHECK(this->get_DistanceSelect(, (Pcommserverlib_tlb::NCSPEEDSELECT*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_DistanceSelect(long Control/*[in]*/, 
                                    Pcommserverlib_tlb::NCSPEEDSELECT pVal/*[in]*/)
{
  return (*this)->set_DistanceSelect(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetJogStep(long Control/*[in]*/, long coord/*[in]*/, double* pVal/*[out]*/)
{
  return (*this)->GetJogStep(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetHandleStep(long Control/*[in]*/, long coord/*[in]*/, double* pVal/*[out]*/)
{
  return (*this)->GetHandleStep(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::SetOrigin(long Control/*[in]*/, long coord/*[in]*/, VARIANT_BOOL bOrginAll/*[in]*/, 
                           Pcommserverlib_tlb::NCADDRESS adr/*[in]*/, VARIANT_BOOL bClear/*[in]*/, 
                           double Val/*[in]*/, VARIANT_BOOL metric/*[in]*/)
{
  return (*this)->SetOrigin(Control, coord, bOrginAll, adr, bClear, Val, metric);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::ZeroShift(long Control/*[in]*/, long coord/*[in]*/, VARIANT_BOOL bShiftAll/*[in]*/, 
                           Pcommserverlib_tlb::NCADDRESS adr/*[in]*/, VARIANT_BOOL bClear/*[in]*/, 
                           double Val/*[in]*/, VARIANT_BOOL bMetric/*[in]*/)
{
  return (*this)->ZeroShift(Control, coord, bShiftAll, adr, bClear, Val, bMetric);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetVectorVelocity(long Control/*[in]*/, long coord/*[in]*/, double* pVal/*[out]*/)
{
  return (*this)->GetVectorVelocity(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::ReadMdiBuffer(long Control/*[in]*/, long coord/*[in]*/, long* hDlg/*[in]*/, 
                               long idControl/*[in]*/)
{
  return (*this)->ReadMdiBuffer(Control, coord, hDlg, idControl);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::LoadMdiBuffer(long Control/*[in]*/, long coord/*[in]*/, long* hDlg/*[in]*/, 
                               long idControl/*[in]*/, long nRepeat/*[in]*/)
{
  return (*this)->LoadMdiBuffer(Control, coord, hDlg, idControl, nRepeat);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::ClearTextBuffer(long Control/*[in]*/, long coord/*[in]*/)
{
  return (*this)->ClearTextBuffer(Control, coord);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetCurrentGValue(long Control/*[in]*/, long coord/*[in]*/, long group/*[in]*/, 
                                  long* pVal/*[out]*/)
{
  return (*this)->GetCurrentGValue(Control, coord, group, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_AxisSelect(long Control/*[in]*/, long coord/*[in]*/, 
                                Pcommserverlib_tlb::NCAXISSELECT* pVal/*[out,retval]*/)
{
  return (*this)->get_AxisSelect(Control, coord, pVal);
}

template <class T> Pcommserverlib_tlb::NCAXISSELECT __fastcall
TCOMIPmacNCT<T>::get_AxisSelect(long Control/*[in]*/, long coord/*[in]*/)
{
  Pcommserverlib_tlb::NCAXISSELECT pVal;
  OLECHECK(this->get_AxisSelect(, (Pcommserverlib_tlb::NCAXISSELECT*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_AxisSelect(long Control/*[in]*/, long coord/*[in]*/, 
                                Pcommserverlib_tlb::NCAXISSELECT pVal/*[in]*/)
{
  return (*this)->set_AxisSelect(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetInposition(long Control/*[in]*/, long coord/*[in]*/, VARIANT_BOOL* pVal/*[out]*/)
{
  return (*this)->GetInposition(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_BufferMode(long Control/*[in]*/, long coord/*[in]*/, 
                                Pcommserverlib_tlb::NCBUFFERMODE* pVal/*[out,retval]*/)
{
  return (*this)->get_BufferMode(Control, coord, pVal);
}

template <class T> Pcommserverlib_tlb::NCBUFFERMODE __fastcall
TCOMIPmacNCT<T>::get_BufferMode(long Control/*[in]*/, long coord/*[in]*/)
{
  Pcommserverlib_tlb::NCBUFFERMODE pVal;
  OLECHECK(this->get_BufferMode(, (Pcommserverlib_tlb::NCBUFFERMODE*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_BufferMode(long Control/*[in]*/, long coord/*[in]*/, 
                                Pcommserverlib_tlb::NCBUFFERMODE pVal/*[in]*/)
{
  return (*this)->set_BufferMode(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetProgramMode(long Control/*[in]*/, long coord/*[in]*/, 
                                Pcommserverlib_tlb::DEVPROGRAMMODE* pVal/*[out]*/)
{
  return (*this)->GetProgramMode(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetSelectedBufferMode(long Control/*[in]*/, 
                                       Pcommserverlib_tlb::NCBUFFERMODE* pVal/*[out]*/)
{
  return (*this)->GetSelectedBufferMode(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetSelectedAxisMotionMode(long Control/*[in]*/, 
                                           Pcommserverlib_tlb::DEVMOTIONMODE* pVal/*[out]*/)
{
  return (*this)->GetSelectedAxisMotionMode(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetProgramMotionMode(long Control/*[in]*/, long coord/*[in]*/, 
                                      Pcommserverlib_tlb::DEVMOTIONMODE* pVal/*[out]*/)
{
  return (*this)->GetProgramMotionMode(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetBufferOpen(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out]*/)
{
  return (*this)->GetBufferOpen(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetBufferRemaining(long Control/*[in]*/, long coord/*[in]*/, long* pRemain/*[out]*/, 
                                    long* pParsed/*[out]*/)
{
  return (*this)->GetBufferRemaining(Control, coord, pRemain, pParsed);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_SpindleSelect(long Control/*[in]*/, 
                                   Pcommserverlib_tlb::NCSPINDLESELECT* pVal/*[out,retval]*/)
{
  return (*this)->get_SpindleSelect(Control, pVal);
}

template <class T> Pcommserverlib_tlb::NCSPINDLESELECT __fastcall
TCOMIPmacNCT<T>::get_SpindleSelect(long Control/*[in]*/)
{
  Pcommserverlib_tlb::NCSPINDLESELECT pVal;
  OLECHECK(this->get_SpindleSelect(, (Pcommserverlib_tlb::NCSPINDLESELECT*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_SpindleSelect(long Control/*[in]*/, 
                                   Pcommserverlib_tlb::NCSPINDLESELECT pVal/*[in]*/)
{
  return (*this)->set_SpindleSelect(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_SpindleRPM(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_SpindleRPM(Control, pVal);
}

template <class T> long __fastcall
TCOMIPmacNCT<T>::get_SpindleRPM(long Control/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_SpindleRPM(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_SpindleRPM(long Control/*[in]*/, long pVal/*[in]*/)
{
  return (*this)->set_SpindleRPM(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_SpindleCSS(long Control/*[in]*/, double* pVal/*[out,retval]*/)
{
  return (*this)->get_SpindleCSS(Control, pVal);
}

template <class T> double __fastcall
TCOMIPmacNCT<T>::get_SpindleCSS(long Control/*[in]*/)
{
  double pVal;
  OLECHECK(this->get_SpindleCSS(, (double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_SpindleCSS(long Control/*[in]*/, double pVal/*[in]*/)
{
  return (*this)->set_SpindleCSS(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_SpindleCSSMode(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_SpindleCSSMode(Control, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacNCT<T>::get_SpindleCSSMode(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_SpindleCSSMode(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_SpindleCSSMode(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_SpindleCSSMode(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_SpindleCSSUnits(long Control/*[in]*/, double* pVal/*[out,retval]*/)
{
  return (*this)->get_SpindleCSSUnits(Control, pVal);
}

template <class T> double __fastcall
TCOMIPmacNCT<T>::get_SpindleCSSUnits(long Control/*[in]*/)
{
  double pVal;
  OLECHECK(this->get_SpindleCSSUnits(, (double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_SpindleCSSUnits(long Control/*[in]*/, double pVal/*[in]*/)
{
  return (*this)->set_SpindleCSSUnits(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetSpindleActRPM(long Control/*[in]*/, long* pVal/*[out]*/)
{
  return (*this)->GetSpindleActRPM(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_SpindleMaxRPM(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_SpindleMaxRPM(Control, pVal);
}

template <class T> long __fastcall
TCOMIPmacNCT<T>::get_SpindleMaxRPM(long Control/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_SpindleMaxRPM(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_SpindleMaxRPM(long Control/*[in]*/, long pVal/*[in]*/)
{
  return (*this)->set_SpindleMaxRPM(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_SpindleOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                     long* pVal/*[out,retval]*/)
{
  return (*this)->get_SpindleOverride(Control, coord, pVal);
}

template <class T> long __fastcall
TCOMIPmacNCT<T>::get_SpindleOverride(long Control/*[in]*/, long coord/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_SpindleOverride(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_SpindleOverride(long Control/*[in]*/, long coord/*[in]*/, long pVal/*[in]*/)
{
  return (*this)->set_SpindleOverride(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_FeedrateOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                      double* pVal/*[out,retval]*/)
{
  return (*this)->get_FeedrateOverride(Control, coord, pVal);
}

template <class T> double __fastcall
TCOMIPmacNCT<T>::get_FeedrateOverride(long Control/*[in]*/, long coord/*[in]*/)
{
  double pVal;
  OLECHECK(this->get_FeedrateOverride(, (double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_FeedrateOverride(long Control/*[in]*/, long coord/*[in]*/, double pVal/*[in]*/)
{
  return (*this)->set_FeedrateOverride(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_RapidOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                   double* pVal/*[out,retval]*/)
{
  return (*this)->get_RapidOverride(Control, coord, pVal);
}

template <class T> double __fastcall
TCOMIPmacNCT<T>::get_RapidOverride(long Control/*[in]*/, long coord/*[in]*/)
{
  double pVal;
  OLECHECK(this->get_RapidOverride(, (double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_RapidOverride(long Control/*[in]*/, long coord/*[in]*/, double pVal/*[in]*/)
{
  return (*this)->set_RapidOverride(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_CoolantSelect(long Control/*[in]*/, 
                                   Pcommserverlib_tlb::NCCLNTSELECT* pVal/*[out,retval]*/)
{
  return (*this)->get_CoolantSelect(Control, pVal);
}

template <class T> Pcommserverlib_tlb::NCCLNTSELECT __fastcall
TCOMIPmacNCT<T>::get_CoolantSelect(long Control/*[in]*/)
{
  Pcommserverlib_tlb::NCCLNTSELECT pVal;
  OLECHECK(this->get_CoolantSelect(, (Pcommserverlib_tlb::NCCLNTSELECT*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_CoolantSelect(long Control/*[in]*/, 
                                   Pcommserverlib_tlb::NCCLNTSELECT pVal/*[in]*/)
{
  return (*this)->set_CoolantSelect(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_TimebaseMode(long Control/*[in]*/, long coord/*[in]*/, 
                                  Pcommserverlib_tlb::NCTIMEBASEMODE* pVal/*[out,retval]*/)
{
  return (*this)->get_TimebaseMode(Control, coord, pVal);
}

template <class T> Pcommserverlib_tlb::NCTIMEBASEMODE __fastcall
TCOMIPmacNCT<T>::get_TimebaseMode(long Control/*[in]*/, long coord/*[in]*/)
{
  Pcommserverlib_tlb::NCTIMEBASEMODE pVal;
  OLECHECK(this->get_TimebaseMode(, (Pcommserverlib_tlb::NCTIMEBASEMODE*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_TimebaseMode(long Control/*[in]*/, long coord/*[in]*/, 
                                  Pcommserverlib_tlb::NCTIMEBASEMODE pVal/*[in]*/)
{
  return (*this)->set_TimebaseMode(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetFeedrate(long Control/*[in]*/, long coord/*[in]*/, 
                             Pcommserverlib_tlb::NCFEEDRATEMODE* pMode/*[out]*/, 
                             double* pVal/*[out]*/)
{
  return (*this)->GetFeedrate(Control, coord, pMode, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::SetFeedrate(long Control/*[in]*/, long coord/*[in]*/, 
                             Pcommserverlib_tlb::NCFEEDRATEMODE mode/*[in]*/, double newVal/*[in]*/)
{
  return (*this)->SetFeedrate(Control, coord, mode, newVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_ThreadLead(long Control/*[in]*/, long coord/*[in]*/, 
                                double* pVal/*[out,retval]*/)
{
  return (*this)->get_ThreadLead(Control, coord, pVal);
}

template <class T> double __fastcall
TCOMIPmacNCT<T>::get_ThreadLead(long Control/*[in]*/, long coord/*[in]*/)
{
  double pVal;
  OLECHECK(this->get_ThreadLead(, (double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_ThreadLead(long Control/*[in]*/, long coord/*[in]*/, double pVal/*[in]*/)
{
  return (*this)->set_ThreadLead(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetNumOfTools(long Control/*[in]*/, long coord/*[in]*/, long* pVal/*[out]*/)
{
  return (*this)->GetNumOfTools(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_CurrentToolNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                       long* pVal/*[out,retval]*/)
{
  return (*this)->get_CurrentToolNumber(Control, coord, pVal);
}

template <class T> long __fastcall
TCOMIPmacNCT<T>::get_CurrentToolNumber(long Control/*[in]*/, long coord/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_CurrentToolNumber(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_CurrentToolNumber(long Control/*[in]*/, long coord/*[in]*/, long pVal/*[in]*/)
{
  return (*this)->set_CurrentToolNumber(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_NextToolNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                    long* pVal/*[out,retval]*/)
{
  return (*this)->get_NextToolNumber(Control, coord, pVal);
}

template <class T> long __fastcall
TCOMIPmacNCT<T>::get_NextToolNumber(long Control/*[in]*/, long coord/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_NextToolNumber(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_NextToolNumber(long Control/*[in]*/, long coord/*[in]*/, long pVal/*[in]*/)
{
  return (*this)->set_NextToolNumber(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_CurrentToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                             long* pVal/*[out,retval]*/)
{
  return (*this)->get_CurrentToolHolderNumber(Control, coord, pVal);
}

template <class T> long __fastcall
TCOMIPmacNCT<T>::get_CurrentToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_CurrentToolHolderNumber(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_CurrentToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                             long pVal/*[in]*/)
{
  return (*this)->set_CurrentToolHolderNumber(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::SetToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                                     long holder/*[in]*/)
{
  return (*this)->SetToolHolderNumber(Control, coord, tool, holder);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                                     long* pVal/*[out]*/)
{
  return (*this)->GetToolHolderNumber(Control, coord, tool, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::ZeroAllToolOffsets(long Control/*[in]*/, long coord/*[in]*/)
{
  return (*this)->ZeroAllToolOffsets(Control, coord);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetTypeToolOffset(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                                   BSTR chAxis/*[in]*/, 
                                   Pcommserverlib_tlb::NCTOOLOFSTYPE type/*[in]*/, 
                                   VARIANT_BOOL bMetric/*[in]*/, double* pVal/*[out]*/)
{
  return (*this)->GetTypeToolOffset(Control, coord, tool, chAxis, type, bMetric, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::SetTypeToolOffset(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                                   BSTR chAxis/*[in]*/, 
                                   Pcommserverlib_tlb::NCTOOLOFSTYPE type/*[in]*/, 
                                   VARIANT_BOOL bMetric/*[in]*/, VARIANT_BOOL bConfirm/*[in]*/, 
                                   double newVal/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->SetTypeToolOffset(Control, coord, tool, chAxis, type, bMetric, bConfirm, newVal, 
                                    pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_ToolInSpindle(long Control/*[in]*/, long coord/*[in]*/, 
                                   long* pVal/*[out,retval]*/)
{
  return (*this)->get_ToolInSpindle(Control, coord, pVal);
}

template <class T> long __fastcall
TCOMIPmacNCT<T>::get_ToolInSpindle(long Control/*[in]*/, long coord/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_ToolInSpindle(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_ToolInSpindle(long Control/*[in]*/, long coord/*[in]*/, long pVal/*[in]*/)
{
  return (*this)->set_ToolInSpindle(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_ToolDirection(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                                   Pcommserverlib_tlb::NCTOOLDIRECTION* pVal/*[out,retval]*/)
{
  return (*this)->get_ToolDirection(Control, coord, tool, pVal);
}

template <class T> Pcommserverlib_tlb::NCTOOLDIRECTION __fastcall
TCOMIPmacNCT<T>::get_ToolDirection(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/)
{
  Pcommserverlib_tlb::NCTOOLDIRECTION pVal;
  OLECHECK(this->get_ToolDirection(, (Pcommserverlib_tlb::NCTOOLDIRECTION*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_ToolDirection(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                                   Pcommserverlib_tlb::NCTOOLDIRECTION pVal/*[in]*/)
{
  return (*this)->set_ToolDirection(Control, coord, tool, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_SpindleCountsPerRev(long Control/*[in]*/, double* pVal/*[out,retval]*/)
{
  return (*this)->get_SpindleCountsPerRev(Control, pVal);
}

template <class T> double __fastcall
TCOMIPmacNCT<T>::get_SpindleCountsPerRev(long Control/*[in]*/)
{
  double pVal;
  OLECHECK(this->get_SpindleCountsPerRev(, (double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_SpindleCountsPerRev(long Control/*[in]*/, double pVal/*[in]*/)
{
  return (*this)->set_SpindleCountsPerRev(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_SpindleGearRatio(long Control/*[in]*/, double* pVal/*[out,retval]*/)
{
  return (*this)->get_SpindleGearRatio(Control, pVal);
}

template <class T> double __fastcall
TCOMIPmacNCT<T>::get_SpindleGearRatio(long Control/*[in]*/)
{
  double pVal;
  OLECHECK(this->get_SpindleGearRatio(, (double*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_SpindleGearRatio(long Control/*[in]*/, double pVal/*[in]*/)
{
  return (*this)->set_SpindleGearRatio(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_SpindleDetect(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_SpindleDetect(Control, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacNCT<T>::get_SpindleDetect(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_SpindleDetect(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_SpindleDetect(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_SpindleDetect(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_SpindleAtSpeed(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_SpindleAtSpeed(Control, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacNCT<T>::get_SpindleAtSpeed(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_SpindleAtSpeed(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_SpindleAtSpeed(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_SpindleAtSpeed(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_SpindleAtZero(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_SpindleAtZero(Control, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacNCT<T>::get_SpindleAtZero(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_SpindleAtZero(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_SpindleAtZero(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_SpindleAtZero(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_SpindleFPR(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_SpindleFPR(Control, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacNCT<T>::get_SpindleFPR(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_SpindleFPR(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_SpindleFPR(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_SpindleFPR(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_HomeInit(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_HomeInit(Control, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacNCT<T>::get_HomeInit(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_HomeInit(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_HomeInit(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_HomeInit(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_HomeMotorMask(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_HomeMotorMask(Control, pVal);
}

template <class T> long __fastcall
TCOMIPmacNCT<T>::get_HomeMotorMask(long Control/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_HomeMotorMask(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_HomeMotorMask(long Control/*[in]*/, long pVal/*[in]*/)
{
  return (*this)->set_HomeMotorMask(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetActiveGCode(long Control/*[in]*/, long coord/*[in]*/, long group/*[in]*/, 
                                double* pVal/*[out]*/)
{
  return (*this)->GetActiveGCode(Control, coord, group, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetActiveGCodeStr(long Control/*[in]*/, long coord/*[in]*/, long group/*[in]*/, 
                                   BSTR* pVal/*[in,out]*/)
{
  return (*this)->GetActiveGCodeStr(Control, coord, group, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetToolOffset(long Control/*[in]*/, long coord/*[in]*/, long* pVal/*[out]*/)
{
  return (*this)->GetToolOffset(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetCompOffset(long Control/*[in]*/, long coord/*[in]*/, long* pVal/*[out]*/)
{
  return (*this)->GetCompOffset(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::UpdateAllMotors(long Control/*[in]*/)
{
  return (*this)->UpdateAllMotors(Control);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetOperatingTime(long Control/*[in]*/, long* pDays/*[out]*/, long* pHours/*[out]*/, 
                                  long* pMinutes/*[out]*/, long* pSeconds/*[out]*/)
{
  return (*this)->GetOperatingTime(Control, pDays, pHours, pMinutes, pSeconds);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetTotalCuttingTime(long Control/*[in]*/, long* pDays/*[out]*/, 
                                     long* pHours/*[out]*/, long* pMinutes/*[out]*/, 
                                     long* pSeconds/*[out]*/)
{
  return (*this)->GetTotalCuttingTime(Control, pDays, pHours, pMinutes, pSeconds);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetRunningTime(long Control/*[in]*/, long* pDays/*[out]*/, long* pHours/*[out]*/, 
                                long* pMinutes/*[out]*/, long* pSeconds/*[out]*/)
{
  return (*this)->GetRunningTime(Control, pDays, pHours, pMinutes, pSeconds);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetPartTime(long Control/*[in]*/, long* pHours/*[out]*/, long* pMinutes/*[out]*/, 
                             long* pSeconds/*[out]*/)
{
  return (*this)->GetPartTime(Control, pHours, pMinutes, pSeconds);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetCycleCuttingTime(long Control/*[in]*/, long* pHours/*[out]*/, 
                                     long* pMinutes/*[out]*/, long* pSeconds/*[out]*/)
{
  return (*this)->GetCycleCuttingTime(Control, pHours, pMinutes, pSeconds);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetCycleTime(long Control/*[in]*/, long* pHours/*[out]*/, long* pMinutes/*[out]*/, 
                              long* Seconds/*[out]*/)
{
  return (*this)->GetCycleTime(Control, pHours, pMinutes, Seconds);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_PartsRequired(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_PartsRequired(Control, pVal);
}

template <class T> long __fastcall
TCOMIPmacNCT<T>::get_PartsRequired(long Control/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_PartsRequired(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_PartsRequired(long Control/*[in]*/, long pVal/*[in]*/)
{
  return (*this)->set_PartsRequired(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_PartsCount(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_PartsCount(Control, pVal);
}

template <class T> long __fastcall
TCOMIPmacNCT<T>::get_PartsCount(long Control/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_PartsCount(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_PartsCount(long Control/*[in]*/, long pVal/*[in]*/)
{
  return (*this)->set_PartsCount(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_PartsTotal(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_PartsTotal(Control, pVal);
}

template <class T> long __fastcall
TCOMIPmacNCT<T>::get_PartsTotal(long Control/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_PartsTotal(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_PartsTotal(long Control/*[in]*/, long pVal/*[in]*/)
{
  return (*this)->set_PartsTotal(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetNumDisplayedAxis(long Control/*[in]*/, long coord/*[in]*/, long* pVal/*[out]*/)
{
  return (*this)->GetNumDisplayedAxis(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetNumDisplayAxisTotal(long Control/*[in]*/, long* pVal/*[out]*/)
{
  return (*this)->GetNumDisplayAxisTotal(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetMotorPosStr(long Control/*[in]*/, long coord/*[in]*/, long motor/*[in]*/, 
                                Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/, 
                                VARIANT_BOOL bCombined/*[in]*/, BSTR* pAdr/*[in,out]*/, 
                                BSTR* pPos/*[in,out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetMotorPosStr(Control, coord, motor, t, bCombined, pAdr, pPos, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_IsSpindle(long Control/*[in]*/, long coord/*[in]*/, long motor/*[in]*/, 
                               VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsSpindle(Control, coord, motor, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacNCT<T>::get_IsSpindle(long Control/*[in]*/, long coord/*[in]*/, long motor/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsSpindle(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_IsSpindle(long Control/*[in]*/, long coord/*[in]*/, long motor/*[in]*/, 
                               VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_IsSpindle(Control, coord, motor, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_IsDisplayed(long Control/*[in]*/, long coord/*[in]*/, long motor/*[in]*/, 
                                 VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_IsDisplayed(Control, coord, motor, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacNCT<T>::get_IsDisplayed(long Control/*[in]*/, long coord/*[in]*/, long motor/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_IsDisplayed(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_IsDisplayed(long Control/*[in]*/, long coord/*[in]*/, long motor/*[in]*/, 
                                 VARIANT_BOOL pVal/*[in]*/)
{
  return (*this)->set_IsDisplayed(Control, coord, motor, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetMotorUnitsStr(long Control/*[in]*/, long coord/*[in]*/, long motor/*[in]*/, 
                                  BSTR* pVal/*[in,out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetMotorUnitsStr(Control, coord, motor, pVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetProgramLines(long Control/*[in]*/, long coord/*[in]*/, long start/*[in]*/, 
                                 long count/*[in]*/, VARIANT* pVal/*[in,out]*/, 
                                 VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetProgramLines(Control, coord, start, count, pVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetProgramLine(long Control/*[in]*/, long coord/*[in]*/, long lineNumber/*[in]*/, 
                                BSTR* pVal/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetProgramLine(Control, coord, lineNumber, pVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetInputLong(long Control/*[in]*/, long num/*[in]*/, long* pVal/*[out]*/)
{
  return (*this)->GetInputLong(Control, num, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetOutputLong(long Control/*[in]*/, long num/*[in]*/, long* pVal/*[out]*/)
{
  return (*this)->GetOutputLong(Control, num, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetCommandLong(long Control/*[in]*/, long num/*[in]*/, long* pVal/*[out]*/)
{
  return (*this)->GetCommandLong(Control, num, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetStatusLong(long Control/*[in]*/, long num/*[in]*/, long* pVal/*[out]*/)
{
  return (*this)->GetStatusLong(Control, num, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_HomeInProgress(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_HomeInProgress(Control, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacNCT<T>::get_HomeInProgress(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_HomeInProgress(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_SpindleCmdRPM(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_SpindleCmdRPM(Control, pVal);
}

template <class T> long __fastcall
TCOMIPmacNCT<T>::get_SpindleCmdRPM(long Control/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_SpindleCmdRPM(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::command(long Control/*[in]*/, long id/*[in]*/, long iv/*[in]*/, double fv/*[in]*/, 
                         BSTR bStr/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->command(Control, id, iv, fv, bStr, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::AddErrorRecord(long Control/*[in]*/, long errnum/*[in]*/, 
                                Pcommserverlib_tlb::NCERRORMODE em/*[in]*/, 
                                Pcommserverlib_tlb::NCERRORTYPE et/*[in]*/, long Line/*[in]*/, 
                                short ax/*[in]*/, BSTR Msg/*[in]*/)
{
  return (*this)->AddErrorRecord(Control, errnum, em, et, Line, ax, Msg);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetParametricDouble(long Control/*[in]*/, long coord/*[in]*/, BSTR region/*[in]*/, 
                                     long index/*[in]*/, double* pVal/*[out]*/, 
                                     VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetParametricDouble(Control, coord, region, index, pVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::SetParametricDouble(long Control/*[in]*/, long coord/*[in]*/, BSTR region/*[in]*/, 
                                     long index/*[in]*/, double newVal/*[in]*/, 
                                     VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->SetParametricDouble(Control, coord, region, index, newVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetSelectedAxisChar(long Control/*[in]*/, short* pAxChar/*[out]*/)
{
  return (*this)->GetSelectedAxisChar(Control, pAxChar);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_CurrentErrorLevel(long Control/*[in]*/, 
                                       Pcommserverlib_tlb::NCERRORMODE* pVal/*[out,retval]*/)
{
  return (*this)->get_CurrentErrorLevel(Control, pVal);
}

template <class T> Pcommserverlib_tlb::NCERRORMODE __fastcall
TCOMIPmacNCT<T>::get_CurrentErrorLevel(long Control/*[in]*/)
{
  Pcommserverlib_tlb::NCERRORMODE pVal;
  OLECHECK(this->get_CurrentErrorLevel(, (Pcommserverlib_tlb::NCERRORMODE*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::set_CurrentErrorLevel(long Control/*[in]*/, 
                                       Pcommserverlib_tlb::NCERRORMODE pVal/*[in]*/)
{
  return (*this)->set_CurrentErrorLevel(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetAxisFormat(long Control/*[in]*/, long coord/*[in]*/, short ax/*[in]*/, 
                               VARIANT_BOOL bMetric/*[in]*/, long* pLen/*[out]*/, 
                               long* pDecPlaces/*[out]*/)
{
  return (*this)->GetAxisFormat(Control, coord, ax, bMetric, pLen, pDecPlaces);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetAxisFormatStr(long Control/*[in]*/, long coord/*[in]*/, short ax/*[in]*/, 
                                  VARIANT_BOOL bMetric/*[in]*/, BSTR* pVal/*[in,out]*/)
{
  return (*this)->GetAxisFormatStr(Control, coord, ax, bMetric, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::SetAxisFormat(long Control/*[in]*/, long coord/*[in]*/, short ax/*[in]*/, 
                               VARIANT_BOOL bMetric/*[in]*/, long len/*[in]*/, 
                               long decPlaces/*[in]*/)
{
  return (*this)->SetAxisFormat(Control, coord, ax, bMetric, len, decPlaces);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetFirstError(long Control/*[in]*/, BSTR* pHeader/*[in,out]*/, 
                               BSTR* pMessage/*[in,out]*/, BSTR* pCode/*[in,out]*/, 
                               BSTR* pFilename/*[in,out]*/, long* pCount/*[out]*/, 
                               long* pChanged/*[out]*/)
{
  return (*this)->GetFirstError(Control, pHeader, pMessage, pCode, pFilename, pCount, pChanged);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetNextError(long Control/*[in]*/, BSTR* pHeader/*[in,out]*/, 
                              BSTR* pMessage/*[in,out]*/, BSTR* pCode/*[in,out]*/, 
                              BSTR* pFilename/*[in,out]*/, VARIANT_BOOL* pbMore/*[out]*/)
{
  return (*this)->GetNextError(Control, pHeader, pMessage, pCode, pFilename, pbMore);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::OffsetsUpdateClear(long Control/*[in]*/, long clearMask/*[in]*/)
{
  return (*this)->OffsetsUpdateClear(Control, clearMask);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::OffsetsUpdate(long Control/*[in]*/, long* pVal/*[out]*/)
{
  return (*this)->OffsetsUpdate(Control, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::ReadErrorMsgBoxText(long Control/*[in]*/, long index/*[in]*/, long* pCount/*[out]*/, 
                                     BSTR* pText/*[in,out]*/, BSTR* pTitle/*[in,out]*/)
{
  return (*this)->ReadErrorMsgBoxText(Control, index, pCount, pText, pTitle);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::ResetMsgBoxError(long Control/*[in]*/, long errRetVal/*[in]*/)
{
  return (*this)->ResetMsgBoxError(Control, errRetVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::SaveParametricVars(long Control/*[in]*/)
{
  return (*this)->SaveParametricVars(Control);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::LoadParametricVars(long Control/*[in]*/)
{
  return (*this)->LoadParametricVars(Control);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::ResetCycleTime(long Control/*[in]*/)
{
  return (*this)->ResetCycleTime(Control);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetToolGuageOffset(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                                    VARIANT_BOOL bMulti/*[in]*/, short ax/*[in]*/, 
                                    VARIANT_BOOL bMetric/*[in]*/, double* pVal/*[out]*/)
{
  return (*this)->GetToolGuageOffset(Control, coord, tool, bMulti, ax, bMetric, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::SetToolGuageOffset(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                                    VARIANT_BOOL bMulti/*[in]*/, short ax/*[in]*/, 
                                    VARIANT_BOOL bMetric/*[in]*/, double newVal/*[in]*/)
{
  return (*this)->SetToolGuageOffset(Control, coord, tool, bMulti, ax, bMetric, newVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::AutoSetToolOffset(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                                   short axis/*[in]*/)
{
  return (*this)->AutoSetToolOffset(Control, coord, tool, axis);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetOffsetValue(long Control/*[in]*/, long coord/*[in]*/, short axis/*[in]*/, 
                                Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                VARIANT_BOOL bMetric/*[in]*/, double* pVal/*[out]*/)
{
  return (*this)->GetOffsetValue(Control, coord, axis, t, bMetric, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::SetOffsetValue(long Control/*[in]*/, long coord/*[in]*/, short axis/*[in]*/, 
                                Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                VARIANT_BOOL bMetric/*[in]*/, VARIANT_BOOL bConfirm/*[in]*/, 
                                double newVal/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->SetOffsetValue(Control, coord, axis, t, bMetric, bConfirm, newVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::AutoSetWorkOffset(long Control/*[in]*/, long coord/*[in]*/, short axis/*[in]*/, 
                                   Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                   VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->AutoSetWorkOffset(Control, coord, axis, t, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::SearchText(long Control/*[in]*/, long coord/*[in]*/, BSTR text/*[in]*/, 
                            VARIANT_BOOL bMatchCase/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->SearchText(Control, coord, text, bMatchCase, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::SearchTextNext(long Control/*[in]*/, long coord/*[in]*/, BSTR text/*[in]*/, 
                                VARIANT_BOOL bMatchCase/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->SearchTextNext(Control, coord, text, bMatchCase, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetBufferText(long Control/*[in]*/, long coord/*[in]*/, VARIANT_BOOL bMDI/*[in]*/, 
                               BSTR* pVal/*[in,out]*/)
{
  return (*this)->GetBufferText(Control, coord, bMDI, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::SetBufferText(long Control/*[in]*/, long coord/*[in]*/, long repeat/*[in]*/, 
                               VARIANT_BOOL bMDI/*[in]*/, BSTR newVal/*[in]*/)
{
  return (*this)->SetBufferText(Control, coord, repeat, bMDI, newVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetProcessorClocks(double* pIO/*[out]*/, double* pLA/*[out]*/, 
                                    double* pParse/*[out]*/, double* pFormat/*[out]*/, 
                                    double* pWrite/*[out]*/)
{
  return (*this)->GetProcessorClocks(pIO, pLA, pParse, pFormat, pWrite);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_CurrentErrorCount(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_CurrentErrorCount(Control, pVal);
}

template <class T> long __fastcall
TCOMIPmacNCT<T>::get_CurrentErrorCount(long Control/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_CurrentErrorCount(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_BlocksPerSecond(long Control/*[in]*/, long coord/*[in]*/, 
                                     long* pVal/*[out,retval]*/)
{
  return (*this)->get_BlocksPerSecond(Control, coord, pVal);
}

template <class T> long __fastcall
TCOMIPmacNCT<T>::get_BlocksPerSecond(long Control/*[in]*/, long coord/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_BlocksPerSecond(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetMetricInput(long Control/*[in]*/, long coord/*[in]*/, 
                                VARIANT_BOOL* pVal/*[out]*/)
{
  return (*this)->GetMetricInput(Control, coord, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetToolInfo(long Control/*[in]*/, long coord/*[in]*/, long* pCurrentTool/*[out]*/, 
                             long* pNextTool/*[out]*/, long* pHolder/*[out]*/, 
                             long* pHolderTool/*[out]*/)
{
  return (*this)->GetToolInfo(Control, coord, pCurrentTool, pNextTool, pHolder, pHolderTool);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetToolData(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                             VARIANT* pVal/*[in,out]*/)
{
  return (*this)->GetToolData(Control, coord, tool, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::ZeroAllTypeToolOffsets(long Control/*[in]*/, long coord/*[in]*/, 
                                        Pcommserverlib_tlb::NCTOOLOFSTYPE type/*[in]*/)
{
  return (*this)->ZeroAllTypeToolOffsets(Control, coord, type);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::SearchLine(long Control/*[in]*/, long coord/*[in]*/, long Line/*[in]*/, 
                            VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->SearchLine(Control, coord, Line, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetAxisMotor(long Control/*[in]*/, long coord/*[in]*/, short axis/*[in]*/, 
                              long* pMotor/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetAxisMotor(Control, coord, axis, pMotor, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetMotorAxis(long Control/*[in]*/, long coord/*[in]*/, long motor/*[in]*/, 
                              short* pAxis/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetMotorAxis(Control, coord, motor, pAxis, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetMotorPos(long Control/*[in]*/, long coord/*[in]*/, long motor/*[in]*/, 
                             Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/, BSTR* pAdr/*[out]*/, 
                             double* pPos/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetMotorPos(Control, coord, motor, t, pAdr, pPos, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetAllAxisPos(long Control/*[in]*/, long coord/*[in]*/, 
                               Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/, 
                               LPSAFEARRAY* pvAdrArray/*[in,out]*/, 
                               LPSAFEARRAY* pvPosArray/*[in,out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetAllAxisPos(Control, coord, t, pvAdrArray, pvPosArray, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetAllAxisPosStr(long Control/*[in]*/, long coord/*[in]*/, 
                                  Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/, 
                                  VARIANT_BOOL bCoord/*[in]*/, LPSAFEARRAY* pvArray/*[in,out]*/, 
                                  VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->GetAllAxisPosStr(Control, coord, t, bCoord, pvArray, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetMaxFeedrates(long Control/*[in]*/, long coord/*[in]*/, 
                                 double* pMaxPerRev/*[out]*/, double* pMaxPerMinute/*[out]*/)
{
  return (*this)->GetMaxFeedrates(Control, coord, pMaxPerRev, pMaxPerMinute);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::SetMaxFeedrates(long Control/*[in]*/, long coord/*[in]*/, double MaxPerRev/*[in]*/, 
                                 double MaxPerMinute/*[in]*/)
{
  return (*this)->SetMaxFeedrates(Control, coord, MaxPerRev, MaxPerMinute);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::ClearOffsetValue(long Control/*[in]*/, long coord/*[in]*/, short axis/*[in]*/, 
                                  Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                  VARIANT_BOOL bMetric/*[in]*/, double newVal/*[in]*/, 
                                  VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->ClearOffsetValue(Control, coord, axis, t, bMetric, newVal, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetToolDataStruct(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                                   Pcommserverlib_tlb::NCTOOL* pStruct/*[in,out]*/)
{
  return (*this)->GetToolDataStruct(Control, coord, tool, pStruct);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::StartDataCollection(long Control/*[in]*/, long CollectionMSec/*[in]*/, 
                                     long BufferSize/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->StartDataCollection(Control, CollectionMSec, BufferSize, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::StopDataCollection(long Control/*[in]*/)
{
  return (*this)->StopDataCollection(Control);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::DataCollect(long Control/*[in]*/, long coord/*[in]*/, 
                             LPSAFEARRAY* pvArray/*[in,out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  return (*this)->DataCollect(Control, coord, pvArray, pbSuccess);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::ResetPartsCount(long Control/*[in]*/)
{
  return (*this)->ResetPartsCount(Control);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::ResetPartsTotal(long Control/*[in]*/)
{
  return (*this)->ResetPartsTotal(Control);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetWorkOffset(long Control/*[in]*/, long coord/*[in]*/, 
                               Pcommserverlib_tlb::NCCOORDTYPE* t/*[out]*/, 
                               long* pExtendedVal/*[out]*/)
{
  return (*this)->GetWorkOffset(Control, coord, t, pExtendedVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_DataCollectionEnabled(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  return (*this)->get_DataCollectionEnabled(Control, pVal);
}

template <class T> VARIANT_BOOL __fastcall
TCOMIPmacNCT<T>::get_DataCollectionEnabled(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  OLECHECK(this->get_DataCollectionEnabled(, (VARIANT_BOOL*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::get_DataCollectionResolution(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  return (*this)->get_DataCollectionResolution(Control, pVal);
}

template <class T> long __fastcall
TCOMIPmacNCT<T>::get_DataCollectionResolution(long Control/*[in]*/)
{
  long pVal;
  OLECHECK(this->get_DataCollectionResolution(, (long*)&pVal));
  return pVal;
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::GetLatheSetXDiameter(long Control/*[in]*/, long coord/*[in]*/, 
                                      VARIANT_BOOL bMetric/*[in]*/, double* pVal/*[out]*/)
{
  return (*this)->GetLatheSetXDiameter(Control, coord, bMetric, pVal);
}

template <class T> HRESULT __fastcall
TCOMIPmacNCT<T>::SetLatheSetXDiameter(long Control/*[in]*/, long coord/*[in]*/, 
                                      VARIANT_BOOL bMetric/*[in]*/, double newVal/*[in]*/)
{
  return (*this)->SetLatheSetXDiameter(Control, coord, bMetric, newVal);
}

// *********************************************************************//
// DispIntf:  IPmacNC
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0A322163-C2E1-4152-ADED-91740ACE7513}
// *********************************************************************//
template <class T> HRESULT __fastcall
IPmacNCDispT<T>::Open(long Device/*[in]*/, long Control/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("Open"), DISPID(1));
  TAutoArgs<3> _args;
  _args[1] = Device /*[VT_I4:0]*/;
  _args[2] = Control /*[VT_I4:0]*/;
  _args[3] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::Close(long Control/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Close"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::OpenFile(long Control/*[in]*/, long dwCoord/*[in]*/, BSTR szFilePath/*[in]*/, 
                          VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("OpenFile"), DISPID(3));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  _args[3] = szFilePath /*[VT_BSTR:0]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::CloseFile(long Control/*[in]*/, long dwCoord/*[in]*/, 
                           VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("CloseFile"), DISPID(4));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = dwCoord /*[VT_I4:0]*/;
  _args[3] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_Title(long Control/*[in]*/, BSTR* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Title"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BSTR:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> BSTR __fastcall
IPmacNCDispT<T>::get_Title(long Control/*[in]*/)
{
  BSTR pVal;
  this->get_Title(Control, (BSTR*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_Title(long Control/*[in]*/, BSTR pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Title"), DISPID(5));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_BSTR:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_DeviceNumber(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DeviceNumber"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacNCDispT<T>::get_DeviceNumber(long Control/*[in]*/)
{
  long pVal;
  this->get_DeviceNumber(Control, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_IsOpen(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsOpen"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacNCDispT<T>::get_IsOpen(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_IsOpen(Control, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::SetMachineMode(long Control/*[in]*/, Pcommserverlib_tlb::NCMODE mode/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetMachineMode"), DISPID(8));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = (int)mode /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetMachineMode(long Control/*[in]*/, Pcommserverlib_tlb::NCMODE* pMode/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMachineMode"), DISPID(9));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = (int*)pMode /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_mode(long Control/*[in]*/, Pcommserverlib_tlb::NCMODE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("mode"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Pcommserverlib_tlb::NCMODE __fastcall
IPmacNCDispT<T>::get_mode(long Control/*[in]*/)
{
  Pcommserverlib_tlb::NCMODE pVal;
  this->get_mode(Control, (Pcommserverlib_tlb::NCMODE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_mode(long Control/*[in]*/, Pcommserverlib_tlb::NCMODE pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("mode"), DISPID(10));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetRegistryBool(long Control/*[in]*/, BSTR section/*[in]*/, BSTR name/*[in]*/, 
                                 VARIANT_BOOL def/*[in]*/, VARIANT_BOOL* pVal/*[out]*/, 
                                 VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetRegistryBool"), DISPID(11));
  TAutoArgs<6> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = section /*[VT_BSTR:0]*/;
  _args[3] = name /*[VT_BSTR:0]*/;
  _args[4] = def /*[VT_BOOL:0]*/;
  _args[5] = pVal /*[VT_BOOL:1]*/;
  _args[6] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::SetRegistryBool(long Control/*[in]*/, BSTR section/*[in]*/, BSTR name/*[in]*/, 
                                 VARIANT_BOOL bVal/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetRegistryBool"), DISPID(12));
  TAutoArgs<5> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = section /*[VT_BSTR:0]*/;
  _args[3] = name /*[VT_BSTR:0]*/;
  _args[4] = bVal /*[VT_BOOL:0]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetRegistryLong(long Control/*[in]*/, BSTR section/*[in]*/, BSTR name/*[in]*/, 
                                 long def/*[in]*/, long* pVal/*[out]*/, 
                                 VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetRegistryLong"), DISPID(13));
  TAutoArgs<6> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = section /*[VT_BSTR:0]*/;
  _args[3] = name /*[VT_BSTR:0]*/;
  _args[4] = def /*[VT_I4:0]*/;
  _args[5] = pVal /*[VT_I4:1]*/;
  _args[6] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::SetRegistryLong(long Control/*[in]*/, BSTR section/*[in]*/, BSTR name/*[in]*/, 
                                 long lVal/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetRegistryLong"), DISPID(14));
  TAutoArgs<5> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = section /*[VT_BSTR:0]*/;
  _args[3] = name /*[VT_BSTR:0]*/;
  _args[4] = lVal /*[VT_I4:0]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetRegistryString(long Control/*[in]*/, BSTR section/*[in]*/, BSTR name/*[in]*/, 
                                   BSTR def/*[in]*/, BSTR* pVal/*[in,out]*/, 
                                   VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetRegistryString"), DISPID(15));
  TAutoArgs<6> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = section /*[VT_BSTR:0]*/;
  _args[3] = name /*[VT_BSTR:0]*/;
  _args[4] = def /*[VT_BSTR:0]*/;
  _args[5] = pVal /*[VT_BSTR:1]*/;
  _args[6] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::SetRegistryString(long Control/*[in]*/, BSTR section/*[in]*/, BSTR name/*[in]*/, 
                                   BSTR Val/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetRegistryString"), DISPID(16));
  TAutoArgs<5> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = section /*[VT_BSTR:0]*/;
  _args[3] = name /*[VT_BSTR:0]*/;
  _args[4] = Val /*[VT_BSTR:0]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetRegistryDouble(long Control/*[in]*/, BSTR section/*[in]*/, BSTR name/*[in]*/, 
                                   double def/*[in]*/, double* pVal/*[out]*/, 
                                   VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetRegistryDouble"), DISPID(17));
  TAutoArgs<6> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = section /*[VT_BSTR:0]*/;
  _args[3] = name /*[VT_BSTR:0]*/;
  _args[4] = def /*[VT_R8:0]*/;
  _args[5] = pVal /*[VT_R8:1]*/;
  _args[6] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::SetRegistryDouble(long Control/*[in]*/, BSTR section/*[in]*/, BSTR name/*[in]*/, 
                                   double Val/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetRegistryDouble"), DISPID(18));
  TAutoArgs<5> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = section /*[VT_BSTR:0]*/;
  _args[3] = name /*[VT_BSTR:0]*/;
  _args[4] = Val /*[VT_R8:0]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_CoordSystem(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CoordSystem"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacNCDispT<T>::get_CoordSystem(long Control/*[in]*/)
{
  long pVal;
  this->get_CoordSystem(Control, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_CoordSystem(long Control/*[in]*/, long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CoordSystem"), DISPID(19));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_NumCoordSystems(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NumCoordSystems"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacNCDispT<T>::get_NumCoordSystems(long Control/*[in]*/)
{
  long pVal;
  this->get_NumCoordSystems(Control, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_SingleBlock(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SingleBlock"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacNCDispT<T>::get_SingleBlock(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_SingleBlock(Control, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_SingleBlock(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SingleBlock"), DISPID(22));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_BlockDelete(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlockDelete"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacNCDispT<T>::get_BlockDelete(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_BlockDelete(Control, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_BlockDelete(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlockDelete"), DISPID(23));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_OptionalStop(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("OptionalStop"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacNCDispT<T>::get_OptionalStop(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_OptionalStop(Control, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_OptionalStop(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OptionalStop"), DISPID(24));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_MachineLock(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MachineLock"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacNCDispT<T>::get_MachineLock(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_MachineLock(Control, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_MachineLock(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("MachineLock"), DISPID(25));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_DryRun(long Control/*[in]*/, long coord/*[in]*/, 
                            VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DryRun"), DISPID(26));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacNCDispT<T>::get_DryRun(long Control/*[in]*/, long coord/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_DryRun(Control, coord, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_DryRun(long Control/*[in]*/, long coord/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DryRun"), DISPID(26));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_MachineType(long Control/*[in]*/, 
                                 Pcommserverlib_tlb::NCMACHINETYPE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("MachineType"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Pcommserverlib_tlb::NCMACHINETYPE __fastcall
IPmacNCDispT<T>::get_MachineType(long Control/*[in]*/)
{
  Pcommserverlib_tlb::NCMACHINETYPE pVal;
  this->get_MachineType(Control, (Pcommserverlib_tlb::NCMACHINETYPE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_JogSelect(long Control/*[in]*/, 
                               Pcommserverlib_tlb::NCJOGSELECT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("JogSelect"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Pcommserverlib_tlb::NCJOGSELECT __fastcall
IPmacNCDispT<T>::get_JogSelect(long Control/*[in]*/)
{
  Pcommserverlib_tlb::NCJOGSELECT pVal;
  this->get_JogSelect(Control, (Pcommserverlib_tlb::NCJOGSELECT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_JogSelect(long Control/*[in]*/, Pcommserverlib_tlb::NCJOGSELECT pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("JogSelect"), DISPID(28));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_SpeedSelect(long Control/*[in]*/, 
                                 Pcommserverlib_tlb::NCSPEEDSELECT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpeedSelect"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Pcommserverlib_tlb::NCSPEEDSELECT __fastcall
IPmacNCDispT<T>::get_SpeedSelect(long Control/*[in]*/)
{
  Pcommserverlib_tlb::NCSPEEDSELECT pVal;
  this->get_SpeedSelect(Control, (Pcommserverlib_tlb::NCSPEEDSELECT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_SpeedSelect(long Control/*[in]*/, 
                                 Pcommserverlib_tlb::NCSPEEDSELECT pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpeedSelect"), DISPID(29));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_ProgramLoaded(long Control/*[in]*/, long coord/*[in]*/, 
                                   VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ProgramLoaded"), DISPID(30));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacNCDispT<T>::get_ProgramLoaded(long Control/*[in]*/, long coord/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_ProgramLoaded(Control, coord, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetAxisEnabled(long Control/*[in]*/, long coord/*[in]*/, short axis/*[in]*/, 
                                VARIANT_BOOL* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetAxisEnabled"), DISPID(31));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = axis /*[VT_I2:0]*/;
  _args[4] = pVal /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetProgramName(long Control/*[in]*/, long coord/*[in]*/, VARIANT_BOOL bMain/*[in]*/
                                , BSTR* pVal/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetProgramName"), DISPID(32));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = bMain /*[VT_BOOL:0]*/;
  _args[4] = pVal /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetProgramPath(long Control/*[in]*/, long coord/*[in]*/, VARIANT_BOOL bMain/*[in]*/
                                , BSTR* pVal/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetProgramPath"), DISPID(33));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = bMain /*[VT_BOOL:0]*/;
  _args[4] = pVal /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_Semaphore(long Control/*[in]*/, long coord/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("Semaphore"), DISPID(34));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacNCDispT<T>::get_Semaphore(long Control/*[in]*/, long coord/*[in]*/)
{
  long pVal;
  this->get_Semaphore(Control, coord, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_Semaphore(long Control/*[in]*/, long coord/*[in]*/, long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("Semaphore"), DISPID(34));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetProgramStatus(long Control/*[in]*/, long coord/*[in]*/, long* pProgID/*[out]*/, 
                                  long* pNumLines/*[out]*/, long* pLine/*[out]*/, 
                                  long* pParseLine/*[out]*/, long* pRepeat/*[out]*/, 
                                  long* pCount/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetProgramStatus"), DISPID(35));
  TAutoArgs<9> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pProgID /*[VT_I4:1]*/;
  _args[4] = pNumLines /*[VT_I4:1]*/;
  _args[5] = pLine /*[VT_I4:1]*/;
  _args[6] = pParseLine /*[VT_I4:1]*/;
  _args[7] = pRepeat /*[VT_I4:1]*/;
  _args[8] = pCount /*[VT_I4:1]*/;
  _args[9] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetProgramNumber(long Control/*[in]*/, long coord/*[in]*/, long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetProgramNumber"), DISPID(36));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetCurrentLabel(long Control/*[in]*/, long coord/*[in]*/, long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCurrentLabel"), DISPID(37));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_DistanceSelect(long Control/*[in]*/, 
                                    Pcommserverlib_tlb::NCSPEEDSELECT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DistanceSelect"), DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Pcommserverlib_tlb::NCSPEEDSELECT __fastcall
IPmacNCDispT<T>::get_DistanceSelect(long Control/*[in]*/)
{
  Pcommserverlib_tlb::NCSPEEDSELECT pVal;
  this->get_DistanceSelect(Control, (Pcommserverlib_tlb::NCSPEEDSELECT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_DistanceSelect(long Control/*[in]*/, 
                                    Pcommserverlib_tlb::NCSPEEDSELECT pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("DistanceSelect"), DISPID(38));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetJogStep(long Control/*[in]*/, long coord/*[in]*/, double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetJogStep"), DISPID(39));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetHandleStep(long Control/*[in]*/, long coord/*[in]*/, double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetHandleStep"), DISPID(40));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::SetOrigin(long Control/*[in]*/, long coord/*[in]*/, VARIANT_BOOL bOrginAll/*[in]*/
                           , Pcommserverlib_tlb::NCADDRESS adr/*[in]*/, VARIANT_BOOL bClear/*[in]*/
                           , double Val/*[in]*/, VARIANT_BOOL metric/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetOrigin"), DISPID(41));
  TAutoArgs<7> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = bOrginAll /*[VT_BOOL:0]*/;
  _args[4] = (int)adr /*[VT_USERDEFINED:0]*/;
  _args[5] = bClear /*[VT_BOOL:0]*/;
  _args[6] = Val /*[VT_R8:0]*/;
  _args[7] = metric /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::ZeroShift(long Control/*[in]*/, long coord/*[in]*/, VARIANT_BOOL bShiftAll/*[in]*/
                           , Pcommserverlib_tlb::NCADDRESS adr/*[in]*/, VARIANT_BOOL bClear/*[in]*/
                           , double Val/*[in]*/, VARIANT_BOOL bMetric/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZeroShift"), DISPID(42));
  TAutoArgs<7> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = bShiftAll /*[VT_BOOL:0]*/;
  _args[4] = (int)adr /*[VT_USERDEFINED:0]*/;
  _args[5] = bClear /*[VT_BOOL:0]*/;
  _args[6] = Val /*[VT_R8:0]*/;
  _args[7] = bMetric /*[VT_BOOL:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetVectorVelocity(long Control/*[in]*/, long coord/*[in]*/, double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetVectorVelocity"), DISPID(45));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::ReadMdiBuffer(long Control/*[in]*/, long coord/*[in]*/, long* hDlg/*[in]*/, 
                               long idControl/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadMdiBuffer"), DISPID(46));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = hDlg /*[VT_I4:1]*/;
  _args[4] = idControl /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::LoadMdiBuffer(long Control/*[in]*/, long coord/*[in]*/, long* hDlg/*[in]*/, 
                               long idControl/*[in]*/, long nRepeat/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadMdiBuffer"), DISPID(47));
  TAutoArgs<5> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = hDlg /*[VT_I4:1]*/;
  _args[4] = idControl /*[VT_I4:0]*/;
  _args[5] = nRepeat /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::ClearTextBuffer(long Control/*[in]*/, long coord/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClearTextBuffer"), DISPID(48));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetCurrentGValue(long Control/*[in]*/, long coord/*[in]*/, long group/*[in]*/, 
                                  long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCurrentGValue"), DISPID(49));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = group /*[VT_I4:0]*/;
  _args[4] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_AxisSelect(long Control/*[in]*/, long coord/*[in]*/, 
                                Pcommserverlib_tlb::NCAXISSELECT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("AxisSelect"), DISPID(50));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Pcommserverlib_tlb::NCAXISSELECT __fastcall
IPmacNCDispT<T>::get_AxisSelect(long Control/*[in]*/, long coord/*[in]*/)
{
  Pcommserverlib_tlb::NCAXISSELECT pVal;
  this->get_AxisSelect(Control, coord, (Pcommserverlib_tlb::NCAXISSELECT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_AxisSelect(long Control/*[in]*/, long coord/*[in]*/, 
                                Pcommserverlib_tlb::NCAXISSELECT pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AxisSelect"), DISPID(50));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetInposition(long Control/*[in]*/, long coord/*[in]*/, VARIANT_BOOL* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetInposition"), DISPID(51));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_BufferMode(long Control/*[in]*/, long coord/*[in]*/, 
                                Pcommserverlib_tlb::NCBUFFERMODE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BufferMode"), DISPID(52));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Pcommserverlib_tlb::NCBUFFERMODE __fastcall
IPmacNCDispT<T>::get_BufferMode(long Control/*[in]*/, long coord/*[in]*/)
{
  Pcommserverlib_tlb::NCBUFFERMODE pVal;
  this->get_BufferMode(Control, coord, (Pcommserverlib_tlb::NCBUFFERMODE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_BufferMode(long Control/*[in]*/, long coord/*[in]*/, 
                                Pcommserverlib_tlb::NCBUFFERMODE pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("BufferMode"), DISPID(52));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetProgramMode(long Control/*[in]*/, long coord/*[in]*/, 
                                Pcommserverlib_tlb::DEVPROGRAMMODE* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetProgramMode"), DISPID(53));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = (int*)pVal /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetSelectedBufferMode(long Control/*[in]*/, 
                                       Pcommserverlib_tlb::NCBUFFERMODE* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetSelectedBufferMode"), DISPID(54));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = (int*)pVal /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetSelectedAxisMotionMode(long Control/*[in]*/, 
                                           Pcommserverlib_tlb::DEVMOTIONMODE* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetSelectedAxisMotionMode"), DISPID(55));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = (int*)pVal /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetProgramMotionMode(long Control/*[in]*/, long coord/*[in]*/, 
                                      Pcommserverlib_tlb::DEVMOTIONMODE* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetProgramMotionMode"), DISPID(56));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = (int*)pVal /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetBufferOpen(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetBufferOpen"), DISPID(57));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetBufferRemaining(long Control/*[in]*/, long coord/*[in]*/, long* pRemain/*[out]*/
                                    , long* pParsed/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetBufferRemaining"), DISPID(58));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pRemain /*[VT_I4:1]*/;
  _args[4] = pParsed /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_SpindleSelect(long Control/*[in]*/, 
                                   Pcommserverlib_tlb::NCSPINDLESELECT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleSelect"), DISPID(59));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Pcommserverlib_tlb::NCSPINDLESELECT __fastcall
IPmacNCDispT<T>::get_SpindleSelect(long Control/*[in]*/)
{
  Pcommserverlib_tlb::NCSPINDLESELECT pVal;
  this->get_SpindleSelect(Control, (Pcommserverlib_tlb::NCSPINDLESELECT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_SpindleSelect(long Control/*[in]*/, 
                                   Pcommserverlib_tlb::NCSPINDLESELECT pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleSelect"), DISPID(59));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_SpindleRPM(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleRPM"), DISPID(60));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacNCDispT<T>::get_SpindleRPM(long Control/*[in]*/)
{
  long pVal;
  this->get_SpindleRPM(Control, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_SpindleRPM(long Control/*[in]*/, long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleRPM"), DISPID(60));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_SpindleCSS(long Control/*[in]*/, double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleCSS"), DISPID(61));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IPmacNCDispT<T>::get_SpindleCSS(long Control/*[in]*/)
{
  double pVal;
  this->get_SpindleCSS(Control, (double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_SpindleCSS(long Control/*[in]*/, double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleCSS"), DISPID(61));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_SpindleCSSMode(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleCSSMode"), DISPID(62));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacNCDispT<T>::get_SpindleCSSMode(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_SpindleCSSMode(Control, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_SpindleCSSMode(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleCSSMode"), DISPID(62));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_SpindleCSSUnits(long Control/*[in]*/, double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleCSSUnits"), DISPID(63));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IPmacNCDispT<T>::get_SpindleCSSUnits(long Control/*[in]*/)
{
  double pVal;
  this->get_SpindleCSSUnits(Control, (double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_SpindleCSSUnits(long Control/*[in]*/, double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleCSSUnits"), DISPID(63));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetSpindleActRPM(long Control/*[in]*/, long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetSpindleActRPM"), DISPID(64));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_SpindleMaxRPM(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleMaxRPM"), DISPID(65));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacNCDispT<T>::get_SpindleMaxRPM(long Control/*[in]*/)
{
  long pVal;
  this->get_SpindleMaxRPM(Control, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_SpindleMaxRPM(long Control/*[in]*/, long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleMaxRPM"), DISPID(65));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_SpindleOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                     long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleOverride"), DISPID(66));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacNCDispT<T>::get_SpindleOverride(long Control/*[in]*/, long coord/*[in]*/)
{
  long pVal;
  this->get_SpindleOverride(Control, coord, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_SpindleOverride(long Control/*[in]*/, long coord/*[in]*/, long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleOverride"), DISPID(66));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_FeedrateOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                      double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeedrateOverride"), DISPID(69));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IPmacNCDispT<T>::get_FeedrateOverride(long Control/*[in]*/, long coord/*[in]*/)
{
  double pVal;
  this->get_FeedrateOverride(Control, coord, (double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_FeedrateOverride(long Control/*[in]*/, long coord/*[in]*/, double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("FeedrateOverride"), DISPID(69));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_RapidOverride(long Control/*[in]*/, long coord/*[in]*/, 
                                   double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("RapidOverride"), DISPID(70));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IPmacNCDispT<T>::get_RapidOverride(long Control/*[in]*/, long coord/*[in]*/)
{
  double pVal;
  this->get_RapidOverride(Control, coord, (double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_RapidOverride(long Control/*[in]*/, long coord/*[in]*/, double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("RapidOverride"), DISPID(70));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_CoolantSelect(long Control/*[in]*/, 
                                   Pcommserverlib_tlb::NCCLNTSELECT* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CoolantSelect"), DISPID(72));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Pcommserverlib_tlb::NCCLNTSELECT __fastcall
IPmacNCDispT<T>::get_CoolantSelect(long Control/*[in]*/)
{
  Pcommserverlib_tlb::NCCLNTSELECT pVal;
  this->get_CoolantSelect(Control, (Pcommserverlib_tlb::NCCLNTSELECT*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_CoolantSelect(long Control/*[in]*/, 
                                   Pcommserverlib_tlb::NCCLNTSELECT pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CoolantSelect"), DISPID(72));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_TimebaseMode(long Control/*[in]*/, long coord/*[in]*/, 
                                  Pcommserverlib_tlb::NCTIMEBASEMODE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("TimebaseMode"), DISPID(73));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Pcommserverlib_tlb::NCTIMEBASEMODE __fastcall
IPmacNCDispT<T>::get_TimebaseMode(long Control/*[in]*/, long coord/*[in]*/)
{
  Pcommserverlib_tlb::NCTIMEBASEMODE pVal;
  this->get_TimebaseMode(Control, coord, (Pcommserverlib_tlb::NCTIMEBASEMODE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_TimebaseMode(long Control/*[in]*/, long coord/*[in]*/, 
                                  Pcommserverlib_tlb::NCTIMEBASEMODE pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("TimebaseMode"), DISPID(73));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetFeedrate(long Control/*[in]*/, long coord/*[in]*/, 
                             Pcommserverlib_tlb::NCFEEDRATEMODE* pMode/*[out]*/, 
                             double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetFeedrate"), DISPID(74));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = (int*)pMode /*[VT_USERDEFINED:1]*/;
  _args[4] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::SetFeedrate(long Control/*[in]*/, long coord/*[in]*/, 
                             Pcommserverlib_tlb::NCFEEDRATEMODE mode/*[in]*/, double newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetFeedrate"), DISPID(75));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = (int)mode /*[VT_USERDEFINED:0]*/;
  _args[4] = newVal /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_ThreadLead(long Control/*[in]*/, long coord/*[in]*/, 
                                double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ThreadLead"), DISPID(76));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IPmacNCDispT<T>::get_ThreadLead(long Control/*[in]*/, long coord/*[in]*/)
{
  double pVal;
  this->get_ThreadLead(Control, coord, (double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_ThreadLead(long Control/*[in]*/, long coord/*[in]*/, double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ThreadLead"), DISPID(76));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetNumOfTools(long Control/*[in]*/, long coord/*[in]*/, long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNumOfTools"), DISPID(77));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_CurrentToolNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                       long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentToolNumber"), DISPID(78));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacNCDispT<T>::get_CurrentToolNumber(long Control/*[in]*/, long coord/*[in]*/)
{
  long pVal;
  this->get_CurrentToolNumber(Control, coord, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_CurrentToolNumber(long Control/*[in]*/, long coord/*[in]*/, long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentToolNumber"), DISPID(78));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_NextToolNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                    long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("NextToolNumber"), DISPID(79));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacNCDispT<T>::get_NextToolNumber(long Control/*[in]*/, long coord/*[in]*/)
{
  long pVal;
  this->get_NextToolNumber(Control, coord, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_NextToolNumber(long Control/*[in]*/, long coord/*[in]*/, long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("NextToolNumber"), DISPID(79));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_CurrentToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                             long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentToolHolderNumber"), DISPID(80));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacNCDispT<T>::get_CurrentToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/)
{
  long pVal;
  this->get_CurrentToolHolderNumber(Control, coord, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_CurrentToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/, 
                                             long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentToolHolderNumber"), DISPID(80));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::SetToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                                     long holder/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetToolHolderNumber"), DISPID(81));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = tool /*[VT_I4:0]*/;
  _args[4] = holder /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetToolHolderNumber(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                                     long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetToolHolderNumber"), DISPID(82));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = tool /*[VT_I4:0]*/;
  _args[4] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::ZeroAllToolOffsets(long Control/*[in]*/, long coord/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZeroAllToolOffsets"), DISPID(83));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetTypeToolOffset(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                                   BSTR chAxis/*[in]*/, 
                                   Pcommserverlib_tlb::NCTOOLOFSTYPE type/*[in]*/, 
                                   VARIANT_BOOL bMetric/*[in]*/, double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetTypeToolOffset"), DISPID(84));
  TAutoArgs<7> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = tool /*[VT_I4:0]*/;
  _args[4] = chAxis /*[VT_BSTR:0]*/;
  _args[5] = (int)type /*[VT_USERDEFINED:0]*/;
  _args[6] = bMetric /*[VT_BOOL:0]*/;
  _args[7] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::SetTypeToolOffset(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                                   BSTR chAxis/*[in]*/, 
                                   Pcommserverlib_tlb::NCTOOLOFSTYPE type/*[in]*/, 
                                   VARIANT_BOOL bMetric/*[in]*/, VARIANT_BOOL bConfirm/*[in]*/, 
                                   double newVal/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetTypeToolOffset"), DISPID(85));
  TAutoArgs<9> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = tool /*[VT_I4:0]*/;
  _args[4] = chAxis /*[VT_BSTR:0]*/;
  _args[5] = (int)type /*[VT_USERDEFINED:0]*/;
  _args[6] = bMetric /*[VT_BOOL:0]*/;
  _args[7] = bConfirm /*[VT_BOOL:0]*/;
  _args[8] = newVal /*[VT_R8:0]*/;
  _args[9] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_ToolInSpindle(long Control/*[in]*/, long coord/*[in]*/, 
                                   long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToolInSpindle"), DISPID(86));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacNCDispT<T>::get_ToolInSpindle(long Control/*[in]*/, long coord/*[in]*/)
{
  long pVal;
  this->get_ToolInSpindle(Control, coord, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_ToolInSpindle(long Control/*[in]*/, long coord/*[in]*/, long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToolInSpindle"), DISPID(86));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_ToolDirection(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                                   Pcommserverlib_tlb::NCTOOLDIRECTION* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToolDirection"), DISPID(87));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = tool /*[VT_I4:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Pcommserverlib_tlb::NCTOOLDIRECTION __fastcall
IPmacNCDispT<T>::get_ToolDirection(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/)
{
  Pcommserverlib_tlb::NCTOOLDIRECTION pVal;
  this->get_ToolDirection(Control, coord, tool, (Pcommserverlib_tlb::NCTOOLDIRECTION*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_ToolDirection(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                                   Pcommserverlib_tlb::NCTOOLDIRECTION pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ToolDirection"), DISPID(87));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = tool /*[VT_I4:0]*/;
  _args[4] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_SpindleCountsPerRev(long Control/*[in]*/, double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleCountsPerRev"), DISPID(88));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IPmacNCDispT<T>::get_SpindleCountsPerRev(long Control/*[in]*/)
{
  double pVal;
  this->get_SpindleCountsPerRev(Control, (double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_SpindleCountsPerRev(long Control/*[in]*/, double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleCountsPerRev"), DISPID(88));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_SpindleGearRatio(long Control/*[in]*/, double* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleGearRatio"), DISPID(89));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_R8:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> double __fastcall
IPmacNCDispT<T>::get_SpindleGearRatio(long Control/*[in]*/)
{
  double pVal;
  this->get_SpindleGearRatio(Control, (double*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_SpindleGearRatio(long Control/*[in]*/, double pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleGearRatio"), DISPID(89));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_R8:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_SpindleDetect(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleDetect"), DISPID(90));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacNCDispT<T>::get_SpindleDetect(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_SpindleDetect(Control, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_SpindleDetect(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleDetect"), DISPID(90));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_SpindleAtSpeed(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleAtSpeed"), DISPID(91));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacNCDispT<T>::get_SpindleAtSpeed(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_SpindleAtSpeed(Control, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_SpindleAtSpeed(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleAtSpeed"), DISPID(91));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_SpindleAtZero(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleAtZero"), DISPID(92));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacNCDispT<T>::get_SpindleAtZero(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_SpindleAtZero(Control, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_SpindleAtZero(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleAtZero"), DISPID(92));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_SpindleFPR(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleFPR"), DISPID(93));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacNCDispT<T>::get_SpindleFPR(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_SpindleFPR(Control, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_SpindleFPR(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleFPR"), DISPID(93));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_HomeInit(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HomeInit"), DISPID(94));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacNCDispT<T>::get_HomeInit(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_HomeInit(Control, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_HomeInit(long Control/*[in]*/, VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HomeInit"), DISPID(94));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_HomeMotorMask(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HomeMotorMask"), DISPID(96));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacNCDispT<T>::get_HomeMotorMask(long Control/*[in]*/)
{
  long pVal;
  this->get_HomeMotorMask(Control, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_HomeMotorMask(long Control/*[in]*/, long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("HomeMotorMask"), DISPID(96));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetActiveGCode(long Control/*[in]*/, long coord/*[in]*/, long group/*[in]*/, 
                                double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetActiveGCode"), DISPID(97));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = group /*[VT_I4:0]*/;
  _args[4] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetActiveGCodeStr(long Control/*[in]*/, long coord/*[in]*/, long group/*[in]*/, 
                                   BSTR* pVal/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetActiveGCodeStr"), DISPID(98));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = group /*[VT_I4:0]*/;
  _args[4] = pVal /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetToolOffset(long Control/*[in]*/, long coord/*[in]*/, long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetToolOffset"), DISPID(99));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetCompOffset(long Control/*[in]*/, long coord/*[in]*/, long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCompOffset"), DISPID(100));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::UpdateAllMotors(long Control/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("UpdateAllMotors"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetOperatingTime(long Control/*[in]*/, long* pDays/*[out]*/, long* pHours/*[out]*/
                                  , long* pMinutes/*[out]*/, long* pSeconds/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetOperatingTime"), DISPID(102));
  TAutoArgs<5> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pDays /*[VT_I4:1]*/;
  _args[3] = pHours /*[VT_I4:1]*/;
  _args[4] = pMinutes /*[VT_I4:1]*/;
  _args[5] = pSeconds /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetTotalCuttingTime(long Control/*[in]*/, long* pDays/*[out]*/, 
                                     long* pHours/*[out]*/, long* pMinutes/*[out]*/, 
                                     long* pSeconds/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetTotalCuttingTime"), DISPID(103));
  TAutoArgs<5> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pDays /*[VT_I4:1]*/;
  _args[3] = pHours /*[VT_I4:1]*/;
  _args[4] = pMinutes /*[VT_I4:1]*/;
  _args[5] = pSeconds /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetRunningTime(long Control/*[in]*/, long* pDays/*[out]*/, long* pHours/*[out]*/, 
                                long* pMinutes/*[out]*/, long* pSeconds/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetRunningTime"), DISPID(104));
  TAutoArgs<5> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pDays /*[VT_I4:1]*/;
  _args[3] = pHours /*[VT_I4:1]*/;
  _args[4] = pMinutes /*[VT_I4:1]*/;
  _args[5] = pSeconds /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetPartTime(long Control/*[in]*/, long* pHours/*[out]*/, long* pMinutes/*[out]*/, 
                             long* pSeconds/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetPartTime"), DISPID(105));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pHours /*[VT_I4:1]*/;
  _args[3] = pMinutes /*[VT_I4:1]*/;
  _args[4] = pSeconds /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetCycleCuttingTime(long Control/*[in]*/, long* pHours/*[out]*/, 
                                     long* pMinutes/*[out]*/, long* pSeconds/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCycleCuttingTime"), DISPID(106));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pHours /*[VT_I4:1]*/;
  _args[3] = pMinutes /*[VT_I4:1]*/;
  _args[4] = pSeconds /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetCycleTime(long Control/*[in]*/, long* pHours/*[out]*/, long* pMinutes/*[out]*/, 
                              long* Seconds/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCycleTime"), DISPID(107));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pHours /*[VT_I4:1]*/;
  _args[3] = pMinutes /*[VT_I4:1]*/;
  _args[4] = Seconds /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_PartsRequired(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PartsRequired"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacNCDispT<T>::get_PartsRequired(long Control/*[in]*/)
{
  long pVal;
  this->get_PartsRequired(Control, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_PartsRequired(long Control/*[in]*/, long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PartsRequired"), DISPID(108));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_PartsCount(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PartsCount"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacNCDispT<T>::get_PartsCount(long Control/*[in]*/)
{
  long pVal;
  this->get_PartsCount(Control, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_PartsCount(long Control/*[in]*/, long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PartsCount"), DISPID(109));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_PartsTotal(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("PartsTotal"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacNCDispT<T>::get_PartsTotal(long Control/*[in]*/)
{
  long pVal;
  this->get_PartsTotal(Control, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_PartsTotal(long Control/*[in]*/, long pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("PartsTotal"), DISPID(110));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_I4:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetNumDisplayedAxis(long Control/*[in]*/, long coord/*[in]*/, long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNumDisplayedAxis"), DISPID(111));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetNumDisplayAxisTotal(long Control/*[in]*/, long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNumDisplayAxisTotal"), DISPID(112));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetMotorPosStr(long Control/*[in]*/, long coord/*[in]*/, long motor/*[in]*/, 
                                Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/, 
                                VARIANT_BOOL bCombined/*[in]*/, BSTR* pAdr/*[in,out]*/, 
                                BSTR* pPos/*[in,out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMotorPosStr"), DISPID(113));
  TAutoArgs<8> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = motor /*[VT_I4:0]*/;
  _args[4] = (int)t /*[VT_USERDEFINED:0]*/;
  _args[5] = bCombined /*[VT_BOOL:0]*/;
  _args[6] = pAdr /*[VT_BSTR:1]*/;
  _args[7] = pPos /*[VT_BSTR:1]*/;
  _args[8] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_IsSpindle(long Control/*[in]*/, long coord/*[in]*/, long motor/*[in]*/, 
                               VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsSpindle"), DISPID(114));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = motor /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacNCDispT<T>::get_IsSpindle(long Control/*[in]*/, long coord/*[in]*/, long motor/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_IsSpindle(Control, coord, motor, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_IsSpindle(long Control/*[in]*/, long coord/*[in]*/, long motor/*[in]*/, 
                               VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsSpindle"), DISPID(114));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = motor /*[VT_I4:0]*/;
  _args[4] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_IsDisplayed(long Control/*[in]*/, long coord/*[in]*/, long motor/*[in]*/, 
                                 VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDisplayed"), DISPID(115));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = motor /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacNCDispT<T>::get_IsDisplayed(long Control/*[in]*/, long coord/*[in]*/, long motor/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_IsDisplayed(Control, coord, motor, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_IsDisplayed(long Control/*[in]*/, long coord/*[in]*/, long motor/*[in]*/, 
                                 VARIANT_BOOL pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("IsDisplayed"), DISPID(115));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = motor /*[VT_I4:0]*/;
  _args[4] = pVal /*[VT_BOOL:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetMotorUnitsStr(long Control/*[in]*/, long coord/*[in]*/, long motor/*[in]*/, 
                                  BSTR* pVal/*[in,out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMotorUnitsStr"), DISPID(116));
  TAutoArgs<5> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = motor /*[VT_I4:0]*/;
  _args[4] = pVal /*[VT_BSTR:1]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetProgramLines(long Control/*[in]*/, long coord/*[in]*/, long start/*[in]*/, 
                                 long count/*[in]*/, VARIANT* pVal/*[in,out]*/, 
                                 VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetProgramLines"), DISPID(117));
  TAutoArgs<6> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = start /*[VT_I4:0]*/;
  _args[4] = count /*[VT_I4:0]*/;
  _args[5] = pVal /*[VT_VARIANT:1]*/;
  _args[6] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetProgramLine(long Control/*[in]*/, long coord/*[in]*/, long lineNumber/*[in]*/, 
                                BSTR* pVal/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetProgramLine"), DISPID(118));
  TAutoArgs<5> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = lineNumber /*[VT_I4:0]*/;
  _args[4] = pVal /*[VT_BSTR:1]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetInputLong(long Control/*[in]*/, long num/*[in]*/, long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetInputLong"), DISPID(119));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = num /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetOutputLong(long Control/*[in]*/, long num/*[in]*/, long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetOutputLong"), DISPID(120));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = num /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetCommandLong(long Control/*[in]*/, long num/*[in]*/, long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetCommandLong"), DISPID(121));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = num /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetStatusLong(long Control/*[in]*/, long num/*[in]*/, long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetStatusLong"), DISPID(122));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = num /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_HomeInProgress(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("HomeInProgress"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacNCDispT<T>::get_HomeInProgress(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_HomeInProgress(Control, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_SpindleCmdRPM(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("SpindleCmdRPM"), DISPID(124));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacNCDispT<T>::get_SpindleCmdRPM(long Control/*[in]*/)
{
  long pVal;
  this->get_SpindleCmdRPM(Control, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::command(long Control/*[in]*/, long id/*[in]*/, long iv/*[in]*/, double fv/*[in]*/, 
                         BSTR bStr/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("command"), DISPID(125));
  TAutoArgs<6> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = id /*[VT_I4:0]*/;
  _args[3] = iv /*[VT_I4:0]*/;
  _args[4] = fv /*[VT_R8:0]*/;
  _args[5] = bStr /*[VT_BSTR:0]*/;
  _args[6] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::AddErrorRecord(long Control/*[in]*/, long errnum/*[in]*/, 
                                Pcommserverlib_tlb::NCERRORMODE em/*[in]*/, 
                                Pcommserverlib_tlb::NCERRORTYPE et/*[in]*/, long Line/*[in]*/, 
                                short ax/*[in]*/, BSTR Msg/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AddErrorRecord"), DISPID(126));
  TAutoArgs<7> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = errnum /*[VT_I4:0]*/;
  _args[3] = (int)em /*[VT_USERDEFINED:0]*/;
  _args[4] = (int)et /*[VT_USERDEFINED:0]*/;
  _args[5] = Line /*[VT_I4:0]*/;
  _args[6] = ax /*[VT_I2:0]*/;
  _args[7] = Msg /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetParametricDouble(long Control/*[in]*/, long coord/*[in]*/, BSTR region/*[in]*/, 
                                     long index/*[in]*/, double* pVal/*[out]*/, 
                                     VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetParametricDouble"), DISPID(127));
  TAutoArgs<6> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = region /*[VT_BSTR:0]*/;
  _args[4] = index /*[VT_I4:0]*/;
  _args[5] = pVal /*[VT_R8:1]*/;
  _args[6] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::SetParametricDouble(long Control/*[in]*/, long coord/*[in]*/, BSTR region/*[in]*/, 
                                     long index/*[in]*/, double newVal/*[in]*/, 
                                     VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetParametricDouble"), DISPID(128));
  TAutoArgs<6> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = region /*[VT_BSTR:0]*/;
  _args[4] = index /*[VT_I4:0]*/;
  _args[5] = newVal /*[VT_R8:0]*/;
  _args[6] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetSelectedAxisChar(long Control/*[in]*/, short* pAxChar/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetSelectedAxisChar"), DISPID(129));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pAxChar /*[VT_I2:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_CurrentErrorLevel(long Control/*[in]*/, 
                                       Pcommserverlib_tlb::NCERRORMODE* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentErrorLevel"), DISPID(130));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr((int*)pVal /*[VT_USERDEFINED:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> Pcommserverlib_tlb::NCERRORMODE __fastcall
IPmacNCDispT<T>::get_CurrentErrorLevel(long Control/*[in]*/)
{
  Pcommserverlib_tlb::NCERRORMODE pVal;
  this->get_CurrentErrorLevel(Control, (Pcommserverlib_tlb::NCERRORMODE*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::set_CurrentErrorLevel(long Control/*[in]*/, 
                                       Pcommserverlib_tlb::NCERRORMODE pVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentErrorLevel"), DISPID(130));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = (int)pVal /*[VT_USERDEFINED:0]*/;
  return OlePropertyPut(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetAxisFormat(long Control/*[in]*/, long coord/*[in]*/, short ax/*[in]*/, 
                               VARIANT_BOOL bMetric/*[in]*/, long* pLen/*[out]*/, 
                               long* pDecPlaces/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetAxisFormat"), DISPID(131));
  TAutoArgs<6> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = ax /*[VT_I2:0]*/;
  _args[4] = bMetric /*[VT_BOOL:0]*/;
  _args[5] = pLen /*[VT_I4:1]*/;
  _args[6] = pDecPlaces /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetAxisFormatStr(long Control/*[in]*/, long coord/*[in]*/, short ax/*[in]*/, 
                                  VARIANT_BOOL bMetric/*[in]*/, BSTR* pVal/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetAxisFormatStr"), DISPID(132));
  TAutoArgs<5> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = ax /*[VT_I2:0]*/;
  _args[4] = bMetric /*[VT_BOOL:0]*/;
  _args[5] = pVal /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::SetAxisFormat(long Control/*[in]*/, long coord/*[in]*/, short ax/*[in]*/, 
                               VARIANT_BOOL bMetric/*[in]*/, long len/*[in]*/, 
                               long decPlaces/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetAxisFormat"), DISPID(133));
  TAutoArgs<6> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = ax /*[VT_I2:0]*/;
  _args[4] = bMetric /*[VT_BOOL:0]*/;
  _args[5] = len /*[VT_I4:0]*/;
  _args[6] = decPlaces /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetFirstError(long Control/*[in]*/, BSTR* pHeader/*[in,out]*/, 
                               BSTR* pMessage/*[in,out]*/, BSTR* pCode/*[in,out]*/, 
                               BSTR* pFilename/*[in,out]*/, long* pCount/*[out]*/, 
                               long* pChanged/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetFirstError"), DISPID(135));
  TAutoArgs<7> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pHeader /*[VT_BSTR:1]*/;
  _args[3] = pMessage /*[VT_BSTR:1]*/;
  _args[4] = pCode /*[VT_BSTR:1]*/;
  _args[5] = pFilename /*[VT_BSTR:1]*/;
  _args[6] = pCount /*[VT_I4:1]*/;
  _args[7] = pChanged /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetNextError(long Control/*[in]*/, BSTR* pHeader/*[in,out]*/, 
                              BSTR* pMessage/*[in,out]*/, BSTR* pCode/*[in,out]*/, 
                              BSTR* pFilename/*[in,out]*/, VARIANT_BOOL* pbMore/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetNextError"), DISPID(136));
  TAutoArgs<6> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pHeader /*[VT_BSTR:1]*/;
  _args[3] = pMessage /*[VT_BSTR:1]*/;
  _args[4] = pCode /*[VT_BSTR:1]*/;
  _args[5] = pFilename /*[VT_BSTR:1]*/;
  _args[6] = pbMore /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::OffsetsUpdateClear(long Control/*[in]*/, long clearMask/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("OffsetsUpdateClear"), DISPID(137));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = clearMask /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::OffsetsUpdate(long Control/*[in]*/, long* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("OffsetsUpdate"), DISPID(138));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = pVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::ReadErrorMsgBoxText(long Control/*[in]*/, long index/*[in]*/, long* pCount/*[out]*/
                                     , BSTR* pText/*[in,out]*/, BSTR* pTitle/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("ReadErrorMsgBoxText"), DISPID(139));
  TAutoArgs<5> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = index /*[VT_I4:0]*/;
  _args[3] = pCount /*[VT_I4:1]*/;
  _args[4] = pText /*[VT_BSTR:1]*/;
  _args[5] = pTitle /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::ResetMsgBoxError(long Control/*[in]*/, long errRetVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResetMsgBoxError"), DISPID(140));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = errRetVal /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::SaveParametricVars(long Control/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SaveParametricVars"), DISPID(141));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::LoadParametricVars(long Control/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("LoadParametricVars"), DISPID(142));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::ResetCycleTime(long Control/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResetCycleTime"), DISPID(143));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetToolGuageOffset(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                                    VARIANT_BOOL bMulti/*[in]*/, short ax/*[in]*/, 
                                    VARIANT_BOOL bMetric/*[in]*/, double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetToolGuageOffset"), DISPID(144));
  TAutoArgs<7> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = tool /*[VT_I4:0]*/;
  _args[4] = bMulti /*[VT_BOOL:0]*/;
  _args[5] = ax /*[VT_I2:0]*/;
  _args[6] = bMetric /*[VT_BOOL:0]*/;
  _args[7] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::SetToolGuageOffset(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                                    VARIANT_BOOL bMulti/*[in]*/, short ax/*[in]*/, 
                                    VARIANT_BOOL bMetric/*[in]*/, double newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetToolGuageOffset"), DISPID(145));
  TAutoArgs<7> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = tool /*[VT_I4:0]*/;
  _args[4] = bMulti /*[VT_BOOL:0]*/;
  _args[5] = ax /*[VT_I2:0]*/;
  _args[6] = bMetric /*[VT_BOOL:0]*/;
  _args[7] = newVal /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::AutoSetToolOffset(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                                   short axis/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSetToolOffset"), DISPID(146));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = tool /*[VT_I4:0]*/;
  _args[4] = axis /*[VT_I2:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetOffsetValue(long Control/*[in]*/, long coord/*[in]*/, short axis/*[in]*/, 
                                Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                VARIANT_BOOL bMetric/*[in]*/, double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetOffsetValue"), DISPID(147));
  TAutoArgs<6> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = axis /*[VT_I2:0]*/;
  _args[4] = (int)t /*[VT_USERDEFINED:0]*/;
  _args[5] = bMetric /*[VT_BOOL:0]*/;
  _args[6] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::SetOffsetValue(long Control/*[in]*/, long coord/*[in]*/, short axis/*[in]*/, 
                                Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                VARIANT_BOOL bMetric/*[in]*/, VARIANT_BOOL bConfirm/*[in]*/, 
                                double newVal/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetOffsetValue"), DISPID(148));
  TAutoArgs<8> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = axis /*[VT_I2:0]*/;
  _args[4] = (int)t /*[VT_USERDEFINED:0]*/;
  _args[5] = bMetric /*[VT_BOOL:0]*/;
  _args[6] = bConfirm /*[VT_BOOL:0]*/;
  _args[7] = newVal /*[VT_R8:0]*/;
  _args[8] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::AutoSetWorkOffset(long Control/*[in]*/, long coord/*[in]*/, short axis/*[in]*/, 
                                   Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                   VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("AutoSetWorkOffset"), DISPID(149));
  TAutoArgs<5> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = axis /*[VT_I2:0]*/;
  _args[4] = (int)t /*[VT_USERDEFINED:0]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::SearchText(long Control/*[in]*/, long coord/*[in]*/, BSTR text/*[in]*/, 
                            VARIANT_BOOL bMatchCase/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SearchText"), DISPID(150));
  TAutoArgs<5> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = text /*[VT_BSTR:0]*/;
  _args[4] = bMatchCase /*[VT_BOOL:0]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::SearchTextNext(long Control/*[in]*/, long coord/*[in]*/, BSTR text/*[in]*/, 
                                VARIANT_BOOL bMatchCase/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SearchTextNext"), DISPID(151));
  TAutoArgs<5> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = text /*[VT_BSTR:0]*/;
  _args[4] = bMatchCase /*[VT_BOOL:0]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetBufferText(long Control/*[in]*/, long coord/*[in]*/, VARIANT_BOOL bMDI/*[in]*/, 
                               BSTR* pVal/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetBufferText"), DISPID(152));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = bMDI /*[VT_BOOL:0]*/;
  _args[4] = pVal /*[VT_BSTR:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::SetBufferText(long Control/*[in]*/, long coord/*[in]*/, long repeat/*[in]*/, 
                               VARIANT_BOOL bMDI/*[in]*/, BSTR newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetBufferText"), DISPID(153));
  TAutoArgs<5> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = repeat /*[VT_I4:0]*/;
  _args[4] = bMDI /*[VT_BOOL:0]*/;
  _args[5] = newVal /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetProcessorClocks(double* pIO/*[out]*/, double* pLA/*[out]*/, 
                                    double* pParse/*[out]*/, double* pFormat/*[out]*/, 
                                    double* pWrite/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetProcessorClocks"), DISPID(154));
  TAutoArgs<5> _args;
  _args[1] = pIO /*[VT_R8:1]*/;
  _args[2] = pLA /*[VT_R8:1]*/;
  _args[3] = pParse /*[VT_R8:1]*/;
  _args[4] = pFormat /*[VT_R8:1]*/;
  _args[5] = pWrite /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_CurrentErrorCount(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("CurrentErrorCount"), DISPID(155));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacNCDispT<T>::get_CurrentErrorCount(long Control/*[in]*/)
{
  long pVal;
  this->get_CurrentErrorCount(Control, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_BlocksPerSecond(long Control/*[in]*/, long coord/*[in]*/, 
                                     long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("BlocksPerSecond"), DISPID(156));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacNCDispT<T>::get_BlocksPerSecond(long Control/*[in]*/, long coord/*[in]*/)
{
  long pVal;
  this->get_BlocksPerSecond(Control, coord, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetMetricInput(long Control/*[in]*/, long coord/*[in]*/, 
                                VARIANT_BOOL* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMetricInput"), DISPID(157));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pVal /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetToolInfo(long Control/*[in]*/, long coord/*[in]*/, long* pCurrentTool/*[out]*/, 
                             long* pNextTool/*[out]*/, long* pHolder/*[out]*/, 
                             long* pHolderTool/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetToolInfo"), DISPID(158));
  TAutoArgs<6> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pCurrentTool /*[VT_I4:1]*/;
  _args[4] = pNextTool /*[VT_I4:1]*/;
  _args[5] = pHolder /*[VT_I4:1]*/;
  _args[6] = pHolderTool /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetToolData(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                             VARIANT* pVal/*[in,out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetToolData"), DISPID(159));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = tool /*[VT_I4:0]*/;
  _args[4] = pVal /*[VT_VARIANT:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::ZeroAllTypeToolOffsets(long Control/*[in]*/, long coord/*[in]*/, 
                                        Pcommserverlib_tlb::NCTOOLOFSTYPE type/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ZeroAllTypeToolOffsets"), DISPID(160));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = (int)type /*[VT_USERDEFINED:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::SearchLine(long Control/*[in]*/, long coord/*[in]*/, long Line/*[in]*/, 
                            VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("SearchLine"), DISPID(161));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = Line /*[VT_I4:0]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetAxisMotor(long Control/*[in]*/, long coord/*[in]*/, short axis/*[in]*/, 
                              long* pMotor/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetAxisMotor"), DISPID(162));
  TAutoArgs<5> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = axis /*[VT_I2:0]*/;
  _args[4] = pMotor /*[VT_I4:1]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetMotorAxis(long Control/*[in]*/, long coord/*[in]*/, long motor/*[in]*/, 
                              short* pAxis/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMotorAxis"), DISPID(163));
  TAutoArgs<5> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = motor /*[VT_I4:0]*/;
  _args[4] = pAxis /*[VT_I2:1]*/;
  _args[5] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetMotorPos(long Control/*[in]*/, long coord/*[in]*/, long motor/*[in]*/, 
                             Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/, BSTR* pAdr/*[out]*/, 
                             double* pPos/*[out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMotorPos"), DISPID(164));
  TAutoArgs<7> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = motor /*[VT_I4:0]*/;
  _args[4] = (int)t /*[VT_USERDEFINED:0]*/;
  _args[5] = pAdr /*[VT_BSTR:1]*/;
  _args[6] = pPos /*[VT_R8:1]*/;
  _args[7] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetAllAxisPos(long Control/*[in]*/, long coord/*[in]*/, 
                               Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/, 
                               LPSAFEARRAY* pvAdrArray/*[in,out]*/, 
                               LPSAFEARRAY* pvPosArray/*[in,out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetAllAxisPos"), DISPID(165));
  TAutoArgs<6> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = (int)t /*[VT_USERDEFINED:0]*/;
  _args[4] = pvAdrArray /*[VT_SAFEARRAY:1]*/;
  _args[5] = pvPosArray /*[VT_SAFEARRAY:1]*/;
  _args[6] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetAllAxisPosStr(long Control/*[in]*/, long coord/*[in]*/, 
                                  Pcommserverlib_tlb::NCPOSTYPE t/*[in]*/, 
                                  VARIANT_BOOL bCoord/*[in]*/, LPSAFEARRAY* pvArray/*[in,out]*/, 
                                  VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetAllAxisPosStr"), DISPID(166));
  TAutoArgs<6> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = (int)t /*[VT_USERDEFINED:0]*/;
  _args[4] = bCoord /*[VT_BOOL:0]*/;
  _args[5] = pvArray /*[VT_SAFEARRAY:1]*/;
  _args[6] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetMaxFeedrates(long Control/*[in]*/, long coord/*[in]*/, 
                                 double* pMaxPerRev/*[out]*/, double* pMaxPerMinute/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetMaxFeedrates"), DISPID(167));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pMaxPerRev /*[VT_R8:1]*/;
  _args[4] = pMaxPerMinute /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::SetMaxFeedrates(long Control/*[in]*/, long coord/*[in]*/, double MaxPerRev/*[in]*/
                                 , double MaxPerMinute/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetMaxFeedrates"), DISPID(168));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = MaxPerRev /*[VT_R8:0]*/;
  _args[4] = MaxPerMinute /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::ClearOffsetValue(long Control/*[in]*/, long coord/*[in]*/, short axis/*[in]*/, 
                                  Pcommserverlib_tlb::NCCOORDTYPE t/*[in]*/, 
                                  VARIANT_BOOL bMetric/*[in]*/, double newVal/*[in]*/, 
                                  VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("ClearOffsetValue"), DISPID(169));
  TAutoArgs<7> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = axis /*[VT_I2:0]*/;
  _args[4] = (int)t /*[VT_USERDEFINED:0]*/;
  _args[5] = bMetric /*[VT_BOOL:0]*/;
  _args[6] = newVal /*[VT_R8:0]*/;
  _args[7] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetToolDataStruct(long Control/*[in]*/, long coord/*[in]*/, long tool/*[in]*/, 
                                   /*AUTO_PARAM_ERROR(Pcommserverlib_tlb::NCTOOL* pStruct)*/ TVariant&  pStruct)
{
  _TDispID _dispid(*this, OLETEXT("GetToolDataStruct"), DISPID(170));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = tool /*[VT_I4:0]*/;
  _args[4] = pStruct /*[VT_USERDEFINED:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::StartDataCollection(long Control/*[in]*/, long CollectionMSec/*[in]*/, 
                                     long BufferSize/*[in]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("StartDataCollection"), DISPID(171));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = CollectionMSec /*[VT_I4:0]*/;
  _args[3] = BufferSize /*[VT_I4:0]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::StopDataCollection(long Control/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("StopDataCollection"), DISPID(172));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::DataCollect(long Control/*[in]*/, long coord/*[in]*/, 
                             LPSAFEARRAY* pvArray/*[in,out]*/, VARIANT_BOOL* pbSuccess/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataCollect"), DISPID(173));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = pvArray /*[VT_SAFEARRAY:1]*/;
  _args[4] = pbSuccess /*[VT_BOOL:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::ResetPartsCount(long Control/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResetPartsCount"), DISPID(174));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::ResetPartsTotal(long Control/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("ResetPartsTotal"), DISPID(175));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetWorkOffset(long Control/*[in]*/, long coord/*[in]*/, 
                               Pcommserverlib_tlb::NCCOORDTYPE* t/*[out]*/, 
                               long* pExtendedVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetWorkOffset"), DISPID(176));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = (int*)t /*[VT_USERDEFINED:1]*/;
  _args[4] = pExtendedVal /*[VT_I4:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_DataCollectionEnabled(long Control/*[in]*/, VARIANT_BOOL* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataCollectionEnabled"), DISPID(177));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_BOOL:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> VARIANT_BOOL __fastcall
IPmacNCDispT<T>::get_DataCollectionEnabled(long Control/*[in]*/)
{
  VARIANT_BOOL pVal;
  this->get_DataCollectionEnabled(Control, (VARIANT_BOOL*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::get_DataCollectionResolution(long Control/*[in]*/, long* pVal/*[out,retval]*/)
{
  _TDispID _dispid(*this, OLETEXT("DataCollectionResolution"), DISPID(178));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OutRetValSetterPtr(pVal /*[VT_I4:1]*/, _args, OlePropertyGet(_dispid, _args));
}

template <class T> long __fastcall
IPmacNCDispT<T>::get_DataCollectionResolution(long Control/*[in]*/)
{
  long pVal;
  this->get_DataCollectionResolution(Control, (long*)&pVal);
  return pVal;
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::GetLatheSetXDiameter(long Control/*[in]*/, long coord/*[in]*/, 
                                      VARIANT_BOOL bMetric/*[in]*/, double* pVal/*[out]*/)
{
  _TDispID _dispid(*this, OLETEXT("GetLatheSetXDiameter"), DISPID(179));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = bMetric /*[VT_BOOL:0]*/;
  _args[4] = pVal /*[VT_R8:1]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
IPmacNCDispT<T>::SetLatheSetXDiameter(long Control/*[in]*/, long coord/*[in]*/, 
                                      VARIANT_BOOL bMetric/*[in]*/, double newVal/*[in]*/)
{
  _TDispID _dispid(*this, OLETEXT("SetLatheSetXDiameter"), DISPID(180));
  TAutoArgs<4> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = coord /*[VT_I4:0]*/;
  _args[3] = bMetric /*[VT_BOOL:0]*/;
  _args[4] = newVal /*[VT_R8:0]*/;
  return OleFunction(_dispid, _args);
}

// *********************************************************************//
// DispIntf:  _IPmacNCEvents
// Flags:     (4096) Dispatchable
// GUID:      {32C9ADDE-9F29-4658-8EC3-F1B8395FE19F}
// *********************************************************************//
template <class T> HRESULT __fastcall
_IPmacNCEventsDispT<T>::Error(long Control, Pcommserverlib_tlb::NCERRORMODE ErrMode, 
                              Pcommserverlib_tlb::NCERRORTYPE ErrType, long ErrId, long ErrLine, 
                              short ErrAxis, BSTR ErrMsg)
{
  _TDispID _dispid(/* Error */ DISPID(1));
  TAutoArgs<7> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = (int)ErrMode /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)ErrType /*[VT_USERDEFINED:0]*/;
  _args[4] = ErrId /*[VT_I4:0]*/;
  _args[5] = ErrLine /*[VT_I4:0]*/;
  _args[6] = ErrAxis /*[VT_I2:0]*/;
  _args[7] = ErrMsg /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_IPmacNCEventsDispT<T>::Message(long Control, BSTR Msg)
{
  _TDispID _dispid(/* Message */ DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = Msg /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_IPmacNCEventsDispT<T>::Progress(long Control, long Percent)
{
  _TDispID _dispid(/* Progress */ DISPID(3));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = Percent /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_IPmacNCEventsDispT<T>::MessageQuery(long Control, long msgID, BSTR Msg)
{
  _TDispID _dispid(/* MessageQuery */ DISPID(4));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = msgID /*[VT_I4:0]*/;
  _args[3] = Msg /*[VT_BSTR:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_IPmacNCEventsDispT<T>::SearchProgress(long Control, long Line)
{
  _TDispID _dispid(/* SearchProgress */ DISPID(5));
  TAutoArgs<2> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = Line /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_IPmacNCEventsDispT<T>::Change(long Control, long changeID, VARIANT vVal)
{
  _TDispID _dispid(/* Change */ DISPID(6));
  TAutoArgs<3> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = changeID /*[VT_I4:0]*/;
  _args[3] = vVal /*[VT_VARIANT:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_IPmacNCEventsDispT<T>::ClearError(long Control, Pcommserverlib_tlb::NCERRORMODE ErrMode, 
                                   Pcommserverlib_tlb::NCERRORTYPE ErrType, long ErrId, long ErrLine
                                   , short ErrAxis)
{
  _TDispID _dispid(/* ClearError */ DISPID(7));
  TAutoArgs<6> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  _args[2] = (int)ErrMode /*[VT_USERDEFINED:0]*/;
  _args[3] = (int)ErrType /*[VT_USERDEFINED:0]*/;
  _args[4] = ErrId /*[VT_I4:0]*/;
  _args[5] = ErrLine /*[VT_I4:0]*/;
  _args[6] = ErrAxis /*[VT_I2:0]*/;
  return OleFunction(_dispid, _args);
}

template <class T> HRESULT __fastcall
_IPmacNCEventsDispT<T>::DataReady(long Control)
{
  _TDispID _dispid(/* DataReady */ DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Control /*[VT_I4:0]*/;
  return OleFunction(_dispid, _args);
}

#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : PmacDevice
// Event Interface : _IPmacDeviceEvents
// *********************************************************************//
template <class T>
class TEvents_PmacDevice : public IConnectionPointImpl<T,
                                                 &DIID__IPmacDeviceEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  HRESULT         Fire_Message(long Device, BSTR Msg, VARIANT_BOOL bNewLine);
  HRESULT         Fire_Progress(long Device, long dwPercent);
  HRESULT         Fire_Error(long Device, BSTR FileName, long ErrorID, long LineNum, BSTR Line);
  HRESULT         Fire_Interrupt(long Device, long lLevel);
  HRESULT         Fire_Unsolicited(long Device, BSTR Msg);
  HRESULT         Fire_DataReady(long Device);
protected:
  _IPmacDeviceEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_PmacDevice<T>::Fire_Message(long Device, BSTR Msg, VARIANT_BOOL bNewLine)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Message(Device, Msg, bNewLine);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PmacDevice<T>::Fire_Progress(long Device, long dwPercent)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Progress(Device, dwPercent);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PmacDevice<T>::Fire_Error(long Device, BSTR FileName, long ErrorID, long LineNum, BSTR Line)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error(Device, FileName, ErrorID, LineNum, Line);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PmacDevice<T>::Fire_Interrupt(long Device, long lLevel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Interrupt(Device, lLevel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PmacDevice<T>::Fire_Unsolicited(long Device, BSTR Msg)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Unsolicited(Device, Msg);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PmacDevice<T>::Fire_DataReady(long Device)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DataReady(Device);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : PmacNC
// Event Interface : _IPmacNCEvents
// *********************************************************************//
template <class T>
class TEvents_PmacNC : public IConnectionPointImpl<T,
                                                 &DIID__IPmacNCEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  HRESULT         Fire_Error(long Control, Pcommserverlib_tlb::NCERRORMODE ErrMode, 
                             Pcommserverlib_tlb::NCERRORTYPE ErrType, long ErrId, long ErrLine, 
                             short ErrAxis, BSTR ErrMsg);
  HRESULT         Fire_Message(long Control, BSTR Msg);
  HRESULT         Fire_Progress(long Control, long Percent);
  HRESULT         Fire_MessageQuery(long Control, long msgID, BSTR Msg);
  HRESULT         Fire_SearchProgress(long Control, long Line);
  HRESULT         Fire_Change(long Control, long changeID, VARIANT vVal);
  HRESULT         Fire_ClearError(long Control, Pcommserverlib_tlb::NCERRORMODE ErrMode, 
                                  Pcommserverlib_tlb::NCERRORTYPE ErrType, long ErrId, long ErrLine, 
                                  short ErrAxis);
  HRESULT         Fire_DataReady(long Control);
protected:
  _IPmacNCEventsDisp m_EventIntfObj;
};

template <class T> HRESULT
TEvents_PmacNC<T>::Fire_Error(long Control, Pcommserverlib_tlb::NCERRORMODE ErrMode, 
                              Pcommserverlib_tlb::NCERRORTYPE ErrType, long ErrId, long ErrLine, 
                              short ErrAxis, BSTR ErrMsg)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error(Control, ErrMode, ErrType, ErrId, ErrLine, ErrAxis, ErrMsg);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PmacNC<T>::Fire_Message(long Control, BSTR Msg)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Message(Control, Msg);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PmacNC<T>::Fire_Progress(long Control, long Percent)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Progress(Control, Percent);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PmacNC<T>::Fire_MessageQuery(long Control, long msgID, BSTR Msg)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MessageQuery(Control, msgID, Msg);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PmacNC<T>::Fire_SearchProgress(long Control, long Line)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.SearchProgress(Control, Line);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PmacNC<T>::Fire_Change(long Control, long changeID, VARIANT vVal)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Change(Control, changeID, vVal);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PmacNC<T>::Fire_ClearError(long Control, Pcommserverlib_tlb::NCERRORMODE ErrMode, 
                                   Pcommserverlib_tlb::NCERRORTYPE ErrType, long ErrId, long ErrLine, 
                                   short ErrAxis)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.ClearError(Control, ErrMode, ErrType, ErrId, ErrLine, ErrAxis);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> HRESULT
TEvents_PmacNC<T>::Fire_DataReady(long Control)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DataReady(Control);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Pcommserverlib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Pcommserverlib_tlb;
#endif

#pragma option pop

#endif // PCOMMSERVERLib_TLBH
