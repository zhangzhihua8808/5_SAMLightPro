// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 2016/8/12 11:42:18 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Windows\system32\sc_x64_samlight_client_ctrl.ocx (1)
// LIBID: {22C1DCFD-1974-40FB-9193-1D299C09903C}
// LCID: 0
// Helpfile: C:\Windows\system32\samlight_client_ctrl_ocx.hlp
// HelpString: SCAPS SAM SamlightClientCtrl
// DepndLst: 
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// ************************************************************************ //
#ifndef   SAMLIGHT_CLIENT_CTRL_OCXLib_OCXH
#define   SAMLIGHT_CLIENT_CTRL_OCXLib_OCXH

#pragma option push -b -w-inl

#include <olectrls.hpp>
#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if !defined(_NO_VCL)
#include <stdvcl.hpp>
#endif  //   _NO_VCL
#include <ocxproxy.h>

#include "SAMLIGHT_CLIENT_CTRL_OCXLib_TLB.h"
namespace Samlight_client_ctrl_ocxlib_tlb
{

// *********************************************************************//
// HelpString: SCAPS SAM SamlightClientCtrl
// Version:    2.6
// *********************************************************************//


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TScSamlightClientCtrl
// Help String      : SCAPS SAM SamlightClientCtrl
// Default Interface: _DSamlight_client_ctrl_ocx
// Def. Intf. Object: _DSamlight_client_ctrl_ocxDisp
// Def. Intf. DISP? : Yes
// Event   Interface: _DSamlight_client_ctrl_ocxEvents
// TypeFlags        : (34) CanCreate Control
// *********************************************************************//

// *********************************************************************//
// Definition of closures to allow VCL handlers to catch OCX events.      
// *********************************************************************//
//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
// Proxy class to host SCAPS SAM SamlightClientCtrl in CBuilder IDE/Applications.
//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
class PACKAGE TScSamlightClientCtrl : public TOleControl
{
  OVERLOADED_PROP_METHODS;
  static TNoParam  OptParam;
  static GUID      DEF_CTL_INTF;

  // Instance of Closures to expose OCX Events as VCL ones
  //

  // Default Interace of OCX
  //
  _DSamlight_client_ctrl_ocxDisp m_OCXIntf;

  // VCL Property Getters/Setters which delegate to OCX
  //

  // Static variables used by all instances of OCX proxy
  //
  static TControlData CControlData;
  static GUID         CTL_DEF_INTF;

  // Method providing access to interface as __property 
  //
  _DSamlight_client_ctrl_ocxDisp __fastcall GetDefaultInterface();
  _DSamlight_client_ctrl_ocxDisp __fastcall GetControlInterface()
  { return GetDefaultInterface(); }

protected:
  void     __fastcall CreateControl  ();
  void     __fastcall InitControlData();

public:
  virtual  __fastcall TScSamlightClientCtrl(TComponent* AOwner) : TOleControl(AOwner)
  {};
  virtual  __fastcall TScSamlightClientCtrl(HWND        Parent) : TOleControl(Parent)
  {};

  // OCX methods
  //
  long            __fastcall ScIsRunning(void);
  long            __fastcall ScExecCommand(long CmdID);
  long            __fastcall ScChangeTextByName(BSTR EntityName, BSTR Text);
  long            __fastcall ScMarkEntityByName(BSTR EntityName, long WaitForMarkEnd);
  long            __fastcall ScIsMarking(void);
  long            __fastcall ScStopMarking(void);
  long            __fastcall ScLoadJob(BSTR FileName, long LoadEntities, long OverwriteEntities, 
                                       long LoadMaterials);
  double          __fastcall ScGetEntityOutline(BSTR EntityName, long Index);
  double          __fastcall ScGetWorkingArea(long Index);
  long            __fastcall ScOpticMatrixReset(void);
  long            __fastcall ScOpticMatrixTranslate(double X, double Y, double Z);
  long            __fastcall ScOpticMatrixRotate(double CenterX, double CenterY, double Angle);
  long            __fastcall ScSetMarkFlags(long Flags);
  long            __fastcall ScGetMarkFlags(void);
  long            __fastcall ScOpenEthernetConnection(BSTR SenderAddr, long SenderPort, 
                                                      BSTR RecipientAddr, long RecipientPort);
  long            __fastcall ScCloseEthernetConnection(void);
  long            __fastcall ScGetInterfaceVersion(void);
  long            __fastcall ScSetDoubleValue(long Type, double Value);
  double          __fastcall ScGetDoubleValue(long Type);
  long            __fastcall ScSetLongValue(long Type, long Value);
  long            __fastcall ScGetLongValue(long Type);
  long            __fastcall ScSetLongData(long Type, VARIANT* Data, BSTR FileName);
  long            __fastcall ScTranslateEntity(BSTR EntityName, double X, double Y, double Z);
  long            __fastcall ScScaleEntity(BSTR EntityName, double ScaleX, double ScaleY, 
                                           double ScaleZ);
  long            __fastcall ScRotateEntity(BSTR EntityName, double X, double Y, double Angle);
  long            __fastcall ScImport(BSTR EntityName, BSTR FileName, BSTR Type, double Resolution, 
                                      long Flags);
  long            __fastcall ScSetEntityLongData(BSTR EntityName, long DataId, long Data);
  long            __fastcall ScGetEntityLongData(BSTR EntityName, long DataId);
  long            __fastcall ScDeleteEntity(BSTR EntityName);
  long            __fastcall ScGetLongData(long Type, VARIANT* Data, BSTR FileName);
  long            __fastcall ScGetConnectionStatus(void);
  long            __fastcall ScSetStringValue(long Type, BSTR Value);
  long            __fastcall ScGetStringValue(long Type, BSTR* Value);
  long            __fastcall ScShutDown(void);
  long            __fastcall ScGetOpticMatrix(long Index, double* Value);
  long            __fastcall ScMoveAbs(double X, double Y, double Z);
  long            __fastcall ScSwitchLaser(long LaserOnOff);
  long            __fastcall ScSetPen(long pen);
  long            __fastcall ScGetPen(long* pen);
  long            __fastcall ScShowApp(long Show);
  long            __fastcall ScSetHead(long Head);
  long            __fastcall ScGetHead(long* Head);
  long            __fastcall ScSaveJob(BSTR FileName, long Flags);
  long            __fastcall ScSetEntityDoubleData(BSTR EntityName, long DataId, double Data);
  long            __fastcall ScGetEntityDoubleData(BSTR EntityName, long DataId, double* Data);
  long            __fastcall ScSetEntityStringData(BSTR EntityName, long DataId, BSTR Data);
  long            __fastcall ScGetEntityStringData(BSTR EntityName, long DataId, BSTR* Data);
  long            __fastcall ScSetStringLongValue(long Type, BSTR SValue, long LValue);
  long            __fastcall ScSetStringDblValue(long Type, BSTR SValue, double DValue);
  long            __fastcall ScGetStringDblValue(long Type, BSTR SValue, double* RValue);
  long            __fastcall ScGetIDStringData(long Type, long Index, BSTR* Data);
  long            __fastcall ScOpenTCPConnection(BSTR RecipientAddr, long RecipientPort);
  long            __fastcall ScOpenUDPConnection(BSTR SenderAddr, long SenderPort, 
                                                 BSTR RecipientAddr, long RecipientPort);
  long            __fastcall ScOpticMatrixScale(double ScaleX, double ScaleY);
  long            __fastcall ScSetPixelMapForPen(long pen, long pixel_zone0, long pixel_zone1, 
                                                 long pixel_zone2, long pixel_zone3, 
                                                 long pixel_zone4, long pixel_zone5);
  long            __fastcall ScSetMode(long Mode);
  long            __fastcall ScGetMode(long* Mode);
  long            __fastcall ScDuplicateEntity(BSTR EntityName, BSTR DuplicatedEntityName);
  long            __fastcall ScProcessFlashJob(BSTR Name, long JobNum, long Mode, long Flags);
  BSTR            __fastcall ScFlashCommand(BSTR Command, long Flags, BSTR* Return);
  long            __fastcall ScSetIDStringData(long Type, long Index, BSTR Data);
  long            __fastcall ScExport(BSTR EntityName, BSTR FileName, BSTR Type, double Resolution, 
                                      long Flags);
  long            __fastcall ScSlice(BSTR EntityName, BSTR LayerSolidName, double sliceThickness, 
                                     long doSliceOnlySelected, long doReverseDirection);
  long            __fastcall ScSetPenPathForPen(short* pen, short* enable, short* penToUse1, 
                                                int* loopOfPenToUse1, short* penToUse2, 
                                                int* loopOfPenToUse2, short* penToUse3, 
                                                int* loopOfPenToUse3, short* penToUse4, 
                                                int* loopOfPenToUse4, short* penToUse5, 
                                                int* loopOfPenToUse5);
  long            __fastcall ScGetPenPathForPen(short* pen, short* enable, short* penToUse1, 
                                                int* loopOfPenToUse1, short* penToUse2, 
                                                int* loopOfPenToUse2, short* penToUse3, 
                                                int* loopOfPenToUse3, short* penToUse4, 
                                                int* loopOfPenToUse4, short* penToUse5, 
                                                int* loopOfPenToUse5);
  long            __fastcall ScRotateEntity3D(BSTR EntityName, double px, double py, double pz, 
                                              double vx, double vy, double vz, double Angle);
  long            __fastcall ScGetEntityOutline2D(BSTR EntityName, double* MinX, double* MinY, 
                                                  double* MaxX, double* MaxY);
  long            __fastcall ScGetEntityOutline3D(BSTR EntityName, double* MinX, double* MinY, 
                                                  double* MaxX, double* MaxY, double* MinZ, 
                                                  double* MaxZ);

  // OCX properties
  //
  __property _DSamlight_client_ctrl_ocxDisp ControlInterface={ read=GetDefaultInterface };

  // Published properties
  //
__published:

  // Standard/Extended properties
  //
  __property TabStop;
  __property Align;
  __property DragCursor;
  __property DragMode;
  __property ParentShowHint;
  __property PopupMenu;
  __property ShowHint;
  __property TabOrder;
  __property Visible;
  __property OnDragDrop;
  __property OnDragOver;
  __property OnEndDrag;
  __property OnEnter;
  __property OnExit;
  __property OnStartDrag;

  // OCX properties
  //

  // OCX Events
  //
};
typedef TScSamlightClientCtrl  TScSamlightClientCtrlProxy;


// *********************************************************************//
// COM Component Proxy Class Declaration
// Component Name   : TScConnectionToolCtrl
// Help String      : ScConnectionToolCtrl
// Default Interface: SC_IConnectionToolCtrl
// Def. Intf. Object: TCOMSC_IConnectionToolCtrl
// Def. Intf. DISP? : No
// Event   Interface: SC_DConnectionToolEvents
// TypeFlags        : (2) CanCreate
// *********************************************************************//

// *********************************************************************//
// Definition of closures to allow VCL handlers to catch OCX events.      
// *********************************************************************//
typedef void __fastcall (__closure * TScConnectionToolCtrlScReceived)(System::TObject * Sender, 
                                                                      long MessageSize);
//+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
// Proxy class to host ScConnectionToolCtrl in CBuilder IDE/Applications.
//-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
class PACKAGE TScConnectionToolCtrl : public TOleControl
{
  OVERLOADED_PROP_METHODS;
  static TNoParam  OptParam;
  static GUID      DEF_CTL_INTF;

  // Instance of Closures to expose OCX Events as VCL ones
  //
  TScConnectionToolCtrlScReceived FOnScReceived;

  // Default Interace of OCX
  //
  TCOMSC_IConnectionToolCtrl m_OCXIntf;

  // VCL Property Getters/Setters which delegate to OCX
  //

  // Static variables used by all instances of OCX proxy
  //
  static int          EventDispIDs[1];
  static TControlData CControlData;
  static GUID         CTL_DEF_INTF;

  // Method providing access to interface as __property 
  //
  TCOMSC_IConnectionToolCtrl __fastcall GetDefaultInterface();
  TCOMSC_IConnectionToolCtrl __fastcall GetControlInterface()
  { return GetDefaultInterface(); }

protected:
  void     __fastcall CreateControl  ();
  void     __fastcall InitControlData();

public:
  virtual  __fastcall TScConnectionToolCtrl(TComponent* AOwner) : TOleControl(AOwner)
  {};
  virtual  __fastcall TScConnectionToolCtrl(HWND        Parent) : TOleControl(Parent)
  {};

  // OCX methods
  //
  long            __fastcall ScInitWriteBuffer(void);
  long            __fastcall ScInitReadBuffer(void);
  long            __fastcall ScOpenConnection(BSTR ListenName/*[in]*/, long ListenPort/*[in]*/, 
                                              BSTR RecipientName/*[in]*/, long RecipientPort/*[in]*/);
  long            __fastcall ScAddString(BSTR Str/*[in]*/);
  long            __fastcall ScAddLong(long Value/*[in]*/);
  long            __fastcall ScAddDouble(double Value/*[in]*/);
  BSTR            __fastcall ScGetString(void);
  long            __fastcall ScGetLong(void);
  double          __fastcall ScGetDouble(void);
  long            __fastcall ScSend(void);
  long            __fastcall ScWaitForReceived(long TimeOut/*[in]*/);
  long            __fastcall ScGetLastResult(void);
  long            __fastcall ScCreateSocket(BSTR ListenName/*[in]*/, long ListenPort/*[in]*/);
  long            __fastcall ScConnectTo(BSTR RecipientName/*[in]*/, long RecipientPort/*[in]*/);
  long            __fastcall ScClose(void);
  long            __fastcall ScGetLastError(void);

  // OCX properties
  //
  __property TCOMSC_IConnectionToolCtrl ControlInterface={ read=GetDefaultInterface };

  // Published properties
  //
__published:

  // Standard/Extended properties
  //

  // OCX properties
  //
  __property int ScConnectionType={ read=GetIntegerProp, write=SetIntegerProp, stored=false, index=2000 };
  __property int ScMode={ read=GetIntegerProp, write=SetIntegerProp, stored=false, index=2013 };

  // OCX Events
  //
  __property TScConnectionToolCtrlScReceived OnScReceived={ read=FOnScReceived, write=FOnScReceived };
};
typedef TScConnectionToolCtrl  TScConnectionToolCtrlProxy;

};     // namespace Samlight_client_ctrl_ocxlib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Samlight_client_ctrl_ocxlib_tlb;
#endif

#pragma option pop

#endif // SAMLIGHT_CLIENT_CTRL_OCXLib_OCXH
