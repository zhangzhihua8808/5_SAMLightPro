// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// The types declared in this file were generated from data read from a       
// Type Library. If this type library is explicitly or indirectly (via        
// another type library referring to this type library) re-imported, or the   
// 'Refresh' command of the Type Library Editor activated while editing the   
// Type Library, the contents of this file will be regenerated and all        
// manual modifications will be lost.                                         
// ************************************************************************ //

// C++ TLBWRTR : $Revision:   1.151.1.0.1.27  $
// File generated on 2007-11-8 17:33:06 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Program Files\Lassalle Technologies\AddFlow 5\AddFlow5.ocx (1)
// LIBID: {DE173711-6CFE-432E-A95E-F4EF3EE03231}
// LCID: 0
// Helpfile: C:\Program Files\Lassalle Technologies\AddFlow 5\AddFlow5.chm
// HelpString: Lassalle AddFlow 5 ActiveX Control version
// DepndLst: 
//   (1) v2.0 stdole, (C:\WINDOWS\system32\stdole2.tlb)
// ************************************************************************ //
#ifndef   AddFlow5Lib_TLBH
#define   AddFlow5Lib_TLBH

#pragma option push -b -w-inl

#include <utilcls.h>
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0600)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary 
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an 
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif


// *********************************************************************//
// Forward reference of some VCL types (to avoid including STDVCL.HPP)    
// *********************************************************************//
namespace Stdvcl {class IStrings; class IStringsDisp;}
using namespace Stdvcl;
typedef TComInterface<IStrings> IStringsPtr;
typedef TComInterface<IStringsDisp> IStringsDispPtr;

namespace Addflow5lib_tlb
{

// *********************************************************************//
// HelpString: Lassalle AddFlow 5 ActiveX Control version
// Version:    5.4
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:        
//   Type Libraries     : LIBID_xxxx                                      
//   CoClasses          : CLSID_xxxx                                      
//   DISPInterfaces     : DIID_xxxx                                       
//   Non-DISP interfaces: IID_xxxx                                        
// *********************************************************************//
extern __declspec (package) const GUID LIBID_AddFlow5Lib;
extern __declspec (package) const GUID GUID_OldLinkStyleConstants;
extern __declspec (package) const GUID GUID_ShadowConstants;
extern __declspec (package) const GUID GUID_LinkStyleConstants;
extern __declspec (package) const GUID GUID_BorderStyleConstants;
extern __declspec (package) const GUID GUID_MousePointerConstants;
extern __declspec (package) const GUID GUID_OldShapeConstants;
extern __declspec (package) const GUID GUID_ShapeConstants;
extern __declspec (package) const GUID GUID_ShapeOrientationConstants;
extern __declspec (package) const GUID GUID_ScrollBarsConstants;
extern __declspec (package) const GUID GUID_SelectActionConstants;
extern __declspec (package) const GUID GUID_GridStyleConstants;
extern __declspec (package) const GUID GUID_AppearanceConstants;
extern __declspec (package) const GUID GUID_DrawStyleConstants;
extern __declspec (package) const GUID GUID_AlignmentConstants;
extern __declspec (package) const GUID GUID_ArrowConstants;
extern __declspec (package) const GUID GUID_ObsoleteArrowConstants;
extern __declspec (package) const GUID GUID_AutoSizeConstants;
extern __declspec (package) const GUID GUID_UserActionConstants;
extern __declspec (package) const GUID GUID_PointedAreaConstants;
extern __declspec (package) const GUID GUID_SaveImageMediumConstants;
extern __declspec (package) const GUID GUID_SaveImageFormatConstants;
extern __declspec (package) const GUID GUID_ItemSetConstants;
extern __declspec (package) const GUID GUID_PicturePositionConstants;
extern __declspec (package) const GUID GUID_LinkCreationModeConstants;
extern __declspec (package) const GUID GUID_EditModeConstants;
extern __declspec (package) const GUID GUID_EditHardReturnConstants;
extern __declspec (package) const GUID GUID_BackModeConstants;
extern __declspec (package) const GUID GUID_HandleSizeConstants;
extern __declspec (package) const GUID GUID_FilterConstants;
extern __declspec (package) const GUID GUID_EllipsisConstants;
extern __declspec (package) const GUID GUID_DrawMethodConstants;
extern __declspec (package) const GUID GUID_ShowPropertyPagesConstants;
extern __declspec (package) const GUID GUID_ShowJumpConstants;
extern __declspec (package) const GUID GUID_ActionConstants;
extern __declspec (package) const GUID GUID_CycleModeConstants;
extern __declspec (package) const GUID GUID_ArrowSizeConstants;
extern __declspec (package) const GUID GUID_RemovePointAngleConstants;
extern __declspec (package) const GUID GUID_AddFlowErrorConstants;
extern __declspec (package) const GUID GUID_JumpSizeConstants;
extern __declspec (package) const GUID GUID_RoundSizeConstants;
extern __declspec (package) const GUID GUID_StartMethodConstants;
extern __declspec (package) const GUID GUID_NodeDrawFlags;
extern __declspec (package) const GUID GUID_LinkDrawFlags;
extern __declspec (package) const GUID GUID_DrawFlags;
extern __declspec (package) const GUID GUID_GradientConstants;
extern __declspec (package) const GUID DIID__DAddFlow;
extern __declspec (package) const GUID DIID_INodes;
extern __declspec (package) const GUID CLSID_afNodes;
extern __declspec (package) const GUID DIID_INode;
extern __declspec (package) const GUID CLSID_afNode;
extern __declspec (package) const GUID DIID_ILinks;
extern __declspec (package) const GUID CLSID_afLinks;
extern __declspec (package) const GUID DIID_ILink;
extern __declspec (package) const GUID CLSID_afLink;
extern __declspec (package) const GUID DIID_ILinkPoints;
extern __declspec (package) const GUID CLSID_afLinkPoints;
extern __declspec (package) const GUID DIID_ILinkPoint;
extern __declspec (package) const GUID CLSID_afLinkPoint;
extern __declspec (package) const GUID DIID_ISelNodes;
extern __declspec (package) const GUID CLSID_afSelNodes;
extern __declspec (package) const GUID DIID_ISelLinks;
extern __declspec (package) const GUID CLSID_afSelLinks;
extern __declspec (package) const GUID DIID_IPictures;
extern __declspec (package) const GUID CLSID_afPictures;
extern __declspec (package) const GUID DIID_ICustomShapes;
extern __declspec (package) const GUID CLSID_afCustomShapes;
extern __declspec (package) const GUID DIID_ICustomShape;
extern __declspec (package) const GUID CLSID_afCustomShape;
extern __declspec (package) const GUID DIID__DAddFlowEvents;
extern __declspec (package) const GUID CLSID_AddFlow;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary                    
// *********************************************************************//
enum      OldLinkStyleConstants;
enum      ShadowConstants;
enum      LinkStyleConstants;
enum      BorderStyleConstants;
enum      MousePointerConstants;
enum      OldShapeConstants;
enum      ShapeConstants;
enum      ShapeOrientationConstants;
enum      ScrollBarsConstants;
enum      SelectActionConstants;
enum      GridStyleConstants;
enum      AppearanceConstants;
enum      DrawStyleConstants;
enum      AlignmentConstants;
enum      ArrowConstants;
enum      ObsoleteArrowConstants;
enum      AutoSizeConstants;
enum      UserActionConstants;
enum      PointedAreaConstants;
enum      SaveImageMediumConstants;
enum      SaveImageFormatConstants;
enum      ItemSetConstants;
enum      PicturePositionConstants;
enum      LinkCreationModeConstants;
enum      EditModeConstants;
enum      EditHardReturnConstants;
enum      BackModeConstants;
enum      HandleSizeConstants;
enum      FilterConstants;
enum      EllipsisConstants;
enum      DrawMethodConstants;
enum      ShowPropertyPagesConstants;
enum      ShowJumpConstants;
enum      ActionConstants;
enum      CycleModeConstants;
enum      ArrowSizeConstants;
enum      RemovePointAngleConstants;
enum      AddFlowErrorConstants;
enum      JumpSizeConstants;
enum      RoundSizeConstants;
enum      StartMethodConstants;
enum      NodeDrawFlags;
enum      LinkDrawFlags;
enum      DrawFlags;
enum      GradientConstants;
interface DECLSPEC_UUID("{BF12FD4C-504D-4B4D-AC66-210BF90EE59C}") _DAddFlow;
typedef TComInterface<_DAddFlow, &DIID__DAddFlow> _DAddFlowPtr;

interface DECLSPEC_UUID("{15078B02-F53D-4CEE-8932-4AA0BFA472B3}") INodes;
typedef TComInterface<INodes, &DIID_INodes> INodesPtr;

interface DECLSPEC_UUID("{62BDF910-DED7-42EA-B8CE-B1284A2F07D9}") INode;
typedef TComInterface<INode, &DIID_INode> INodePtr;

interface DECLSPEC_UUID("{AA91F32C-DC66-4628-AFC7-05EB72B637D7}") ILinks;
typedef TComInterface<ILinks, &DIID_ILinks> ILinksPtr;

interface DECLSPEC_UUID("{1937F811-DFDA-4223-8F31-BDC1D0D16767}") ILink;
typedef TComInterface<ILink, &DIID_ILink> ILinkPtr;

interface DECLSPEC_UUID("{E625F3B1-CB36-4ABA-8FAF-E5E6B1A7A72B}") ILinkPoints;
typedef TComInterface<ILinkPoints, &DIID_ILinkPoints> ILinkPointsPtr;

interface DECLSPEC_UUID("{3C98496E-F2CA-43BE-A0C3-8EB1C2FA9259}") ILinkPoint;
typedef TComInterface<ILinkPoint, &DIID_ILinkPoint> ILinkPointPtr;

interface DECLSPEC_UUID("{54BBB3DA-D31C-4471-8C2F-C68A074B3D1C}") ISelNodes;
typedef TComInterface<ISelNodes, &DIID_ISelNodes> ISelNodesPtr;

interface DECLSPEC_UUID("{75795457-BA5C-4322-A818-D62B7FF7C0D3}") ISelLinks;
typedef TComInterface<ISelLinks, &DIID_ISelLinks> ISelLinksPtr;

interface DECLSPEC_UUID("{9BDEDFA3-5C40-4BCE-B1C5-4D3E40E0F8A2}") IPictures;
typedef TComInterface<IPictures, &DIID_IPictures> IPicturesPtr;

interface DECLSPEC_UUID("{77BF7BAC-C68A-40F7-8B1A-F62DE2980D59}") ICustomShapes;
typedef TComInterface<ICustomShapes, &DIID_ICustomShapes> ICustomShapesPtr;

interface DECLSPEC_UUID("{1B61DB7B-D136-4EB6-A462-DF9AEF115812}") ICustomShape;
typedef TComInterface<ICustomShape, &DIID_ICustomShape> ICustomShapePtr;

interface DECLSPEC_UUID("{9431AEF2-26DB-42B6-869F-48D0C9763F08}") _DAddFlowEvents;
typedef TComInterface<_DAddFlowEvents, &DIID__DAddFlowEvents> _DAddFlowEventsPtr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library                       
// (NOTE: Here we map each CoClass to its Default Interface)              
//                                                                        
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this  
// TypeLibrary. It simplifies the updating of macros when CoClass name    
// change.                                                                
// *********************************************************************//
typedef INodes afNodes;
typedef INodesPtr afNodesPtr;
typedef INode afNode;
typedef INodePtr afNodePtr;
typedef ILinks afLinks;
typedef ILinksPtr afLinksPtr;
typedef ILink afLink;
typedef ILinkPtr afLinkPtr;
typedef ILinkPoints afLinkPoints;
typedef ILinkPointsPtr afLinkPointsPtr;
typedef ILinkPoint afLinkPoint;
typedef ILinkPointPtr afLinkPointPtr;
typedef ISelNodes afSelNodes;
typedef ISelNodesPtr afSelNodesPtr;
typedef ISelLinks afSelLinks;
typedef ISelLinksPtr afSelLinksPtr;
typedef IPictures afPictures;
typedef IPicturesPtr afPicturesPtr;
typedef ICustomShapes afCustomShapes;
typedef ICustomShapesPtr afCustomShapesPtr;
typedef ICustomShape afCustomShape;
typedef ICustomShapePtr afCustomShapePtr;
typedef _DAddFlow AddFlow;
typedef _DAddFlowPtr AddFlowPtr;

#define LIBID_OF_afNodes (&LIBID_AddFlow5Lib)
#define LIBID_OF_afNode (&LIBID_AddFlow5Lib)
#define LIBID_OF_afLinks (&LIBID_AddFlow5Lib)
#define LIBID_OF_afLink (&LIBID_AddFlow5Lib)
#define LIBID_OF_afLinkPoints (&LIBID_AddFlow5Lib)
#define LIBID_OF_afLinkPoint (&LIBID_AddFlow5Lib)
#define LIBID_OF_afSelNodes (&LIBID_AddFlow5Lib)
#define LIBID_OF_afSelLinks (&LIBID_AddFlow5Lib)
#define LIBID_OF_afPictures (&LIBID_AddFlow5Lib)
#define LIBID_OF_afCustomShapes (&LIBID_AddFlow5Lib)
#define LIBID_OF_afCustomShape (&LIBID_AddFlow5Lib)
#define LIBID_OF_AddFlow (&LIBID_AddFlow5Lib)

// *********************************************************************//
// Declaration of Enumerations defined in Type Library                    
// *********************************************************************//
typedef enum OldLinkStyleConstants
{
  afVerticalHorizontal = 2, 
  afHorizontalVertical = 3, 
  afVerticalHorizontalVertical = 4, 
  afHorizontalVerticalHorizontal = 5
} OldLinkStyleConstants;

typedef enum ShadowConstants
{
  afNoShadow = 0, 
  afRightBottomShadow = 1, 
  afRightTopShadow = 2, 
  afLeftTopShadow = 3, 
  afLeftBottomShadow = 4
} ShadowConstants;

typedef enum LinkStyleConstants
{
  afPolyline = 0, 
  afBezier = 1, 
  afVH = 2, 
  afHV = 3, 
  afVHV = 4, 
  afHVH = 5, 
  afVHVH = 6, 
  afHVHV = 7, 
  afVHVHV = 8, 
  afHVHVH = 9, 
  afVHVHVH = 10, 
  afHVHVHV = 11, 
  afVHVHVHV = 12, 
  afHVHVHVH = 13, 
  afSpline = 14
} LinkStyleConstants;

typedef enum BorderStyleConstants
{
  afNoBorder = 0, 
  afFixedSingle = 1
} BorderStyleConstants;

typedef enum MousePointerConstants
{
  afDefault = 0, 
  afArrow = 1, 
  afCross = 2, 
  afIBeam = 3, 
  afIcon = 4, 
  afSize = 5, 
  afSizeNESW = 6, 
  afSizeNS = 7, 
  afSizeNWSE = 8, 
  afSizeEW = 9, 
  afUpArrow = 10, 
  afHourglass = 11, 
  afNoDrop = 12, 
  afArrowHourglass = 13, 
  afArrowQuestion = 14, 
  afSizeAll = 15, 
  afCustom = 99
} MousePointerConstants;

typedef enum OldShapeConstants
{
  afDiamond = 3
} OldShapeConstants;

typedef enum ShapeConstants
{
  afEllipse = 0, 
  afRectangle = 1, 
  afRoundRect = 2, 
  afLosange = 3, 
  afNorthTriangle = 4, 
  afSouthTriangle = 5, 
  afEastTriangle = 6, 
  afWestTriangle = 7, 
  afHexagon = 8, 
  afRectEdgeBump = 9, 
  afRectEdgeEtched = 10, 
  afRectEdgeRaised = 11, 
  afRectEdgeSunken = 12, 
  afTriangleRectangle = 13, 
  afPentagon = 14, 
  afOctogon = 15, 
  afProcess = 50, 
  afAlternateProcess = 51, 
  afDecision = 52, 
  afData = 53, 
  afPredefinedProcess = 54, 
  afInternalStorage = 55, 
  afDocument = 56, 
  afMultiDocument = 57, 
  afTermination = 58, 
  afPreparation = 59, 
  afManualInput = 60, 
  afManualOperation = 61, 
  afConnector = 62, 
  afOffPageConnection = 63, 
  afCard = 64, 
  afPunchedTape = 65, 
  afSummingJunction = 66, 
  afOr = 67, 
  afCollate = 68, 
  afSort = 69, 
  afExtract = 70, 
  afMerge = 71, 
  afStoredData = 72, 
  afDelay = 73, 
  afSequentialAccessStorage = 74, 
  afMagneticDisk = 75, 
  afDirectAccessStorage = 76, 
  afDisplay = 77, 
  afTransport = 78, 
  afProcessIso9000 = 79, 
  afOrGate = 80, 
  afCustomShape_ = 100
} ShapeConstants;

typedef enum ShapeOrientationConstants
{
  afAngle0 = 0, 
  afAngle90 = 1, 
  afAngle180 = 2, 
  afAngle270 = 3
} ShapeOrientationConstants;

typedef enum ScrollBarsConstants
{
  afNoScroll = 0, 
  afHorizontal = 1, 
  afVertical = 2, 
  afBoth = 3
} ScrollBarsConstants;

typedef enum SelectActionConstants
{
  afNoSelection = 0, 
  afSelectItems = 1, 
  afZoomRectangle = 2, 
  afZoomRectIso = 3, 
  afDrawFocusRect = 4
} SelectActionConstants;

typedef enum GridStyleConstants
{
  afPixels = 0, 
  afLines = 1, 
  afDottedLines = 2
} GridStyleConstants;

typedef enum AppearanceConstants
{
  afFlat = 0, 
  af3D = 1
} AppearanceConstants;

typedef enum DrawStyleConstants
{
  afSolid = 0, 
  afDash = 1, 
  afDot = 2, 
  afDashDot = 3, 
  afDashDotDot = 4, 
  afTransparent = 5, 
  afInsideSolid = 6
} DrawStyleConstants;

typedef enum AlignmentConstants
{
  afLeftJustifyTOP = 0, 
  afLeftJustifyMIDDLE = 1, 
  afLeftJustifyBOTTOM = 2, 
  afRightJustifyTOP = 3, 
  afRightJustifyMIDDLE = 4, 
  afRightJustifyBOTTOM = 5, 
  afCenterTOP = 6, 
  afCenterMIDDLE = 7, 
  afCenterBOTTOM = 8
} AlignmentConstants;

typedef enum ArrowConstants
{
  afNoArrow = 0, 
  afFilledCircle = 1, 
  afEmptyCircle = 2, 
  afFilledArrow15 = 3, 
  afEmptyArrow15 = 4, 
  afFilledArrow30 = 5, 
  afEmptyArrow30 = 6, 
  afFilledArrow45 = 7, 
  afEmptyArrow45 = 8, 
  afFilledFork30 = 9, 
  afEmptyFork30 = 10, 
  afFilledClosedFork30 = 11, 
  afEmptyClosedFork30 = 12, 
  afFilledLosange45 = 13, 
  afEmptyLosange45 = 14, 
  afMany45 = 15, 
  afManyOptional45 = 16, 
  afOne30 = 17, 
  afOneOptional30 = 18, 
  afOneOrMany45 = 19, 
  afOpenedArrow15 = 20, 
  afOpenedArrow30 = 21, 
  afOpenedArrow45 = 22, 
  afFilledLosange15 = 23, 
  afFilledLosange30 = 24, 
  afEmptyLosange15 = 25, 
  afEmptyLosange30 = 26, 
  afFilledHalfArrow15 = 27, 
  afFilledHalfArrow30 = 28, 
  afFilledHalfArrow45 = 29, 
  afEmptyHalfArrow15 = 30, 
  afEmptyHalfArrow30 = 31, 
  afEmptyHalfArrow45 = 32, 
  afOpenedHalfArrow15 = 33, 
  afOpenedHalfArrow30 = 34, 
  afOpenedHalfArrow45 = 35, 
  afFilledFork15 = 36, 
  afEmptyFork15 = 37, 
  afFilledClosedFork15 = 38, 
  afEmptyClosedFork15 = 39, 
  afFilledFork45 = 40, 
  afEmptyFork45 = 41, 
  afFilledClosedFork45 = 42, 
  afEmptyClosedFork45 = 43
} ArrowConstants;

typedef enum ObsoleteArrowConstants
{
  afFilledFork = 9, 
  afEmptyFork = 10, 
  afFilledClosedFork = 11, 
  afEmptyClosedFork = 12, 
  afFilledLosange = 13, 
  afEmptyLosange = 14
} ObsoleteArrowConstants;

typedef enum AutoSizeConstants
{
  afNoAutoSize = 0, 
  afAdjustPictureSizetoNode = 1, 
  afAdjustNodeSizetoPicture = 2, 
  afAdjustNodeSizetoText = 3, 
  afAdjustNodeSizetoTextAndPicture = 4
} AutoSizeConstants;

typedef enum UserActionConstants
{
  afNoUserAction = 0, 
  afNodeCreation = 1, 
  afLinkCreation = 2, 
  afNodeDragging = 3, 
  afNodeResizing = 4, 
  afLinkStretching = 5, 
  afSelection = 6
} UserActionConstants;

typedef enum PointedAreaConstants
{
  afNWSEsizeHandle = 0, 
  afNSsizeHandle = 1, 
  afNESWsizeHandle = 2, 
  afWEsizeHandle = 3, 
  afStretchingHandle = 4, 
  afLinkingHandle = 5, 
  afNodeArea = 6, 
  afOutSide = 7, 
  afLinkArea = 8
} PointedAreaConstants;

typedef enum SaveImageMediumConstants
{
  afTypeMediumFile = 0, 
  afTypeMediumClipboard = 1
} SaveImageMediumConstants;

typedef enum SaveImageFormatConstants
{
  afWMF = 0, 
  afEMF = 1
} SaveImageFormatConstants;

typedef enum ItemSetConstants
{
  afAllItems = 0, 
  afSelectedItems = 1, 
  afMarkedItems = 2
} ItemSetConstants;

typedef enum PicturePositionConstants
{
  afPictureLeftTOP = 0, 
  afPictureLeftMIDDLE = 1, 
  afPictureLeftBOTTOM = 2, 
  afPictureRightTOP = 3, 
  afPictureRightMIDDLE = 4, 
  afPictureRightBOTTOM = 5, 
  afPictureCenterTOP = 6, 
  afPictureCenterMIDDLE = 7, 
  afPictureCenterBOTTOM = 8, 
  afRelativeToText = 9
} PicturePositionConstants;

typedef enum LinkCreationModeConstants
{
  afCenterNodeHandle = 0, 
  afAllNodeArea = 1
} LinkCreationModeConstants;

typedef enum EditModeConstants
{
  afEditNone = 0, 
  afEditMouseClick = 1, 
  afEditMouseDoubleClick = 2
} EditModeConstants;

typedef enum EditHardReturnConstants
{
  afEditCtrlReturn = 0, 
  afEditShiftReturn = 1
} EditHardReturnConstants;

typedef enum BackModeConstants
{
  afBackModeTransparent = 1, 
  afBackModeOpaque = 2
} BackModeConstants;

typedef enum HandleSizeConstants
{
  afSmallSize = 6, 
  afMediumSize = 9, 
  afLargeSize = 12
} HandleSizeConstants;

typedef enum FilterConstants
{
  afFilterAllSelectableItems = 0, 
  afFilterAllSelectableNodes = 1, 
  afFilterAllSelectableLinks = 2, 
  afFilterAllItems = 3, 
  afFilterAllNodes = 4, 
  afFilterAllLinks = 5
} FilterConstants;

typedef enum EllipsisConstants
{
  afNoEllipsis = 0, 
  afEllipsisEnd = 1, 
  afEllipsisPath = 2
} EllipsisConstants;

typedef enum DrawMethodConstants
{
  afDrawDoubleBuffer = 0, 
  afDrawNormal = 1
} DrawMethodConstants;

typedef enum ShowPropertyPagesConstants
{
  afShowNone = 0, 
  afShowNode = 1, 
  afShowLink = 2, 
  afShowNodeAndLink = 3, 
  afShowGeneral = 4, 
  afShowGeneralAndNode = 5, 
  afShowGeneralAndLink = 6, 
  afShowAll = 7
} ShowPropertyPagesConstants;

typedef enum ShowJumpConstants
{
  afNoJump = 0, 
  afArcJump = 1, 
  afBreakJump = 2
} ShowJumpConstants;

typedef enum ActionConstants
{
  afActionNone = 0, 
  afActionNodeCreate = 1, 
  afActionNodeDelete = 2, 
  afActionNodeMove = 3, 
  afActionNodeResize = 4, 
  afActionNodeLeft = 5, 
  afActionNodeTop = 6, 
  afActionNodeWidth = 7, 
  afActionNodeHeight = 8, 
  afActionNodePicture = 9, 
  afActionNodePictureIndex = 10, 
  afActionNodeFont = 11, 
  afActionNodeFillColor = 12, 
  afActionNodeDrawColor = 13, 
  afActionNodeForeColor = 14, 
  afActionNodeGradientColor = 15, 
  afActionNodeText = 16, 
  afActionNodeTag = 17, 
  afActionNodeKey = 18, 
  afActionNodeTooltip = 19, 
  afActionNodeUserdata = 20, 
  afActionNodeAutosize = 21, 
  afActionNodeShape = 22, 
  afActionNodeShapeOrientation = 23, 
  afActionNodeAlignment = 24, 
  afActionNodePicturePosition = 25, 
  afActionNodeShadow = 26, 
  afActionNodeGradient = 27, 
  afActionNodeEditMode = 28, 
  afActionNodeBackMode = 29, 
  afActionNodeDrawStyle = 30, 
  afActionNodeDrawWidth = 31, 
  afActionNodeMarked = 32, 
  afActionNodeHidden = 33, 
  afActionNodeTransparent = 34, 
  afActionNodeLogical = 35, 
  afActionNodeSelectable = 36, 
  afActionNodeMoveable = 37, 
  afActionNodeXMoveable = 38, 
  afActionNodeYMoveable = 39, 
  afActionNodeSizeable = 40, 
  afActionNodeXSizeable = 41, 
  afActionNodeYSizeable = 42, 
  afActionNodeXScrollable = 43, 
  afActionNodeYScrollable = 44, 
  afActionNodeMaxOutDegree = 45, 
  afActionNodeMaxInDegree = 46, 
  afActionNodeMaxDegree = 47, 
  afActionNodeXTextMargin = 48, 
  afActionNodeYTextMargin = 49, 
  afActionNodeCustomShapeIndex = 50, 
  afActionLinkCreate = 51, 
  afActionLinkDelete = 52, 
  afActionLinkMove = 53, 
  afActionLinkStretch = 54, 
  afActionLinkOrg = 55, 
  afActionLinkDst = 56, 
  afActionLinkReverse = 57, 
  afActionLinkPoints = 58, 
  afActionLinkFont = 59, 
  afActionLinkDrawColor = 60, 
  afActionLinkForeColor = 61, 
  afActionLinkText = 62, 
  afActionLinkTag = 63, 
  afActionLinkKey = 64, 
  afActionLinkTooltip = 65, 
  afActionLinkUserdata = 66, 
  afActionLinkDrawWidth = 67, 
  afActionLinkLinkStyle = 68, 
  afActionLinkArrowOrg = 69, 
  afActionLinkArrowMid = 70, 
  afActionLinkArrowDst = 71, 
  afActionLinkDrawStyle = 72, 
  afActionLinkBackMode = 73, 
  afActionLinkShowJump = 74, 
  afActionLinkMarked = 75, 
  afActionLinkHidden = 76, 
  afActionLinkLogical = 77, 
  afActionLinkSelectable = 78, 
  afActionLinkStretchable = 79, 
  afActionLinkOrientedText = 80, 
  afActionLinkRigid = 81, 
  afActionLinkAdjustOrg = 82, 
  afActionLinkAdjustDst = 83, 
  afActionLinkOrthogonalDynamic = 84, 
  afActionLinkTextSegment = 85, 
  afActionLinkSizeArrowDst = 86, 
  afActionLinkSizeArrowOrg = 87, 
  afActionLinkSizeArrowMid = 88, 
  afActionZOrder = 89, 
  afActionDeleteSel = 90, 
  afActionDeleteMarked = 91, 
  afActionPaste = 92, 
  afActionClearNodes = 93, 
  afActionClearLinks = 94, 
  afActionMoveItems = 95, 
  afActionNodePropertyPage = 96, 
  afActionLinkPropertyPage = 97, 
  afActionNodeTagVariant = 98, 
  afActionLinkTagVariant = 99, 
  afActionLinkRoundedCorner = 100, 
  afActionNodeOwnerDraw = 101, 
  afActionLinkOwnerDraw = 102
} ActionConstants;

typedef enum CycleModeConstants
{
  afCyclesAllowed = 0, 
  afNoCycle = 1, 
  afNoDirectedCycle = 2
} CycleModeConstants;

typedef enum ArrowSizeConstants
{
  afSmallArrow = 0, 
  afMediumArrow = 1, 
  afLargeArrow = 2
} ArrowSizeConstants;

typedef enum RemovePointAngleConstants
{
  afZeroAngle = 0, 
  afSmallAngle = 1, 
  afMediumAngle = 2, 
  afLargeAngle = 3
} RemovePointAngleConstants;

typedef enum AddFlowErrorConstants
{
  afChangedCollection = 1000, 
  afKeyNotCorrect = 1001, 
  afKeyAlreadyExist = 1002, 
  afKeyNotFound = 1003, 
  afIndexOutOfRange = 1004, 
  afCannotChangePoint = 1005, 
  afCannotChangeFirstOrLastPoint = 1006, 
  afLinkNotAttachedToNode = 1007, 
  afCycleError = 1008, 
  afOutsideAllowedArea = 1009, 
  afDuplicateKeyIgnored = 1010, 
  afDeletedItem = 1011, 
  afObjectTypeNotCorrect = 1012, 
  afInvalidData = 1013, 
  afNotSafeMethod = 1014, 
  afOutDegreeError = 1015, 
  afInDegreeError = 1016, 
  afDirectedCycleError = 1017, 
  afReflexiveLinkNotAccepted = 1018, 
  afMultipleLinkNotAccepted = 1019
} AddFlowErrorConstants;

typedef enum JumpSizeConstants
{
  afSmallJump = 0, 
  afMediumJump = 1, 
  afLargeJump = 2
} JumpSizeConstants;

typedef enum RoundSizeConstants
{
  afSmallRound = 0, 
  afMediumRound = 1, 
  afLargeRound = 2
} RoundSizeConstants;

typedef enum StartMethodConstants
{
  afAllSides = 0, 
  afTwoBestSides = 1, 
  afVerticalSides = 2, 
  afHorizontalSides = 3, 
  afBestVerticalSide = 4, 
  afBestHorizontalSide = 5
} StartMethodConstants;

typedef enum NodeDrawFlags
{
  afNodeDrawNone = 0, 
  afNodeDrawShape = 1, 
  afNodeDrawText = 2, 
  afNodeDrawPicture = 4, 
  afNodeDrawAll = 7
} NodeDrawFlags;

typedef enum LinkDrawFlags
{
  afLinkDrawNone = 0, 
  afLinkDrawShape = 1, 
  afLinkDrawArrows = 2, 
  afLinkDrawText = 4, 
  afLinkDrawAll = 7
} LinkDrawFlags;

typedef enum DrawFlags
{
  afDrawNone = 0, 
  afDrawAll = 1
} DrawFlags;

typedef enum GradientConstants
{
  afGradientNone = 0, 
  afGradientHorizontal = 1, 
  afGradientVertical = 2
} GradientConstants;

// *********************************************************************//
// Interface: _DAddFlow
// Flags:     (4112) Hidden Dispatchable
// GUID:      {BF12FD4C-504D-4B4D-AC66-210BF90EE59C}
// *********************************************************************//
interface _DAddFlow : public TDispWrapper<IDispatch>
{
  void __fastcall AboutBox()
  {
    _TDispID _dispid(/* AboutBox */ DISPID(-552));
    OleProcedure(_dispid);
  }

  Addflow5lib_tlb::afLink* __fastcall AddLink(Addflow5lib_tlb::afNode* Org, 
                                              Addflow5lib_tlb::afNode* Dst)
  {
    _TDispID _dispid(/* AddLink */ DISPID(152));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)Org /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)Dst /*[VT_USERDEFINED:1]*/;
    OleFunction(_dispid, _args);
    return (Addflow5lib_tlb::afLink* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  IPictureDisp** __fastcall ExportPagePicture(float Left, float Top, float Width, float Height)
  {
    _TDispID _dispid(/* ExportPagePicture */ DISPID(151));
    TAutoArgs<4> _args;
    _args[1] = Left /*[VT_R4:0]*/;
    _args[2] = Top /*[VT_R4:0]*/;
    _args[3] = Width /*[VT_R4:0]*/;
    _args[4] = Height /*[VT_R4:0]*/;
    OleFunction(_dispid, _args);
    return (IPictureDisp** /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  OLE_HANDLE __fastcall SaveMemory(Addflow5lib_tlb::ItemSetConstants ItemSet)
  {
    _TDispID _dispid(/* SaveMemory */ DISPID(150));
    TAutoArgs<1> _args;
    _args[1] = (int)ItemSet /*[VT_USERDEFINED:0]*/;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall LoadMemory(OLE_HANDLE hMem)
  {
    _TDispID _dispid(/* LoadMemory */ DISPID(149));
    TAutoArgs<1> _args;
    _args[1] = hMem /*[VT_INT:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall BeginAction(short code)
  {
    _TDispID _dispid(/* BeginAction */ DISPID(148));
    TAutoArgs<1> _args;
    _args[1] = code /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall UndocMethod(short param)
  {
    _TDispID _dispid(/* UndocMethod */ DISPID(147));
    TAutoArgs<1> _args;
    _args[1] = param /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall EndAction()
  {
    _TDispID _dispid(/* EndAction */ DISPID(146));
    OleProcedure(_dispid);
  }

  VARIANT_BOOL __fastcall CanRedo()
  {
    _TDispID _dispid(/* CanRedo */ DISPID(145));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  VARIANT_BOOL __fastcall CanUndo()
  {
    _TDispID _dispid(/* CanUndo */ DISPID(144));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall Redo()
  {
    _TDispID _dispid(/* Redo */ DISPID(143));
    OleProcedure(_dispid);
  }

  void __fastcall Undo()
  {
    _TDispID _dispid(/* Undo */ DISPID(142));
    OleProcedure(_dispid);
  }

  void __fastcall ZoomRectangle(short TypeZoom, float Left, float Top, float Width, float Height)
  {
    _TDispID _dispid(/* ZoomRectangle */ DISPID(141));
    TAutoArgs<5> _args;
    _args[1] = TypeZoom /*[VT_I2:0]*/;
    _args[2] = Left /*[VT_R4:0]*/;
    _args[3] = Top /*[VT_R4:0]*/;
    _args[4] = Width /*[VT_R4:0]*/;
    _args[5] = Height /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall SelectRectangle(Addflow5lib_tlb::FilterConstants Filter, float Left, float Top, 
                                  float Width, float Height)
  {
    _TDispID _dispid(/* SelectRectangle */ DISPID(140));
    TAutoArgs<5> _args;
    _args[1] = (int)Filter /*[VT_USERDEFINED:0]*/;
    _args[2] = Left /*[VT_R4:0]*/;
    _args[3] = Top /*[VT_R4:0]*/;
    _args[4] = Width /*[VT_R4:0]*/;
    _args[5] = Height /*[VT_R4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall StartEdit()
  {
    _TDispID _dispid(/* StartEdit */ DISPID(139));
    OleProcedure(_dispid);
  }

  VARIANT_BOOL __fastcall CanPaste()
  {
    _TDispID _dispid(/* CanPaste */ DISPID(138));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall Paste(VARIANT_BOOL SelectPastedItems)
  {
    _TDispID _dispid(/* Paste */ DISPID(137));
    TAutoArgs<1> _args;
    _args[1] = SelectPastedItems /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall Copy(Addflow5lib_tlb::ItemSetConstants ItemSet)
  {
    _TDispID _dispid(/* Copy */ DISPID(136));
    TAutoArgs<1> _args;
    _args[1] = (int)ItemSet /*[VT_USERDEFINED:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall DisplayPropertyPage(short param)
  {
    _TDispID _dispid(/* DisplayPropertyPage */ DISPID(135));
    TAutoArgs<1> _args;
    _args[1] = param /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  IPictureDisp** __fastcall ExportPicture(Addflow5lib_tlb::ItemSetConstants ItemSet, 
                                          VARIANT_BOOL IncludeBackColor, VARIANT_BOOL IncludeBackPic)
  {
    _TDispID _dispid(/* ExportPicture */ DISPID(134));
    TAutoArgs<3> _args;
    _args[1] = (int)ItemSet /*[VT_USERDEFINED:0]*/;
    _args[2] = IncludeBackColor /*[VT_BOOL:0]*/;
    _args[3] = IncludeBackPic /*[VT_BOOL:0]*/;
    OleFunction(_dispid, _args);
    return (IPictureDisp** /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Addflow5lib_tlb::afLink* __fastcall GetLinkAtPoint(float x, float y)
  {
    _TDispID _dispid(/* GetLinkAtPoint */ DISPID(133));
    TAutoArgs<2> _args;
    _args[1] = x /*[VT_R4:0]*/;
    _args[2] = y /*[VT_R4:0]*/;
    OleFunction(_dispid, _args);
    return (Addflow5lib_tlb::afLink* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Addflow5lib_tlb::afNode* __fastcall GetNodeAtPoint(float x, float y)
  {
    _TDispID _dispid(/* GetNodeAtPoint */ DISPID(132));
    TAutoArgs<2> _args;
    _args[1] = x /*[VT_R4:0]*/;
    _args[2] = y /*[VT_R4:0]*/;
    OleFunction(_dispid, _args);
    return (Addflow5lib_tlb::afNode* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  void __fastcall LoadFile(BSTR file)
  {
    _TDispID _dispid(/* LoadFile */ DISPID(131));
    TAutoArgs<1> _args;
    _args[1] = file /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall SaveFile(BSTR file)
  {
    _TDispID _dispid(/* SaveFile */ DISPID(130));
    TAutoArgs<1> _args;
    _args[1] = file /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall DeleteMarked()
  {
    _TDispID _dispid(/* DeleteMarked */ DISPID(129));
    OleProcedure(_dispid);
  }

  void __fastcall DeleteSel()
  {
    _TDispID _dispid(/* DeleteSel */ DISPID(128));
    OleProcedure(_dispid);
  }

  void __fastcall GetVersion(short* major, short* minor)
  {
    _TDispID _dispid(/* GetVersion */ DISPID(127));
    TAutoArgs<2> _args;
    _args[1] = major /*[VT_I2:1]*/;
    _args[2] = minor /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall SetSelChangedFlag(VARIANT_BOOL SelChanged)
  {
    _TDispID _dispid(/* SetSelChangedFlag */ DISPID(126));
    TAutoArgs<1> _args;
    _args[1] = SelChanged /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  VARIANT_BOOL __fastcall IsSelChanged()
  {
    _TDispID _dispid(/* IsSelChanged */ DISPID(125));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall SaveImage(Addflow5lib_tlb::SaveImageMediumConstants tymed, 
                            Addflow5lib_tlb::SaveImageFormatConstants format, BSTR file)
  {
    _TDispID _dispid(/* SaveImage */ DISPID(124));
    TAutoArgs<3> _args;
    _args[1] = (int)tymed /*[VT_USERDEFINED:0]*/;
    _args[2] = (int)format /*[VT_USERDEFINED:0]*/;
    _args[3] = file /*[VT_BSTR:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall DoClick()
  {
    _TDispID _dispid(/* DoClick */ DISPID(-551));
    OleProcedure(_dispid);
  }

  void __fastcall SetChangedFlag(VARIANT_BOOL Changed)
  {
    _TDispID _dispid(/* SetChangedFlag */ DISPID(123));
    TAutoArgs<1> _args;
    _args[1] = Changed /*[VT_BOOL:0]*/;
    OleProcedure(_dispid, _args);
  }

  VARIANT_BOOL __fastcall IsChanged()
  {
    _TDispID _dispid(/* IsChanged */ DISPID(122));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall SelectAll()
  {
    _TDispID _dispid(/* SelectAll */ DISPID(121));
    OleProcedure(_dispid);
  }

  void __fastcall Refresh()
  {
    _TDispID _dispid(/* Refresh */ DISPID(-550));
    OleProcedure(_dispid);
  }

  void __fastcall set_BackPicture(IPictureDisp** /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* BackPicture */ DISPID(66));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (IPictureDisp** /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  IPictureDisp** /*[VT_USERDEFINED:1]*/ __fastcall get_BackPicture()
  {
    _TDispID _dispid(/* BackPicture */ DISPID(66));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (IPictureDisp** /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_Repaint(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Repaint */ DISPID(68));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Repaint()
  {
    _TDispID _dispid(/* Repaint */ DISPID(68));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ArrowOrg(Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* ArrowOrg */ DISPID(72));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ __fastcall get_ArrowOrg()
  {
    _TDispID _dispid(/* ArrowOrg */ DISPID(72));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::ArrowConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_PointedArea(Addflow5lib_tlb::PointedAreaConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* PointedArea */ DISPID(64));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::PointedAreaConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::PointedAreaConstants /*[VT_USERDEFINED:0]*/ __fastcall get_PointedArea()
  {
    _TDispID _dispid(/* PointedArea */ DISPID(64));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::PointedAreaConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_Enabled(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Enabled */ DISPID(-514));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Enabled()
  {
    _TDispID _dispid(/* Enabled */ DISPID(-514));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_hWnd(OLE_HANDLE /*[VT_INT:0]*/ Value)
  {
    _TDispID _dispid(/* hWnd */ DISPID(-515));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  OLE_HANDLE /*[VT_INT:0]*/ __fastcall get_hWnd()
  {
    _TDispID _dispid(/* hWnd */ DISPID(-515));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Alignment(Addflow5lib_tlb::AlignmentConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* Alignment */ DISPID(65));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::AlignmentConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::AlignmentConstants /*[VT_USERDEFINED:0]*/ __fastcall get_Alignment()
  {
    _TDispID _dispid(/* Alignment */ DISPID(65));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::AlignmentConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_ShapeOrientation(Addflow5lib_tlb::ShapeOrientationConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* ShapeOrientation */ DISPID(89));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ShapeOrientationConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::ShapeOrientationConstants /*[VT_USERDEFINED:0]*/ __fastcall get_ShapeOrientation()
  {
    _TDispID _dispid(/* ShapeOrientation */ DISPID(89));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::ShapeOrientationConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_ReadOnly(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* ReadOnly */ DISPID(35));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_ReadOnly()
  {
    _TDispID _dispid(/* ReadOnly */ DISPID(35));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_DisplayHandles(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* DisplayHandles */ DISPID(34));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_DisplayHandles()
  {
    _TDispID _dispid(/* DisplayHandles */ DISPID(34));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_MultiSel(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* MultiSel */ DISPID(36));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_MultiSel()
  {
    _TDispID _dispid(/* MultiSel */ DISPID(36));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SelectAction(Addflow5lib_tlb::SelectActionConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* SelectAction */ DISPID(91));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::SelectActionConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::SelectActionConstants /*[VT_USERDEFINED:0]*/ __fastcall get_SelectAction()
  {
    _TDispID _dispid(/* SelectAction */ DISPID(91));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::SelectActionConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_StretchingPoint(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* StretchingPoint */ DISPID(88));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_StretchingPoint()
  {
    _TDispID _dispid(/* StretchingPoint */ DISPID(88));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ArrowMid(Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* ArrowMid */ DISPID(90));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ __fastcall get_ArrowMid()
  {
    _TDispID _dispid(/* ArrowMid */ DISPID(90));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::ArrowConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_ProportionalBars(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* ProportionalBars */ DISPID(92));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_ProportionalBars()
  {
    _TDispID _dispid(/* ProportionalBars */ DISPID(92));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_BackColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
  {
    _TDispID _dispid(/* BackColor */ DISPID(-501));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall get_BackColor()
  {
    _TDispID _dispid(/* BackColor */ DISPID(-501));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_CanDrawNode(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* CanDrawNode */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_CanDrawNode()
  {
    _TDispID _dispid(/* CanDrawNode */ DISPID(1));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_DrawStyle(Addflow5lib_tlb::DrawStyleConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* DrawStyle */ DISPID(61));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::DrawStyleConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::DrawStyleConstants /*[VT_USERDEFINED:0]*/ __fastcall get_DrawStyle()
  {
    _TDispID _dispid(/* DrawStyle */ DISPID(61));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::DrawStyleConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_yScroll(float /*[VT_R4:0]*/ Value)
  {
    _TDispID _dispid(/* yScroll */ DISPID(63));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  float /*[VT_R4:0]*/ __fastcall get_yScroll()
  {
    _TDispID _dispid(/* yScroll */ DISPID(63));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_CanMoveNode(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* CanMoveNode */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_CanMoveNode()
  {
    _TDispID _dispid(/* CanMoveNode */ DISPID(2));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PointedLink(Addflow5lib_tlb::afLink* /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* PointedLink */ DISPID(81));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afLink* /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::afLink* /*[VT_USERDEFINED:1]*/ __fastcall get_PointedLink()
  {
    _TDispID _dispid(/* PointedLink */ DISPID(81));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::afLink* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_Font(IFontDisp** /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* Font */ DISPID(-512));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (IFontDisp** /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  IFontDisp** /*[VT_USERDEFINED:1]*/ __fastcall get_Font()
  {
    _TDispID _dispid(/* Font */ DISPID(-512));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (IFontDisp** /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_LinkStyle(Addflow5lib_tlb::LinkStyleConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* LinkStyle */ DISPID(82));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::LinkStyleConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::LinkStyleConstants /*[VT_USERDEFINED:0]*/ __fastcall get_LinkStyle()
  {
    _TDispID _dispid(/* LinkStyle */ DISPID(82));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::LinkStyleConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_xScroll(float /*[VT_R4:0]*/ Value)
  {
    _TDispID _dispid(/* xScroll */ DISPID(62));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  float /*[VT_R4:0]*/ __fastcall get_xScroll()
  {
    _TDispID _dispid(/* xScroll */ DISPID(62));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Shape(Addflow5lib_tlb::ShapeConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* Shape */ DISPID(59));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ShapeConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::ShapeConstants /*[VT_USERDEFINED:0]*/ __fastcall get_Shape()
  {
    _TDispID _dispid(/* Shape */ DISPID(59));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::ShapeConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_AutoScroll(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* AutoScroll */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_AutoScroll()
  {
    _TDispID _dispid(/* AutoScroll */ DISPID(3));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_AutoSize(Addflow5lib_tlb::AutoSizeConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* AutoSize */ DISPID(69));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::AutoSizeConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::AutoSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall get_AutoSize()
  {
    _TDispID _dispid(/* AutoSize */ DISPID(69));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::AutoSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_ScrollBars(Addflow5lib_tlb::ScrollBarsConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* ScrollBars */ DISPID(60));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ScrollBarsConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::ScrollBarsConstants /*[VT_USERDEFINED:0]*/ __fastcall get_ScrollBars()
  {
    _TDispID _dispid(/* ScrollBars */ DISPID(60));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::ScrollBarsConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_yGrid(float /*[VT_R4:0]*/ Value)
  {
    _TDispID _dispid(/* yGrid */ DISPID(57));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  float /*[VT_R4:0]*/ __fastcall get_yGrid()
  {
    _TDispID _dispid(/* yGrid */ DISPID(57));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_xGrid(float /*[VT_R4:0]*/ Value)
  {
    _TDispID _dispid(/* xGrid */ DISPID(56));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  float /*[VT_R4:0]*/ __fastcall get_xGrid()
  {
    _TDispID _dispid(/* xGrid */ DISPID(56));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SelectMode(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* SelectMode */ DISPID(58));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_SelectMode()
  {
    _TDispID _dispid(/* SelectMode */ DISPID(58));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SelLinks(Addflow5lib_tlb::afSelLinks* /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* SelLinks */ DISPID(87));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afSelLinks* /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::afSelLinks* /*[VT_USERDEFINED:1]*/ __fastcall get_SelLinks()
  {
    _TDispID _dispid(/* SelLinks */ DISPID(87));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::afSelLinks* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_GridColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
  {
    _TDispID _dispid(/* GridColor */ DISPID(23));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall get_GridColor()
  {
    _TDispID _dispid(/* GridColor */ DISPID(23));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ForeColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
  {
    _TDispID _dispid(/* ForeColor */ DISPID(30));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall get_ForeColor()
  {
    _TDispID _dispid(/* ForeColor */ DISPID(30));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_FillColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
  {
    _TDispID _dispid(/* FillColor */ DISPID(29));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall get_FillColor()
  {
    _TDispID _dispid(/* FillColor */ DISPID(29));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ShowGrid(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* ShowGrid */ DISPID(24));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_ShowGrid()
  {
    _TDispID _dispid(/* ShowGrid */ DISPID(24));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_LinkCreationMode(Addflow5lib_tlb::LinkCreationModeConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* LinkCreationMode */ DISPID(21));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::LinkCreationModeConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::LinkCreationModeConstants /*[VT_USERDEFINED:0]*/ __fastcall get_LinkCreationMode()
  {
    _TDispID _dispid(/* LinkCreationMode */ DISPID(21));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::LinkCreationModeConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_PicturePosition(Addflow5lib_tlb::PicturePositionConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* PicturePosition */ DISPID(85));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::PicturePositionConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::PicturePositionConstants /*[VT_USERDEFINED:0]*/ __fastcall get_PicturePosition()
  {
    _TDispID _dispid(/* PicturePosition */ DISPID(85));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::PicturePositionConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_GridStyle(Addflow5lib_tlb::GridStyleConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* GridStyle */ DISPID(22));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::GridStyleConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::GridStyleConstants /*[VT_USERDEFINED:0]*/ __fastcall get_GridStyle()
  {
    _TDispID _dispid(/* GridStyle */ DISPID(22));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::GridStyleConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_CanDrawLink(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* CanDrawLink */ DISPID(31));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_CanDrawLink()
  {
    _TDispID _dispid(/* CanDrawLink */ DISPID(31));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_AdjustOrg(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* AdjustOrg */ DISPID(9));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_AdjustOrg()
  {
    _TDispID _dispid(/* AdjustOrg */ DISPID(9));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_DrawColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
  {
    _TDispID _dispid(/* DrawColor */ DISPID(28));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall get_DrawColor()
  {
    _TDispID _dispid(/* DrawColor */ DISPID(28));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_AdjustDst(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* AdjustDst */ DISPID(10));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_AdjustDst()
  {
    _TDispID _dispid(/* AdjustDst */ DISPID(10));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Transparent(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Transparent */ DISPID(27));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Transparent()
  {
    _TDispID _dispid(/* Transparent */ DISPID(27));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_CanStretchLink(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* CanStretchLink */ DISPID(33));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_CanStretchLink()
  {
    _TDispID _dispid(/* CanStretchLink */ DISPID(33));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_CanSizeNode(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* CanSizeNode */ DISPID(32));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_CanSizeNode()
  {
    _TDispID _dispid(/* CanSizeNode */ DISPID(32));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Rigid(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Rigid */ DISPID(8));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Rigid()
  {
    _TDispID _dispid(/* Rigid */ DISPID(8));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_AllowArrowKeys(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* AllowArrowKeys */ DISPID(7));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_AllowArrowKeys()
  {
    _TDispID _dispid(/* AllowArrowKeys */ DISPID(7));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_CanUndoRedo(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* CanUndoRedo */ DISPID(41));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_CanUndoRedo()
  {
    _TDispID _dispid(/* CanUndoRedo */ DISPID(41));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_LinkingHandleSize(Addflow5lib_tlb::HandleSizeConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* LinkingHandleSize */ DISPID(40));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::HandleSizeConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::HandleSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall get_LinkingHandleSize()
  {
    _TDispID _dispid(/* LinkingHandleSize */ DISPID(40));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::HandleSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_EditMode(Addflow5lib_tlb::EditModeConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* EditMode */ DISPID(37));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::EditModeConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::EditModeConstants /*[VT_USERDEFINED:0]*/ __fastcall get_EditMode()
  {
    _TDispID _dispid(/* EditMode */ DISPID(37));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::EditModeConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_SelectionHandleSize(Addflow5lib_tlb::HandleSizeConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* SelectionHandleSize */ DISPID(39));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::HandleSizeConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::HandleSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall get_SelectionHandleSize()
  {
    _TDispID _dispid(/* SelectionHandleSize */ DISPID(39));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::HandleSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_SelNodes(Addflow5lib_tlb::afSelNodes* /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* SelNodes */ DISPID(86));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afSelNodes* /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::afSelNodes* /*[VT_USERDEFINED:1]*/ __fastcall get_SelNodes()
  {
    _TDispID _dispid(/* SelNodes */ DISPID(86));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::afSelNodes* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_BackMode(Addflow5lib_tlb::BackModeConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* BackMode */ DISPID(96));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::BackModeConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::BackModeConstants /*[VT_USERDEFINED:0]*/ __fastcall get_BackMode()
  {
    _TDispID _dispid(/* BackMode */ DISPID(96));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::BackModeConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_yShadowOffset(float /*[VT_R4:0]*/ Value)
  {
    _TDispID _dispid(/* yShadowOffset */ DISPID(95));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  float /*[VT_R4:0]*/ __fastcall get_yShadowOffset()
  {
    _TDispID _dispid(/* yShadowOffset */ DISPID(95));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_OrthogonalDynamic(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* OrthogonalDynamic */ DISPID(11));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_OrthogonalDynamic()
  {
    _TDispID _dispid(/* OrthogonalDynamic */ DISPID(11));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SnapToGrid(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* SnapToGrid */ DISPID(25));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_SnapToGrid()
  {
    _TDispID _dispid(/* SnapToGrid */ DISPID(25));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ScrollTrack(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* ScrollTrack */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_ScrollTrack()
  {
    _TDispID _dispid(/* ScrollTrack */ DISPID(6));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Hidden(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Hidden */ DISPID(26));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Hidden()
  {
    _TDispID _dispid(/* Hidden */ DISPID(26));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_CanMultiLink(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* CanMultiLink */ DISPID(5));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_CanMultiLink()
  {
    _TDispID _dispid(/* CanMultiLink */ DISPID(5));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Shadow(Addflow5lib_tlb::ShadowConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* Shadow */ DISPID(93));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ShadowConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::ShadowConstants /*[VT_USERDEFINED:0]*/ __fastcall get_Shadow()
  {
    _TDispID _dispid(/* Shadow */ DISPID(93));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::ShadowConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_xShadowOffset(float /*[VT_R4:0]*/ Value)
  {
    _TDispID _dispid(/* xShadowOffset */ DISPID(94));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  float /*[VT_R4:0]*/ __fastcall get_xShadowOffset()
  {
    _TDispID _dispid(/* xShadowOffset */ DISPID(94));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ShadowColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
  {
    _TDispID _dispid(/* ShadowColor */ DISPID(38));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall get_ShadowColor()
  {
    _TDispID _dispid(/* ShadowColor */ DISPID(38));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_OrientedText(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* OrientedText */ DISPID(43));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_OrientedText()
  {
    _TDispID _dispid(/* OrientedText */ DISPID(43));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Pictures(Addflow5lib_tlb::afPictures* /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* Pictures */ DISPID(102));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afPictures* /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::afPictures* /*[VT_USERDEFINED:1]*/ __fastcall get_Pictures()
  {
    _TDispID _dispid(/* Pictures */ DISPID(102));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::afPictures* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_CanChangeDst(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* CanChangeDst */ DISPID(19));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_CanChangeDst()
  {
    _TDispID _dispid(/* CanChangeDst */ DISPID(19));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_MaxInDegree(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* MaxInDegree */ DISPID(44));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_MaxInDegree()
  {
    _TDispID _dispid(/* MaxInDegree */ DISPID(44));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ShowPropertyPages(Addflow5lib_tlb::ShowPropertyPagesConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* ShowPropertyPages */ DISPID(12));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ShowPropertyPagesConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::ShowPropertyPagesConstants /*[VT_USERDEFINED:0]*/ __fastcall get_ShowPropertyPages()
  {
    _TDispID _dispid(/* ShowPropertyPages */ DISPID(12));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::ShowPropertyPagesConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_MaxOutDegree(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* MaxOutDegree */ DISPID(45));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_MaxOutDegree()
  {
    _TDispID _dispid(/* MaxOutDegree */ DISPID(45));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_MaxDegree(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* MaxDegree */ DISPID(46));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_MaxDegree()
  {
    _TDispID _dispid(/* MaxDegree */ DISPID(46));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_OwnerDraw(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* OwnerDraw */ DISPID(115));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_OwnerDraw()
  {
    _TDispID _dispid(/* OwnerDraw */ DISPID(115));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_LinkOwnerDraw(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* LinkOwnerDraw */ DISPID(117));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_LinkOwnerDraw()
  {
    _TDispID _dispid(/* LinkOwnerDraw */ DISPID(117));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_GradientColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
  {
    _TDispID _dispid(/* GradientColor */ DISPID(55));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall get_GradientColor()
  {
    _TDispID _dispid(/* GradientColor */ DISPID(55));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Gradient(Addflow5lib_tlb::GradientConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* Gradient */ DISPID(120));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::GradientConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::GradientConstants /*[VT_USERDEFINED:0]*/ __fastcall get_Gradient()
  {
    _TDispID _dispid(/* Gradient */ DISPID(120));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::GradientConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_RedoNode(Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* RedoNode */ DISPID(113));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afNode* /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ __fastcall get_RedoNode()
  {
    _TDispID _dispid(/* RedoNode */ DISPID(113));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::afNode* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_NodeOwnerDraw(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* NodeOwnerDraw */ DISPID(116));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_NodeOwnerDraw()
  {
    _TDispID _dispid(/* NodeOwnerDraw */ DISPID(116));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_RedoLink(Addflow5lib_tlb::afLink* /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* RedoLink */ DISPID(114));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afLink* /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::afLink* /*[VT_USERDEFINED:1]*/ __fastcall get_RedoLink()
  {
    _TDispID _dispid(/* RedoLink */ DISPID(114));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::afLink* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_UndoLink(Addflow5lib_tlb::afLink* /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* UndoLink */ DISPID(112));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afLink* /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::afLink* /*[VT_USERDEFINED:1]*/ __fastcall get_UndoLink()
  {
    _TDispID _dispid(/* UndoLink */ DISPID(112));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::afLink* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_DrawMethod(Addflow5lib_tlb::DrawMethodConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* DrawMethod */ DISPID(98));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::DrawMethodConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::DrawMethodConstants /*[VT_USERDEFINED:0]*/ __fastcall get_DrawMethod()
  {
    _TDispID _dispid(/* DrawMethod */ DISPID(98));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::DrawMethodConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_LogicalOnly(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* LogicalOnly */ DISPID(13));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_LogicalOnly()
  {
    _TDispID _dispid(/* LogicalOnly */ DISPID(13));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SizeArrowMid(Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* SizeArrowMid */ DISPID(105));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowSizeConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall get_SizeArrowMid()
  {
    _TDispID _dispid(/* SizeArrowMid */ DISPID(105));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::ArrowSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_CanFireError(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* CanFireError */ DISPID(17));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_CanFireError()
  {
    _TDispID _dispid(/* CanFireError */ DISPID(17));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_CycleMode(Addflow5lib_tlb::CycleModeConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* CycleMode */ DISPID(47));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::CycleModeConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::CycleModeConstants /*[VT_USERDEFINED:0]*/ __fastcall get_CycleMode()
  {
    _TDispID _dispid(/* CycleMode */ DISPID(47));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::CycleModeConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_SizeArrowDst(Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* SizeArrowDst */ DISPID(103));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowSizeConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall get_SizeArrowDst()
  {
    _TDispID _dispid(/* SizeArrowDst */ DISPID(103));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::ArrowSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_SizeArrowOrg(Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* SizeArrowOrg */ DISPID(104));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowSizeConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall get_SizeArrowOrg()
  {
    _TDispID _dispid(/* SizeArrowOrg */ DISPID(104));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::ArrowSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_ShowJump(Addflow5lib_tlb::ShowJumpConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* ShowJump */ DISPID(48));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ShowJumpConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::ShowJumpConstants /*[VT_USERDEFINED:0]*/ __fastcall get_ShowJump()
  {
    _TDispID _dispid(/* ShowJump */ DISPID(48));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::ShowJumpConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_CanChangeOrg(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* CanChangeOrg */ DISPID(18));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_CanChangeOrg()
  {
    _TDispID _dispid(/* CanChangeOrg */ DISPID(18));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_RedoCode(Addflow5lib_tlb::ActionConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* RedoCode */ DISPID(101));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ActionConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::ActionConstants /*[VT_USERDEFINED:0]*/ __fastcall get_RedoCode()
  {
    _TDispID _dispid(/* RedoCode */ DISPID(101));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::ActionConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_NoPrefix(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* NoPrefix */ DISPID(99));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_NoPrefix()
  {
    _TDispID _dispid(/* NoPrefix */ DISPID(99));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Ellipsis(Addflow5lib_tlb::EllipsisConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* Ellipsis */ DISPID(97));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::EllipsisConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::EllipsisConstants /*[VT_USERDEFINED:0]*/ __fastcall get_Ellipsis()
  {
    _TDispID _dispid(/* Ellipsis */ DISPID(97));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::EllipsisConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_UndoCode(Addflow5lib_tlb::ActionConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* UndoCode */ DISPID(100));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ActionConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::ActionConstants /*[VT_USERDEFINED:0]*/ __fastcall get_UndoCode()
  {
    _TDispID _dispid(/* UndoCode */ DISPID(100));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::ActionConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_ZeroOriginForExport(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* ZeroOriginForExport */ DISPID(16));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_ZeroOriginForExport()
  {
    _TDispID _dispid(/* ZeroOriginForExport */ DISPID(16));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ScrollWheel(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* ScrollWheel */ DISPID(14));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_ScrollWheel()
  {
    _TDispID _dispid(/* ScrollWheel */ DISPID(14));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_RemovePointAngle(Addflow5lib_tlb::RemovePointAngleConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* RemovePointAngle */ DISPID(15));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::RemovePointAngleConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::RemovePointAngleConstants /*[VT_USERDEFINED:0]*/ __fastcall get_RemovePointAngle()
  {
    _TDispID _dispid(/* RemovePointAngle */ DISPID(15));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::RemovePointAngleConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_PictureIndex(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* PictureIndex */ DISPID(119));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_PictureIndex()
  {
    _TDispID _dispid(/* PictureIndex */ DISPID(119));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_MousePointer(Addflow5lib_tlb::MousePointerConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* MousePointer */ DISPID(70));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::MousePointerConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::MousePointerConstants /*[VT_USERDEFINED:0]*/ __fastcall get_MousePointer()
  {
    _TDispID _dispid(/* MousePointer */ DISPID(70));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::MousePointerConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_MouseIcon(IPictureDisp** /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* MouseIcon */ DISPID(71));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (IPictureDisp** /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  IPictureDisp** /*[VT_USERDEFINED:1]*/ __fastcall get_MouseIcon()
  {
    _TDispID _dispid(/* MouseIcon */ DISPID(71));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (IPictureDisp** /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_Nodes(Addflow5lib_tlb::afNodes* /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* Nodes */ DISPID(73));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afNodes* /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::afNodes* /*[VT_USERDEFINED:1]*/ __fastcall get_Nodes()
  {
    _TDispID _dispid(/* Nodes */ DISPID(73));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::afNodes* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_BorderStyle(Addflow5lib_tlb::BorderStyleConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* BorderStyle */ DISPID(-504));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::BorderStyleConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::BorderStyleConstants /*[VT_USERDEFINED:0]*/ __fastcall get_BorderStyle()
  {
    _TDispID _dispid(/* BorderStyle */ DISPID(-504));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::BorderStyleConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_LastUserAction(Addflow5lib_tlb::UserActionConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* LastUserAction */ DISPID(76));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::UserActionConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::UserActionConstants /*[VT_USERDEFINED:0]*/ __fastcall get_LastUserAction()
  {
    _TDispID _dispid(/* LastUserAction */ DISPID(76));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::UserActionConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_SelectedNode(Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* SelectedNode */ DISPID(78));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afNode* /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ __fastcall get_SelectedNode()
  {
    _TDispID _dispid(/* SelectedNode */ DISPID(78));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::afNode* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_DrawWidth(float /*[VT_R4:0]*/ Value)
  {
    _TDispID _dispid(/* DrawWidth */ DISPID(77));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  float /*[VT_R4:0]*/ __fastcall get_DrawWidth()
  {
    _TDispID _dispid(/* DrawWidth */ DISPID(77));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ArrowDst(Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* ArrowDst */ DISPID(67));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ __fastcall get_ArrowDst()
  {
    _TDispID _dispid(/* ArrowDst */ DISPID(67));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::ArrowConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_yExtent(float /*[VT_R4:0]*/ Value)
  {
    _TDispID _dispid(/* yExtent */ DISPID(84));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  float /*[VT_R4:0]*/ __fastcall get_yExtent()
  {
    _TDispID _dispid(/* yExtent */ DISPID(84));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PointedNode(Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* PointedNode */ DISPID(80));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afNode* /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ __fastcall get_PointedNode()
  {
    _TDispID _dispid(/* PointedNode */ DISPID(80));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::afNode* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_SelectedLink(Addflow5lib_tlb::afLink* /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* SelectedLink */ DISPID(79));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afLink* /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::afLink* /*[VT_USERDEFINED:1]*/ __fastcall get_SelectedLink()
  {
    _TDispID _dispid(/* SelectedLink */ DISPID(79));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::afLink* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_ShowToolTip(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* ShowToolTip */ DISPID(20));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_ShowToolTip()
  {
    _TDispID _dispid(/* ShowToolTip */ DISPID(20));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_CanReflexLink(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* CanReflexLink */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_CanReflexLink()
  {
    _TDispID _dispid(/* CanReflexLink */ DISPID(4));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Appearance(Addflow5lib_tlb::AppearanceConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* Appearance */ DISPID(-520));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::AppearanceConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::AppearanceConstants /*[VT_USERDEFINED:0]*/ __fastcall get_Appearance()
  {
    _TDispID _dispid(/* Appearance */ DISPID(-520));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::AppearanceConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_xExtent(float /*[VT_R4:0]*/ Value)
  {
    _TDispID _dispid(/* xExtent */ DISPID(83));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  float /*[VT_R4:0]*/ __fastcall get_xExtent()
  {
    _TDispID _dispid(/* xExtent */ DISPID(83));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_xZoom(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* xZoom */ DISPID(74));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_xZoom()
  {
    _TDispID _dispid(/* xZoom */ DISPID(74));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_RoundedCorner(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* RoundedCorner */ DISPID(49));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_RoundedCorner()
  {
    _TDispID _dispid(/* RoundedCorner */ DISPID(49));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_CustomShapes(Addflow5lib_tlb::afCustomShapes* /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* CustomShapes */ DISPID(106));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afCustomShapes* /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::afCustomShapes* /*[VT_USERDEFINED:1]*/ __fastcall get_CustomShapes()
  {
    _TDispID _dispid(/* CustomShapes */ DISPID(106));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::afCustomShapes* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_SkipUndo(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* SkipUndo */ DISPID(107));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_SkipUndo()
  {
    _TDispID _dispid(/* SkipUndo */ DISPID(107));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_RoundedCornerSize(Addflow5lib_tlb::RoundSizeConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* RoundedCornerSize */ DISPID(109));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::RoundSizeConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::RoundSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall get_RoundedCornerSize()
  {
    _TDispID _dispid(/* RoundedCornerSize */ DISPID(109));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::RoundSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_EditHardReturn(Addflow5lib_tlb::EditHardReturnConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* EditHardReturn */ DISPID(54));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::EditHardReturnConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::EditHardReturnConstants /*[VT_USERDEFINED:0]*/ __fastcall get_EditHardReturn()
  {
    _TDispID _dispid(/* EditHardReturn */ DISPID(54));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::EditHardReturnConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_CustomShapeIndex(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* CustomShapeIndex */ DISPID(118));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_CustomShapeIndex()
  {
    _TDispID _dispid(/* CustomShapeIndex */ DISPID(118));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_JumpSize(Addflow5lib_tlb::JumpSizeConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* JumpSize */ DISPID(108));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::JumpSizeConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::JumpSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall get_JumpSize()
  {
    _TDispID _dispid(/* JumpSize */ DISPID(108));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::JumpSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_License(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* License */ DISPID(110));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_License()
  {
    _TDispID _dispid(/* License */ DISPID(110));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_RouteStartMethod(Addflow5lib_tlb::StartMethodConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* RouteStartMethod */ DISPID(51));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::StartMethodConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::StartMethodConstants /*[VT_USERDEFINED:0]*/ __fastcall get_RouteStartMethod()
  {
    _TDispID _dispid(/* RouteStartMethod */ DISPID(51));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::StartMethodConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_UndoSize(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* UndoSize */ DISPID(42));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_UndoSize()
  {
    _TDispID _dispid(/* UndoSize */ DISPID(42));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_yZoom(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* yZoom */ DISPID(75));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_yZoom()
  {
    _TDispID _dispid(/* yZoom */ DISPID(75));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Autorouting(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Autorouting */ DISPID(50));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Autorouting()
  {
    _TDispID _dispid(/* Autorouting */ DISPID(50));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_RouteMinDistance(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* RouteMinDistance */ DISPID(53));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_RouteMinDistance()
  {
    _TDispID _dispid(/* RouteMinDistance */ DISPID(53));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_UndoNode(Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* UndoNode */ DISPID(111));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afNode* /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ __fastcall get_UndoNode()
  {
    _TDispID _dispid(/* UndoNode */ DISPID(111));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::afNode* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_RouteGrain(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* RouteGrain */ DISPID(52));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_RouteGrain()
  {
    _TDispID _dispid(/* RouteGrain */ DISPID(52));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   IPictureDisp**  BackPicture = {read = get_BackPicture, write = set_BackPicture};
  __property   VARIANT_BOOL    Repaint = {read = get_Repaint, write = set_Repaint};
  __property   Addflow5lib_tlb::ArrowConstants ArrowOrg = {read = get_ArrowOrg, write = set_ArrowOrg};
  __property   Addflow5lib_tlb::PointedAreaConstants PointedArea = {read = get_PointedArea, write = set_PointedArea};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd, write = set_hWnd};
  __property   Addflow5lib_tlb::AlignmentConstants Alignment = {read = get_Alignment, write = set_Alignment};
  __property   Addflow5lib_tlb::ShapeOrientationConstants ShapeOrientation = {read = get_ShapeOrientation, write = set_ShapeOrientation};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly, write = set_ReadOnly};
  __property   VARIANT_BOOL    DisplayHandles = {read = get_DisplayHandles, write = set_DisplayHandles};
  __property   VARIANT_BOOL    MultiSel = {read = get_MultiSel, write = set_MultiSel};
  __property   Addflow5lib_tlb::SelectActionConstants SelectAction = {read = get_SelectAction, write = set_SelectAction};
  __property   long            StretchingPoint = {read = get_StretchingPoint, write = set_StretchingPoint};
  __property   Addflow5lib_tlb::ArrowConstants ArrowMid = {read = get_ArrowMid, write = set_ArrowMid};
  __property   VARIANT_BOOL    ProportionalBars = {read = get_ProportionalBars, write = set_ProportionalBars};
  __property   ::OLE_COLOR     BackColor = {read = get_BackColor, write = set_BackColor};
  __property   VARIANT_BOOL    CanDrawNode = {read = get_CanDrawNode, write = set_CanDrawNode};
  __property   Addflow5lib_tlb::DrawStyleConstants DrawStyle = {read = get_DrawStyle, write = set_DrawStyle};
  __property   float           yScroll = {read = get_yScroll, write = set_yScroll};
  __property   VARIANT_BOOL    CanMoveNode = {read = get_CanMoveNode, write = set_CanMoveNode};
  __property   Addflow5lib_tlb::afLink* PointedLink = {read = get_PointedLink, write = set_PointedLink};
  __property   IFontDisp**     Font = {read = get_Font, write = set_Font};
  __property   Addflow5lib_tlb::LinkStyleConstants LinkStyle = {read = get_LinkStyle, write = set_LinkStyle};
  __property   float           xScroll = {read = get_xScroll, write = set_xScroll};
  __property   Addflow5lib_tlb::ShapeConstants Shape = {read = get_Shape, write = set_Shape};
  __property   VARIANT_BOOL    AutoScroll = {read = get_AutoScroll, write = set_AutoScroll};
  __property   Addflow5lib_tlb::AutoSizeConstants AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Addflow5lib_tlb::ScrollBarsConstants ScrollBars = {read = get_ScrollBars, write = set_ScrollBars};
  __property   float           yGrid = {read = get_yGrid, write = set_yGrid};
  __property   float           xGrid = {read = get_xGrid, write = set_xGrid};
  __property   VARIANT_BOOL    SelectMode = {read = get_SelectMode, write = set_SelectMode};
  __property   Addflow5lib_tlb::afSelLinks* SelLinks = {read = get_SelLinks, write = set_SelLinks};
  __property   ::OLE_COLOR     GridColor = {read = get_GridColor, write = set_GridColor};
  __property   ::OLE_COLOR     ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   ::OLE_COLOR     FillColor = {read = get_FillColor, write = set_FillColor};
  __property   VARIANT_BOOL    ShowGrid = {read = get_ShowGrid, write = set_ShowGrid};
  __property   Addflow5lib_tlb::LinkCreationModeConstants LinkCreationMode = {read = get_LinkCreationMode, write = set_LinkCreationMode};
  __property   Addflow5lib_tlb::PicturePositionConstants PicturePosition = {read = get_PicturePosition, write = set_PicturePosition};
  __property   Addflow5lib_tlb::GridStyleConstants GridStyle = {read = get_GridStyle, write = set_GridStyle};
  __property   VARIANT_BOOL    CanDrawLink = {read = get_CanDrawLink, write = set_CanDrawLink};
  __property   VARIANT_BOOL    AdjustOrg = {read = get_AdjustOrg, write = set_AdjustOrg};
  __property   ::OLE_COLOR     DrawColor = {read = get_DrawColor, write = set_DrawColor};
  __property   VARIANT_BOOL    AdjustDst = {read = get_AdjustDst, write = set_AdjustDst};
  __property   VARIANT_BOOL    Transparent = {read = get_Transparent, write = set_Transparent};
  __property   VARIANT_BOOL    CanStretchLink = {read = get_CanStretchLink, write = set_CanStretchLink};
  __property   VARIANT_BOOL    CanSizeNode = {read = get_CanSizeNode, write = set_CanSizeNode};
  __property   VARIANT_BOOL    Rigid = {read = get_Rigid, write = set_Rigid};
  __property   VARIANT_BOOL    AllowArrowKeys = {read = get_AllowArrowKeys, write = set_AllowArrowKeys};
  __property   VARIANT_BOOL    CanUndoRedo = {read = get_CanUndoRedo, write = set_CanUndoRedo};
  __property   Addflow5lib_tlb::HandleSizeConstants LinkingHandleSize = {read = get_LinkingHandleSize, write = set_LinkingHandleSize};
  __property   Addflow5lib_tlb::EditModeConstants EditMode = {read = get_EditMode, write = set_EditMode};
  __property   Addflow5lib_tlb::HandleSizeConstants SelectionHandleSize = {read = get_SelectionHandleSize, write = set_SelectionHandleSize};
  __property   Addflow5lib_tlb::afSelNodes* SelNodes = {read = get_SelNodes, write = set_SelNodes};
  __property   Addflow5lib_tlb::BackModeConstants BackMode = {read = get_BackMode, write = set_BackMode};
  __property   float           yShadowOffset = {read = get_yShadowOffset, write = set_yShadowOffset};
  __property   VARIANT_BOOL    OrthogonalDynamic = {read = get_OrthogonalDynamic, write = set_OrthogonalDynamic};
  __property   VARIANT_BOOL    SnapToGrid = {read = get_SnapToGrid, write = set_SnapToGrid};
  __property   VARIANT_BOOL    ScrollTrack = {read = get_ScrollTrack, write = set_ScrollTrack};
  __property   VARIANT_BOOL    Hidden = {read = get_Hidden, write = set_Hidden};
  __property   VARIANT_BOOL    CanMultiLink = {read = get_CanMultiLink, write = set_CanMultiLink};
  __property   Addflow5lib_tlb::ShadowConstants Shadow = {read = get_Shadow, write = set_Shadow};
  __property   float           xShadowOffset = {read = get_xShadowOffset, write = set_xShadowOffset};
  __property   ::OLE_COLOR     ShadowColor = {read = get_ShadowColor, write = set_ShadowColor};
  __property   VARIANT_BOOL    OrientedText = {read = get_OrientedText, write = set_OrientedText};
  __property   Addflow5lib_tlb::afPictures* Pictures = {read = get_Pictures, write = set_Pictures};
  __property   VARIANT_BOOL    CanChangeDst = {read = get_CanChangeDst, write = set_CanChangeDst};
  __property   long            MaxInDegree = {read = get_MaxInDegree, write = set_MaxInDegree};
  __property   Addflow5lib_tlb::ShowPropertyPagesConstants ShowPropertyPages = {read = get_ShowPropertyPages, write = set_ShowPropertyPages};
  __property   long            MaxOutDegree = {read = get_MaxOutDegree, write = set_MaxOutDegree};
  __property   long            MaxDegree = {read = get_MaxDegree, write = set_MaxDegree};
  __property   VARIANT_BOOL    OwnerDraw = {read = get_OwnerDraw, write = set_OwnerDraw};
  __property   VARIANT_BOOL    LinkOwnerDraw = {read = get_LinkOwnerDraw, write = set_LinkOwnerDraw};
  __property   ::OLE_COLOR     GradientColor = {read = get_GradientColor, write = set_GradientColor};
  __property   Addflow5lib_tlb::GradientConstants Gradient = {read = get_Gradient, write = set_Gradient};
  __property   Addflow5lib_tlb::afNode* RedoNode = {read = get_RedoNode, write = set_RedoNode};
  __property   VARIANT_BOOL    NodeOwnerDraw = {read = get_NodeOwnerDraw, write = set_NodeOwnerDraw};
  __property   Addflow5lib_tlb::afLink* RedoLink = {read = get_RedoLink, write = set_RedoLink};
  __property   Addflow5lib_tlb::afLink* UndoLink = {read = get_UndoLink, write = set_UndoLink};
  __property   Addflow5lib_tlb::DrawMethodConstants DrawMethod = {read = get_DrawMethod, write = set_DrawMethod};
  __property   VARIANT_BOOL    LogicalOnly = {read = get_LogicalOnly, write = set_LogicalOnly};
  __property   Addflow5lib_tlb::ArrowSizeConstants SizeArrowMid = {read = get_SizeArrowMid, write = set_SizeArrowMid};
  __property   VARIANT_BOOL    CanFireError = {read = get_CanFireError, write = set_CanFireError};
  __property   Addflow5lib_tlb::CycleModeConstants CycleMode = {read = get_CycleMode, write = set_CycleMode};
  __property   Addflow5lib_tlb::ArrowSizeConstants SizeArrowDst = {read = get_SizeArrowDst, write = set_SizeArrowDst};
  __property   Addflow5lib_tlb::ArrowSizeConstants SizeArrowOrg = {read = get_SizeArrowOrg, write = set_SizeArrowOrg};
  __property   Addflow5lib_tlb::ShowJumpConstants ShowJump = {read = get_ShowJump, write = set_ShowJump};
  __property   VARIANT_BOOL    CanChangeOrg = {read = get_CanChangeOrg, write = set_CanChangeOrg};
  __property   Addflow5lib_tlb::ActionConstants RedoCode = {read = get_RedoCode, write = set_RedoCode};
  __property   VARIANT_BOOL    NoPrefix = {read = get_NoPrefix, write = set_NoPrefix};
  __property   Addflow5lib_tlb::EllipsisConstants Ellipsis = {read = get_Ellipsis, write = set_Ellipsis};
  __property   Addflow5lib_tlb::ActionConstants UndoCode = {read = get_UndoCode, write = set_UndoCode};
  __property   VARIANT_BOOL    ZeroOriginForExport = {read = get_ZeroOriginForExport, write = set_ZeroOriginForExport};
  __property   VARIANT_BOOL    ScrollWheel = {read = get_ScrollWheel, write = set_ScrollWheel};
  __property   Addflow5lib_tlb::RemovePointAngleConstants RemovePointAngle = {read = get_RemovePointAngle, write = set_RemovePointAngle};
  __property   long            PictureIndex = {read = get_PictureIndex, write = set_PictureIndex};
  __property   Addflow5lib_tlb::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Addflow5lib_tlb::afNodes* Nodes = {read = get_Nodes, write = set_Nodes};
  __property   Addflow5lib_tlb::BorderStyleConstants BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   Addflow5lib_tlb::UserActionConstants LastUserAction = {read = get_LastUserAction, write = set_LastUserAction};
  __property   Addflow5lib_tlb::afNode* SelectedNode = {read = get_SelectedNode, write = set_SelectedNode};
  __property   float           DrawWidth = {read = get_DrawWidth, write = set_DrawWidth};
  __property   Addflow5lib_tlb::ArrowConstants ArrowDst = {read = get_ArrowDst, write = set_ArrowDst};
  __property   float           yExtent = {read = get_yExtent, write = set_yExtent};
  __property   Addflow5lib_tlb::afNode* PointedNode = {read = get_PointedNode, write = set_PointedNode};
  __property   Addflow5lib_tlb::afLink* SelectedLink = {read = get_SelectedLink, write = set_SelectedLink};
  __property   VARIANT_BOOL    ShowToolTip = {read = get_ShowToolTip, write = set_ShowToolTip};
  __property   VARIANT_BOOL    CanReflexLink = {read = get_CanReflexLink, write = set_CanReflexLink};
  __property   Addflow5lib_tlb::AppearanceConstants Appearance = {read = get_Appearance, write = set_Appearance};
  __property   float           xExtent = {read = get_xExtent, write = set_xExtent};
  __property   long            xZoom = {read = get_xZoom, write = set_xZoom};
  __property   VARIANT_BOOL    RoundedCorner = {read = get_RoundedCorner, write = set_RoundedCorner};
  __property   Addflow5lib_tlb::afCustomShapes* CustomShapes = {read = get_CustomShapes, write = set_CustomShapes};
  __property   VARIANT_BOOL    SkipUndo = {read = get_SkipUndo, write = set_SkipUndo};
  __property   Addflow5lib_tlb::RoundSizeConstants RoundedCornerSize = {read = get_RoundedCornerSize, write = set_RoundedCornerSize};
  __property   Addflow5lib_tlb::EditHardReturnConstants EditHardReturn = {read = get_EditHardReturn, write = set_EditHardReturn};
  __property   long            CustomShapeIndex = {read = get_CustomShapeIndex, write = set_CustomShapeIndex};
  __property   Addflow5lib_tlb::JumpSizeConstants JumpSize = {read = get_JumpSize, write = set_JumpSize};
  __property   BSTR            License = {read = get_License, write = set_License};
  __property   Addflow5lib_tlb::StartMethodConstants RouteStartMethod = {read = get_RouteStartMethod, write = set_RouteStartMethod};
  __property   long            UndoSize = {read = get_UndoSize, write = set_UndoSize};
  __property   long            yZoom = {read = get_yZoom, write = set_yZoom};
  __property   VARIANT_BOOL    Autorouting = {read = get_Autorouting, write = set_Autorouting};
  __property   long            RouteMinDistance = {read = get_RouteMinDistance, write = set_RouteMinDistance};
  __property   Addflow5lib_tlb::afNode* UndoNode = {read = get_UndoNode, write = set_UndoNode};
  __property   long            RouteGrain = {read = get_RouteGrain, write = set_RouteGrain};
};
// *********************************************************************//
// Interface: INodes
// Flags:     (4112) Hidden Dispatchable
// GUID:      {15078B02-F53D-4CEE-8932-4AA0BFA472B3}
// *********************************************************************//
interface INodes : public TDispWrapper<IDispatch>
{
  void __fastcall Clear()
  {
    _TDispID _dispid(/* Clear */ DISPID(2));
    OleProcedure(_dispid);
  }

  Addflow5lib_tlb::afNode* __fastcall Item(VARIANT Index)
  {
    _TDispID _dispid(/* Item */ DISPID(0));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return (Addflow5lib_tlb::afNode* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  LPUNKNOWN __fastcall _NewEnum()
  {
    _TDispID _dispid(/* _NewEnum */ DISPID(-4));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Addflow5lib_tlb::afNode* __fastcall Add(float Left, float Top, float Width, float Height)
  {
    _TDispID _dispid(/* Add */ DISPID(3));
    TAutoArgs<4> _args;
    _args[1] = Left /*[VT_R4:0]*/;
    _args[2] = Top /*[VT_R4:0]*/;
    _args[3] = Width /*[VT_R4:0]*/;
    _args[4] = Height /*[VT_R4:0]*/;
    OleFunction(_dispid, _args);
    return (Addflow5lib_tlb::afNode* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  void __fastcall Remove(VARIANT Index)
  {
    _TDispID _dispid(/* Remove */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall set_Count(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* Count */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_Count()
  {
    _TDispID _dispid(/* Count */ DISPID(1));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   long            Count = {read = get_Count, write = set_Count};
};
// *********************************************************************//
// Interface: INode
// Flags:     (4112) Hidden Dispatchable
// GUID:      {62BDF910-DED7-42EA-B8CE-B1284A2F07D9}
// *********************************************************************//
interface INode : public TDispWrapper<IDispatch>
{
  void __fastcall Refresh()
  {
    _TDispID _dispid(/* Refresh */ DISPID(60));
    OleProcedure(_dispid);
  }

  void __fastcall PropertyPage(BSTR title, long page)
  {
    _TDispID _dispid(/* PropertyPage */ DISPID(59));
    TAutoArgs<2> _args;
    _args[1] = title /*[VT_BSTR:0]*/;
    _args[2] = page /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  Addflow5lib_tlb::afNode* __fastcall Clone()
  {
    _TDispID _dispid(/* Clone */ DISPID(58));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return (Addflow5lib_tlb::afNode* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  VARIANT_BOOL __fastcall EnsureVisible()
  {
    _TDispID _dispid(/* EnsureVisible */ DISPID(57));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Addflow5lib_tlb::afNode* __fastcall GetLinkedNode(Addflow5lib_tlb::afLink* link)
  {
    _TDispID _dispid(/* GetLinkedNode */ DISPID(56));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afLink*)link /*[VT_USERDEFINED:1]*/;
    OleFunction(_dispid, _args);
    return (Addflow5lib_tlb::afNode* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  void __fastcall set_DrawWidth(float /*[VT_R4:0]*/ Value)
  {
    _TDispID _dispid(/* DrawWidth */ DISPID(14));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  float /*[VT_R4:0]*/ __fastcall get_DrawWidth()
  {
    _TDispID _dispid(/* DrawWidth */ DISPID(14));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Selectable(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Selectable */ DISPID(11));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Selectable()
  {
    _TDispID _dispid(/* Selectable */ DISPID(11));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Text(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* Text */ DISPID(8));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Text()
  {
    _TDispID _dispid(/* Text */ DISPID(8));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ForeColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
  {
    _TDispID _dispid(/* ForeColor */ DISPID(5));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall get_ForeColor()
  {
    _TDispID _dispid(/* ForeColor */ DISPID(5));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ZOrder(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* ZOrder */ DISPID(12));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_ZOrder()
  {
    _TDispID _dispid(/* ZOrder */ DISPID(12));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Font(IFontDisp** /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* Font */ DISPID(13));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (IFontDisp** /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  IFontDisp** /*[VT_USERDEFINED:1]*/ __fastcall get_Font()
  {
    _TDispID _dispid(/* Font */ DISPID(13));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (IFontDisp** /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_Tag(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* Tag */ DISPID(9));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Tag()
  {
    _TDispID _dispid(/* Tag */ DISPID(9));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Top(float /*[VT_R4:0]*/ Value)
  {
    _TDispID _dispid(/* Top */ DISPID(21));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  float /*[VT_R4:0]*/ __fastcall get_Top()
  {
    _TDispID _dispid(/* Top */ DISPID(21));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Width(float /*[VT_R4:0]*/ Value)
  {
    _TDispID _dispid(/* Width */ DISPID(22));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  float /*[VT_R4:0]*/ __fastcall get_Width()
  {
    _TDispID _dispid(/* Width */ DISPID(22));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Shape(Addflow5lib_tlb::ShapeConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* Shape */ DISPID(19));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ShapeConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::ShapeConstants /*[VT_USERDEFINED:0]*/ __fastcall get_Shape()
  {
    _TDispID _dispid(/* Shape */ DISPID(19));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::ShapeConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_Selected(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Selected */ DISPID(10));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Selected()
  {
    _TDispID _dispid(/* Selected */ DISPID(10));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_DrawStyle(Addflow5lib_tlb::DrawStyleConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* DrawStyle */ DISPID(15));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::DrawStyleConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::DrawStyleConstants /*[VT_USERDEFINED:0]*/ __fastcall get_DrawStyle()
  {
    _TDispID _dispid(/* DrawStyle */ DISPID(15));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::DrawStyleConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_Left(float /*[VT_R4:0]*/ Value)
  {
    _TDispID _dispid(/* Left */ DISPID(20));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  float /*[VT_R4:0]*/ __fastcall get_Left()
  {
    _TDispID _dispid(/* Left */ DISPID(20));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_DrawColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
  {
    _TDispID _dispid(/* DrawColor */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall get_DrawColor()
  {
    _TDispID _dispid(/* DrawColor */ DISPID(4));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_OutLinks(Addflow5lib_tlb::afLinks* /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* OutLinks */ DISPID(26));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afLinks* /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::afLinks* /*[VT_USERDEFINED:1]*/ __fastcall get_OutLinks()
  {
    _TDispID _dispid(/* OutLinks */ DISPID(26));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::afLinks* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_Height(float /*[VT_R4:0]*/ Value)
  {
    _TDispID _dispid(/* Height */ DISPID(23));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  float /*[VT_R4:0]*/ __fastcall get_Height()
  {
    _TDispID _dispid(/* Height */ DISPID(23));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Index(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* Index */ DISPID(24));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_Index()
  {
    _TDispID _dispid(/* Index */ DISPID(24));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Key(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* Key */ DISPID(27));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Key()
  {
    _TDispID _dispid(/* Key */ DISPID(27));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Links(Addflow5lib_tlb::afLinks* /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* Links */ DISPID(28));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afLinks* /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::afLinks* /*[VT_USERDEFINED:1]*/ __fastcall get_Links()
  {
    _TDispID _dispid(/* Links */ DISPID(28));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::afLinks* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_Hidden(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Hidden */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Hidden()
  {
    _TDispID _dispid(/* Hidden */ DISPID(1));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_InLinks(Addflow5lib_tlb::afLinks* /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* InLinks */ DISPID(25));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afLinks* /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::afLinks* /*[VT_USERDEFINED:1]*/ __fastcall get_InLinks()
  {
    _TDispID _dispid(/* InLinks */ DISPID(25));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::afLinks* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_ToolTip(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* ToolTip */ DISPID(30));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_ToolTip()
  {
    _TDispID _dispid(/* ToolTip */ DISPID(30));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_UserData(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* UserData */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_UserData()
  {
    _TDispID _dispid(/* UserData */ DISPID(6));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_FillColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
  {
    _TDispID _dispid(/* FillColor */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall get_FillColor()
  {
    _TDispID _dispid(/* FillColor */ DISPID(3));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Transparent(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Transparent */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Transparent()
  {
    _TDispID _dispid(/* Transparent */ DISPID(2));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Marked(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Marked */ DISPID(7));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Marked()
  {
    _TDispID _dispid(/* Marked */ DISPID(7));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PicturePosition(Addflow5lib_tlb::PicturePositionConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* PicturePosition */ DISPID(29));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::PicturePositionConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::PicturePositionConstants /*[VT_USERDEFINED:0]*/ __fastcall get_PicturePosition()
  {
    _TDispID _dispid(/* PicturePosition */ DISPID(29));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::PicturePositionConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_Picture(IPictureDisp** /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* Picture */ DISPID(16));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (IPictureDisp** /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  IPictureDisp** /*[VT_USERDEFINED:1]*/ __fastcall get_Picture()
  {
    _TDispID _dispid(/* Picture */ DISPID(16));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (IPictureDisp** /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_Shadow(Addflow5lib_tlb::ShadowConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* Shadow */ DISPID(36));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ShadowConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::ShadowConstants /*[VT_USERDEFINED:0]*/ __fastcall get_Shadow()
  {
    _TDispID _dispid(/* Shadow */ DISPID(36));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::ShadowConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_Logical(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Logical */ DISPID(31));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Logical()
  {
    _TDispID _dispid(/* Logical */ DISPID(31));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ShapeOrientation(short /*[VT_I2:0]*/ Value)
  {
    _TDispID _dispid(/* ShapeOrientation */ DISPID(32));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  short /*[VT_I2:0]*/ __fastcall get_ShapeOrientation()
  {
    _TDispID _dispid(/* ShapeOrientation */ DISPID(32));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_PictureIndex(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* PictureIndex */ DISPID(43));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_PictureIndex()
  {
    _TDispID _dispid(/* PictureIndex */ DISPID(43));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_yScrollable(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* yScrollable */ DISPID(34));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_yScrollable()
  {
    _TDispID _dispid(/* yScrollable */ DISPID(34));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_EditMode(Addflow5lib_tlb::EditModeConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* EditMode */ DISPID(35));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::EditModeConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::EditModeConstants /*[VT_USERDEFINED:0]*/ __fastcall get_EditMode()
  {
    _TDispID _dispid(/* EditMode */ DISPID(35));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::EditModeConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_xScrollable(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* xScrollable */ DISPID(33));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_xScrollable()
  {
    _TDispID _dispid(/* xScrollable */ DISPID(33));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ZOrderIndex(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* ZOrderIndex */ DISPID(37));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_ZOrderIndex()
  {
    _TDispID _dispid(/* ZOrderIndex */ DISPID(37));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_BackMode(Addflow5lib_tlb::BackModeConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* BackMode */ DISPID(38));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::BackModeConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::BackModeConstants /*[VT_USERDEFINED:0]*/ __fastcall get_BackMode()
  {
    _TDispID _dispid(/* BackMode */ DISPID(38));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::BackModeConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_XMoveable(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* XMoveable */ DISPID(39));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_XMoveable()
  {
    _TDispID _dispid(/* XMoveable */ DISPID(39));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_YMoveable(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* YMoveable */ DISPID(40));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_YMoveable()
  {
    _TDispID _dispid(/* YMoveable */ DISPID(40));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_XSizeable(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* XSizeable */ DISPID(41));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_XSizeable()
  {
    _TDispID _dispid(/* XSizeable */ DISPID(41));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_YSizeable(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* YSizeable */ DISPID(42));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_YSizeable()
  {
    _TDispID _dispid(/* YSizeable */ DISPID(42));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_CustomShapeIndex(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* CustomShapeIndex */ DISPID(52));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_CustomShapeIndex()
  {
    _TDispID _dispid(/* CustomShapeIndex */ DISPID(52));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Moveable(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Moveable */ DISPID(48));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Moveable()
  {
    _TDispID _dispid(/* Moveable */ DISPID(48));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Sizeable(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Sizeable */ DISPID(49));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Sizeable()
  {
    _TDispID _dispid(/* Sizeable */ DISPID(49));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_TagVariant(VARIANT /*[VT_VARIANT:0]*/ Value)
  {
    _TDispID _dispid(/* TagVariant */ DISPID(44));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT /*[VT_VARIANT:0]*/ __fastcall get_TagVariant()
  {
    _TDispID _dispid(/* TagVariant */ DISPID(44));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Alignment(Addflow5lib_tlb::AlignmentConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* Alignment */ DISPID(17));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::AlignmentConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::AlignmentConstants /*[VT_USERDEFINED:0]*/ __fastcall get_Alignment()
  {
    _TDispID _dispid(/* Alignment */ DISPID(17));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::AlignmentConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_AutoSize(Addflow5lib_tlb::AutoSizeConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* AutoSize */ DISPID(18));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::AutoSizeConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::AutoSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall get_AutoSize()
  {
    _TDispID _dispid(/* AutoSize */ DISPID(18));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::AutoSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_MaxDegree(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* MaxDegree */ DISPID(47));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_MaxDegree()
  {
    _TDispID _dispid(/* MaxDegree */ DISPID(47));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_MaxInDegree(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* MaxInDegree */ DISPID(45));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_MaxInDegree()
  {
    _TDispID _dispid(/* MaxInDegree */ DISPID(45));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Gradient(Addflow5lib_tlb::GradientConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* Gradient */ DISPID(55));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::GradientConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::GradientConstants /*[VT_USERDEFINED:0]*/ __fastcall get_Gradient()
  {
    _TDispID _dispid(/* Gradient */ DISPID(55));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::GradientConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_xTextMargin(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* xTextMargin */ DISPID(50));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_xTextMargin()
  {
    _TDispID _dispid(/* xTextMargin */ DISPID(50));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_yTextMargin(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* yTextMargin */ DISPID(51));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_yTextMargin()
  {
    _TDispID _dispid(/* yTextMargin */ DISPID(51));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_MaxOutDegree(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* MaxOutDegree */ DISPID(46));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_MaxOutDegree()
  {
    _TDispID _dispid(/* MaxOutDegree */ DISPID(46));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_OwnerDraw(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* OwnerDraw */ DISPID(53));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_OwnerDraw()
  {
    _TDispID _dispid(/* OwnerDraw */ DISPID(53));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_GradientColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
  {
    _TDispID _dispid(/* GradientColor */ DISPID(54));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall get_GradientColor()
  {
    _TDispID _dispid(/* GradientColor */ DISPID(54));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   float           DrawWidth = {read = get_DrawWidth, write = set_DrawWidth};
  __property   VARIANT_BOOL    Selectable = {read = get_Selectable, write = set_Selectable};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   ::OLE_COLOR     ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   long            ZOrder = {read = get_ZOrder, write = set_ZOrder};
  __property   IFontDisp**     Font = {read = get_Font, write = set_Font};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   Addflow5lib_tlb::ShapeConstants Shape = {read = get_Shape, write = set_Shape};
  __property   VARIANT_BOOL    Selected = {read = get_Selected, write = set_Selected};
  __property   Addflow5lib_tlb::DrawStyleConstants DrawStyle = {read = get_DrawStyle, write = set_DrawStyle};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   ::OLE_COLOR     DrawColor = {read = get_DrawColor, write = set_DrawColor};
  __property   Addflow5lib_tlb::afLinks* OutLinks = {read = get_OutLinks, write = set_OutLinks};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key, write = set_Key};
  __property   Addflow5lib_tlb::afLinks* Links = {read = get_Links, write = set_Links};
  __property   VARIANT_BOOL    Hidden = {read = get_Hidden, write = set_Hidden};
  __property   Addflow5lib_tlb::afLinks* InLinks = {read = get_InLinks, write = set_InLinks};
  __property   BSTR            ToolTip = {read = get_ToolTip, write = set_ToolTip};
  __property   long            UserData = {read = get_UserData, write = set_UserData};
  __property   ::OLE_COLOR     FillColor = {read = get_FillColor, write = set_FillColor};
  __property   VARIANT_BOOL    Transparent = {read = get_Transparent, write = set_Transparent};
  __property   VARIANT_BOOL    Marked = {read = get_Marked, write = set_Marked};
  __property   Addflow5lib_tlb::PicturePositionConstants PicturePosition = {read = get_PicturePosition, write = set_PicturePosition};
  __property   IPictureDisp**  Picture = {read = get_Picture, write = set_Picture};
  __property   Addflow5lib_tlb::ShadowConstants Shadow = {read = get_Shadow, write = set_Shadow};
  __property   VARIANT_BOOL    Logical = {read = get_Logical, write = set_Logical};
  __property   short           ShapeOrientation = {read = get_ShapeOrientation, write = set_ShapeOrientation};
  __property   long            PictureIndex = {read = get_PictureIndex, write = set_PictureIndex};
  __property   VARIANT_BOOL    yScrollable = {read = get_yScrollable, write = set_yScrollable};
  __property   Addflow5lib_tlb::EditModeConstants EditMode = {read = get_EditMode, write = set_EditMode};
  __property   VARIANT_BOOL    xScrollable = {read = get_xScrollable, write = set_xScrollable};
  __property   long            ZOrderIndex = {read = get_ZOrderIndex, write = set_ZOrderIndex};
  __property   Addflow5lib_tlb::BackModeConstants BackMode = {read = get_BackMode, write = set_BackMode};
  __property   VARIANT_BOOL    XMoveable = {read = get_XMoveable, write = set_XMoveable};
  __property   VARIANT_BOOL    YMoveable = {read = get_YMoveable, write = set_YMoveable};
  __property   VARIANT_BOOL    XSizeable = {read = get_XSizeable, write = set_XSizeable};
  __property   VARIANT_BOOL    YSizeable = {read = get_YSizeable, write = set_YSizeable};
  __property   long            CustomShapeIndex = {read = get_CustomShapeIndex, write = set_CustomShapeIndex};
  __property   VARIANT_BOOL    Moveable = {read = get_Moveable, write = set_Moveable};
  __property   VARIANT_BOOL    Sizeable = {read = get_Sizeable, write = set_Sizeable};
  __property   VARIANT         TagVariant = {read = get_TagVariant, write = set_TagVariant};
  __property   Addflow5lib_tlb::AlignmentConstants Alignment = {read = get_Alignment, write = set_Alignment};
  __property   Addflow5lib_tlb::AutoSizeConstants AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   long            MaxDegree = {read = get_MaxDegree, write = set_MaxDegree};
  __property   long            MaxInDegree = {read = get_MaxInDegree, write = set_MaxInDegree};
  __property   Addflow5lib_tlb::GradientConstants Gradient = {read = get_Gradient, write = set_Gradient};
  __property   long            xTextMargin = {read = get_xTextMargin, write = set_xTextMargin};
  __property   long            yTextMargin = {read = get_yTextMargin, write = set_yTextMargin};
  __property   long            MaxOutDegree = {read = get_MaxOutDegree, write = set_MaxOutDegree};
  __property   VARIANT_BOOL    OwnerDraw = {read = get_OwnerDraw, write = set_OwnerDraw};
  __property   ::OLE_COLOR     GradientColor = {read = get_GradientColor, write = set_GradientColor};
};
// *********************************************************************//
// Interface: ILinks
// Flags:     (4112) Hidden Dispatchable
// GUID:      {AA91F32C-DC66-4628-AFC7-05EB72B637D7}
// *********************************************************************//
interface ILinks : public TDispWrapper<IDispatch>
{
  void __fastcall Clear()
  {
    _TDispID _dispid(/* Clear */ DISPID(2));
    OleProcedure(_dispid);
  }

  Addflow5lib_tlb::afLink* __fastcall Item(VARIANT Index)
  {
    _TDispID _dispid(/* Item */ DISPID(0));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleFunction(_dispid, _args);
    return (Addflow5lib_tlb::afLink* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  LPUNKNOWN __fastcall _NewEnum()
  {
    _TDispID _dispid(/* _NewEnum */ DISPID(-4));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Addflow5lib_tlb::afLink* __fastcall Add(Addflow5lib_tlb::afNode* nodx)
  {
    _TDispID _dispid(/* Add */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)nodx /*[VT_USERDEFINED:1]*/;
    OleFunction(_dispid, _args);
    return (Addflow5lib_tlb::afLink* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  void __fastcall Remove(VARIANT Index)
  {
    _TDispID _dispid(/* Remove */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_VARIANT:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall set_Count(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* Count */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_Count()
  {
    _TDispID _dispid(/* Count */ DISPID(1));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   long            Count = {read = get_Count, write = set_Count};
};
// *********************************************************************//
// Interface: ILink
// Flags:     (4112) Hidden Dispatchable
// GUID:      {1937F811-DFDA-4223-8F31-BDC1D0D16767}
// *********************************************************************//
interface ILink : public TDispWrapper<IDispatch>
{
  void __fastcall Refresh()
  {
    _TDispID _dispid(/* Refresh */ DISPID(46));
    OleProcedure(_dispid);
  }

  void __fastcall PropertyPage(BSTR title, long page)
  {
    _TDispID _dispid(/* PropertyPage */ DISPID(45));
    TAutoArgs<2> _args;
    _args[1] = title /*[VT_BSTR:0]*/;
    _args[2] = page /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  Addflow5lib_tlb::afLink* __fastcall Clone(Addflow5lib_tlb::afNode* Org, 
                                            Addflow5lib_tlb::afNode* Dst)
  {
    _TDispID _dispid(/* Clone */ DISPID(44));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)Org /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)Dst /*[VT_USERDEFINED:1]*/;
    OleFunction(_dispid, _args);
    return (Addflow5lib_tlb::afLink* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  VARIANT_BOOL __fastcall EnsureVisible()
  {
    _TDispID _dispid(/* EnsureVisible */ DISPID(43));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall Reverse()
  {
    _TDispID _dispid(/* Reverse */ DISPID(42));
    OleProcedure(_dispid);
  }

  void __fastcall set_ZOrder(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* ZOrder */ DISPID(14));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_ZOrder()
  {
    _TDispID _dispid(/* ZOrder */ DISPID(14));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Selected(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Selected */ DISPID(12));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Selected()
  {
    _TDispID _dispid(/* Selected */ DISPID(12));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Selectable(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Selectable */ DISPID(13));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Selectable()
  {
    _TDispID _dispid(/* Selectable */ DISPID(13));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ForeColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
  {
    _TDispID _dispid(/* ForeColor */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall get_ForeColor()
  {
    _TDispID _dispid(/* ForeColor */ DISPID(3));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Dst(Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* Dst */ DISPID(21));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afNode* /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ __fastcall get_Dst()
  {
    _TDispID _dispid(/* Dst */ DISPID(21));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::afNode* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_ArrowDst(Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* ArrowDst */ DISPID(19));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ __fastcall get_ArrowDst()
  {
    _TDispID _dispid(/* ArrowDst */ DISPID(19));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::ArrowConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_Org(Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* Org */ DISPID(20));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afNode* /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ __fastcall get_Org()
  {
    _TDispID _dispid(/* Org */ DISPID(20));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::afNode* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_Font(IFontDisp** /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* Font */ DISPID(15));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (IFontDisp** /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  IFontDisp** /*[VT_USERDEFINED:1]*/ __fastcall get_Font()
  {
    _TDispID _dispid(/* Font */ DISPID(15));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (IFontDisp** /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_Text(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* Text */ DISPID(10));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Text()
  {
    _TDispID _dispid(/* Text */ DISPID(10));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Tag(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* Tag */ DISPID(11));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Tag()
  {
    _TDispID _dispid(/* Tag */ DISPID(11));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ExtraPoints(Addflow5lib_tlb::afLinkPoints* /*[VT_USERDEFINED:1]*/ Value)
  {
    _TDispID _dispid(/* ExtraPoints */ DISPID(22));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afLinkPoints* /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::afLinkPoints* /*[VT_USERDEFINED:1]*/ __fastcall get_ExtraPoints()
  {
    _TDispID _dispid(/* ExtraPoints */ DISPID(22));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::afLinkPoints* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
  }

  void __fastcall set_LinkStyle(Addflow5lib_tlb::LinkStyleConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* LinkStyle */ DISPID(23));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::LinkStyleConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::LinkStyleConstants /*[VT_USERDEFINED:0]*/ __fastcall get_LinkStyle()
  {
    _TDispID _dispid(/* LinkStyle */ DISPID(23));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::LinkStyleConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_Key(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* Key */ DISPID(24));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_Key()
  {
    _TDispID _dispid(/* Key */ DISPID(24));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_InIndex(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* InIndex */ DISPID(25));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_InIndex()
  {
    _TDispID _dispid(/* InIndex */ DISPID(25));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_OutIndex(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* OutIndex */ DISPID(26));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_OutIndex()
  {
    _TDispID _dispid(/* OutIndex */ DISPID(26));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_UserData(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* UserData */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_UserData()
  {
    _TDispID _dispid(/* UserData */ DISPID(4));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_DrawColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
  {
    _TDispID _dispid(/* DrawColor */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall get_DrawColor()
  {
    _TDispID _dispid(/* DrawColor */ DISPID(2));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Marked(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Marked */ DISPID(6));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Marked()
  {
    _TDispID _dispid(/* Marked */ DISPID(6));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Hidden(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Hidden */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Hidden()
  {
    _TDispID _dispid(/* Hidden */ DISPID(1));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Rigid(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Rigid */ DISPID(5));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Rigid()
  {
    _TDispID _dispid(/* Rigid */ DISPID(5));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ArrowOrg(Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* ArrowOrg */ DISPID(18));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ __fastcall get_ArrowOrg()
  {
    _TDispID _dispid(/* ArrowOrg */ DISPID(18));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::ArrowConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_AdjustOrg(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* AdjustOrg */ DISPID(7));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_AdjustOrg()
  {
    _TDispID _dispid(/* AdjustOrg */ DISPID(7));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_AdjustDst(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* AdjustDst */ DISPID(8));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_AdjustDst()
  {
    _TDispID _dispid(/* AdjustDst */ DISPID(8));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ToolTip(BSTR /*[VT_BSTR:0]*/ Value)
  {
    _TDispID _dispid(/* ToolTip */ DISPID(28));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  BSTR /*[VT_BSTR:0]*/ __fastcall get_ToolTip()
  {
    _TDispID _dispid(/* ToolTip */ DISPID(28));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SizeArrowMid(Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* SizeArrowMid */ DISPID(39));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowSizeConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall get_SizeArrowMid()
  {
    _TDispID _dispid(/* SizeArrowMid */ DISPID(39));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::ArrowSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_Logical(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Logical */ DISPID(27));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Logical()
  {
    _TDispID _dispid(/* Logical */ DISPID(27));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_OrthogonalDynamic(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* OrthogonalDynamic */ DISPID(9));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_OrthogonalDynamic()
  {
    _TDispID _dispid(/* OrthogonalDynamic */ DISPID(9));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Stretchable(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* Stretchable */ DISPID(30));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_Stretchable()
  {
    _TDispID _dispid(/* Stretchable */ DISPID(30));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_BackMode(Addflow5lib_tlb::BackModeConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* BackMode */ DISPID(32));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::BackModeConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::BackModeConstants /*[VT_USERDEFINED:0]*/ __fastcall get_BackMode()
  {
    _TDispID _dispid(/* BackMode */ DISPID(32));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::BackModeConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_ArrowMid(Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* ArrowMid */ DISPID(29));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ __fastcall get_ArrowMid()
  {
    _TDispID _dispid(/* ArrowMid */ DISPID(29));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::ArrowConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_ZOrderIndex(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* ZOrderIndex */ DISPID(31));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_ZOrderIndex()
  {
    _TDispID _dispid(/* ZOrderIndex */ DISPID(31));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_TextSegment(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* TextSegment */ DISPID(36));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_TextSegment()
  {
    _TDispID _dispid(/* TextSegment */ DISPID(36));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_OrientedText(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* OrientedText */ DISPID(33));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_OrientedText()
  {
    _TDispID _dispid(/* OrientedText */ DISPID(33));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_ShowJump(Addflow5lib_tlb::ShowJumpConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* ShowJump */ DISPID(35));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ShowJumpConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::ShowJumpConstants /*[VT_USERDEFINED:0]*/ __fastcall get_ShowJump()
  {
    _TDispID _dispid(/* ShowJump */ DISPID(35));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::ShowJumpConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_DrawWidth(float /*[VT_R4:0]*/ Value)
  {
    _TDispID _dispid(/* DrawWidth */ DISPID(16));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  float /*[VT_R4:0]*/ __fastcall get_DrawWidth()
  {
    _TDispID _dispid(/* DrawWidth */ DISPID(16));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_DrawStyle(Addflow5lib_tlb::DrawStyleConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* DrawStyle */ DISPID(17));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::DrawStyleConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::DrawStyleConstants /*[VT_USERDEFINED:0]*/ __fastcall get_DrawStyle()
  {
    _TDispID _dispid(/* DrawStyle */ DISPID(17));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::DrawStyleConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_OwnerDraw(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* OwnerDraw */ DISPID(41));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_OwnerDraw()
  {
    _TDispID _dispid(/* OwnerDraw */ DISPID(41));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SizeArrowOrg(Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* SizeArrowOrg */ DISPID(38));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowSizeConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall get_SizeArrowOrg()
  {
    _TDispID _dispid(/* SizeArrowOrg */ DISPID(38));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::ArrowSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
  }

  void __fastcall set_RoundedCorner(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
  {
    _TDispID _dispid(/* RoundedCorner */ DISPID(40));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall get_RoundedCorner()
  {
    _TDispID _dispid(/* RoundedCorner */ DISPID(40));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_TagVariant(VARIANT /*[VT_VARIANT:0]*/ Value)
  {
    _TDispID _dispid(/* TagVariant */ DISPID(34));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  VARIANT /*[VT_VARIANT:0]*/ __fastcall get_TagVariant()
  {
    _TDispID _dispid(/* TagVariant */ DISPID(34));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_SizeArrowDst(Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ Value)
  {
    _TDispID _dispid(/* SizeArrowDst */ DISPID(37));
    TAutoArgs<1> _args;
    _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowSizeConstants /*[C2]*/)Value;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall get_SizeArrowDst()
  {
    _TDispID _dispid(/* SizeArrowDst */ DISPID(37));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::ArrowSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
  }


  __property   long            ZOrder = {read = get_ZOrder, write = set_ZOrder};
  __property   VARIANT_BOOL    Selected = {read = get_Selected, write = set_Selected};
  __property   VARIANT_BOOL    Selectable = {read = get_Selectable, write = set_Selectable};
  __property   ::OLE_COLOR     ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Addflow5lib_tlb::afNode* Dst = {read = get_Dst, write = set_Dst};
  __property   Addflow5lib_tlb::ArrowConstants ArrowDst = {read = get_ArrowDst, write = set_ArrowDst};
  __property   Addflow5lib_tlb::afNode* Org = {read = get_Org, write = set_Org};
  __property   IFontDisp**     Font = {read = get_Font, write = set_Font};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   Addflow5lib_tlb::afLinkPoints* ExtraPoints = {read = get_ExtraPoints, write = set_ExtraPoints};
  __property   Addflow5lib_tlb::LinkStyleConstants LinkStyle = {read = get_LinkStyle, write = set_LinkStyle};
  __property   BSTR            Key = {read = get_Key, write = set_Key};
  __property   long            InIndex = {read = get_InIndex, write = set_InIndex};
  __property   long            OutIndex = {read = get_OutIndex, write = set_OutIndex};
  __property   long            UserData = {read = get_UserData, write = set_UserData};
  __property   ::OLE_COLOR     DrawColor = {read = get_DrawColor, write = set_DrawColor};
  __property   VARIANT_BOOL    Marked = {read = get_Marked, write = set_Marked};
  __property   VARIANT_BOOL    Hidden = {read = get_Hidden, write = set_Hidden};
  __property   VARIANT_BOOL    Rigid = {read = get_Rigid, write = set_Rigid};
  __property   Addflow5lib_tlb::ArrowConstants ArrowOrg = {read = get_ArrowOrg, write = set_ArrowOrg};
  __property   VARIANT_BOOL    AdjustOrg = {read = get_AdjustOrg, write = set_AdjustOrg};
  __property   VARIANT_BOOL    AdjustDst = {read = get_AdjustDst, write = set_AdjustDst};
  __property   BSTR            ToolTip = {read = get_ToolTip, write = set_ToolTip};
  __property   Addflow5lib_tlb::ArrowSizeConstants SizeArrowMid = {read = get_SizeArrowMid, write = set_SizeArrowMid};
  __property   VARIANT_BOOL    Logical = {read = get_Logical, write = set_Logical};
  __property   VARIANT_BOOL    OrthogonalDynamic = {read = get_OrthogonalDynamic, write = set_OrthogonalDynamic};
  __property   VARIANT_BOOL    Stretchable = {read = get_Stretchable, write = set_Stretchable};
  __property   Addflow5lib_tlb::BackModeConstants BackMode = {read = get_BackMode, write = set_BackMode};
  __property   Addflow5lib_tlb::ArrowConstants ArrowMid = {read = get_ArrowMid, write = set_ArrowMid};
  __property   long            ZOrderIndex = {read = get_ZOrderIndex, write = set_ZOrderIndex};
  __property   long            TextSegment = {read = get_TextSegment, write = set_TextSegment};
  __property   VARIANT_BOOL    OrientedText = {read = get_OrientedText, write = set_OrientedText};
  __property   Addflow5lib_tlb::ShowJumpConstants ShowJump = {read = get_ShowJump, write = set_ShowJump};
  __property   float           DrawWidth = {read = get_DrawWidth, write = set_DrawWidth};
  __property   Addflow5lib_tlb::DrawStyleConstants DrawStyle = {read = get_DrawStyle, write = set_DrawStyle};
  __property   VARIANT_BOOL    OwnerDraw = {read = get_OwnerDraw, write = set_OwnerDraw};
  __property   Addflow5lib_tlb::ArrowSizeConstants SizeArrowOrg = {read = get_SizeArrowOrg, write = set_SizeArrowOrg};
  __property   VARIANT_BOOL    RoundedCorner = {read = get_RoundedCorner, write = set_RoundedCorner};
  __property   VARIANT         TagVariant = {read = get_TagVariant, write = set_TagVariant};
  __property   Addflow5lib_tlb::ArrowSizeConstants SizeArrowDst = {read = get_SizeArrowDst, write = set_SizeArrowDst};
};
// *********************************************************************//
// Interface: ILinkPoints
// Flags:     (4112) Hidden Dispatchable
// GUID:      {E625F3B1-CB36-4ABA-8FAF-E5E6B1A7A72B}
// *********************************************************************//
interface ILinkPoints : public TDispWrapper<IDispatch>
{
  Addflow5lib_tlb::afLinkPoint* __fastcall get_Item(long Index)
  {
    _TDispID _dispid(/* Item */ DISPID(0));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::afLinkPoint* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  void __fastcall Clear()
  {
    _TDispID _dispid(/* Clear */ DISPID(2));
    OleProcedure(_dispid);
  }

  void __fastcall Remove(long Index)
  {
    _TDispID _dispid(/* Remove */ DISPID(3));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall _set_Item(long Index, Addflow5lib_tlb::afLinkPoint* Param2)
  {
    _TDispID _dispid(/* Item */ DISPID(0));
    TAutoArgs<2> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Addflow5lib_tlb::afLinkPoint*)Param2 /*[VT_USERDEFINED:1]*/;
    OlePropertyPut(_dispid, _args);
  }

  Addflow5lib_tlb::afLinkPoint* __fastcall Add(float x, float y)
  {
    _TDispID _dispid(/* Add */ DISPID(4));
    TAutoArgs<2> _args;
    _args[1] = x /*[VT_R4:0]*/;
    _args[2] = y /*[VT_R4:0]*/;
    OleFunction(_dispid, _args);
    return (Addflow5lib_tlb::afLinkPoint* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  LPUNKNOWN __fastcall _NewEnum()
  {
    _TDispID _dispid(/* _NewEnum */ DISPID(-4));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_Count(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* Count */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_Count()
  {
    _TDispID _dispid(/* Count */ DISPID(1));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   long            Count = {read = get_Count, write = set_Count};
};
// *********************************************************************//
// Interface: ILinkPoint
// Flags:     (4112) Hidden Dispatchable
// GUID:      {3C98496E-F2CA-43BE-A0C3-8EB1C2FA9259}
// *********************************************************************//
interface ILinkPoint : public TDispWrapper<IDispatch>
{
  void __fastcall set_x(float /*[VT_R4:0]*/ Value)
  {
    _TDispID _dispid(/* x */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  float /*[VT_R4:0]*/ __fastcall get_x()
  {
    _TDispID _dispid(/* x */ DISPID(1));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall set_y(float /*[VT_R4:0]*/ Value)
  {
    _TDispID _dispid(/* y */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  float /*[VT_R4:0]*/ __fastcall get_y()
  {
    _TDispID _dispid(/* y */ DISPID(2));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   float           x = {read = get_x, write = set_x};
  __property   float           y = {read = get_y, write = set_y};
};
// *********************************************************************//
// Interface: ISelNodes
// Flags:     (4096) Dispatchable
// GUID:      {54BBB3DA-D31C-4471-8C2F-C68A074B3D1C}
// *********************************************************************//
interface ISelNodes : public TDispWrapper<IDispatch>
{
  void __fastcall Add(Addflow5lib_tlb::afNode* node)
  {
    _TDispID _dispid(/* Add */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)node /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall Clear()
  {
    _TDispID _dispid(/* Clear */ DISPID(3));
    OleProcedure(_dispid);
  }

  LPUNKNOWN __fastcall _NewEnum()
  {
    _TDispID _dispid(/* _NewEnum */ DISPID(-4));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall Remove(Addflow5lib_tlb::afNode* node)
  {
    _TDispID _dispid(/* Remove */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)node /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  Addflow5lib_tlb::afNode* __fastcall Item(long Index)
  {
    _TDispID _dispid(/* Item */ DISPID(0));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return (Addflow5lib_tlb::afNode* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  void __fastcall set_Count(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* Count */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_Count()
  {
    _TDispID _dispid(/* Count */ DISPID(1));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   long            Count = {read = get_Count, write = set_Count};
};
// *********************************************************************//
// Interface: ISelLinks
// Flags:     (4096) Dispatchable
// GUID:      {75795457-BA5C-4322-A818-D62B7FF7C0D3}
// *********************************************************************//
interface ISelLinks : public TDispWrapper<IDispatch>
{
  void __fastcall Add(Addflow5lib_tlb::afLink* link)
  {
    _TDispID _dispid(/* Add */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afLink*)link /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall Clear()
  {
    _TDispID _dispid(/* Clear */ DISPID(3));
    OleProcedure(_dispid);
  }

  LPUNKNOWN __fastcall _NewEnum()
  {
    _TDispID _dispid(/* _NewEnum */ DISPID(-4));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  void __fastcall Remove(Addflow5lib_tlb::afLink* link)
  {
    _TDispID _dispid(/* Remove */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afLink*)link /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  Addflow5lib_tlb::afLink* __fastcall Item(long Index)
  {
    _TDispID _dispid(/* Item */ DISPID(0));
    TAutoArgs<1> _args;
    _args[1] = Index /*[VT_I4:0]*/;
    OleFunction(_dispid, _args);
    return (Addflow5lib_tlb::afLink* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  void __fastcall set_Count(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* Count */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_Count()
  {
    _TDispID _dispid(/* Count */ DISPID(1));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   long            Count = {read = get_Count, write = set_Count};
};
// *********************************************************************//
// Interface: IPictures
// Flags:     (4096) Dispatchable
// GUID:      {9BDEDFA3-5C40-4BCE-B1C5-4D3E40E0F8A2}
// *********************************************************************//
interface IPictures : public TDispWrapper<IDispatch>
{
  void __fastcall Add(IPictureDisp** Picture)
  {
    _TDispID _dispid(/* Add */ DISPID(2));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(IPictureDisp**)Picture /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall Clear()
  {
    _TDispID _dispid(/* Clear */ DISPID(3));
    OleProcedure(_dispid);
  }

  LPUNKNOWN __fastcall _NewEnum()
  {
    _TDispID _dispid(/* _NewEnum */ DISPID(-4));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  IPictureDisp** __fastcall get_Item(long idx)
  {
    _TDispID _dispid(/* Item */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = idx /*[VT_I4:0]*/;
    OlePropertyGet(_dispid, _args);
    return (IPictureDisp** /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  IPictureDisp** __fastcall get__Item(long idx)
  {
    _TDispID _dispid(/* _Item */ DISPID(0));
    TAutoArgs<1> _args;
    _args[1] = idx /*[VT_I4:0]*/;
    OlePropertyGet(_dispid, _args);
    return (IPictureDisp** /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  void __fastcall set_Count(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* Count */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_Count()
  {
    _TDispID _dispid(/* Count */ DISPID(1));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   long            Count = {read = get_Count, write = set_Count};
};
// *********************************************************************//
// Interface: ICustomShapes
// Flags:     (4096) Dispatchable
// GUID:      {77BF7BAC-C68A-40F7-8B1A-F62DE2980D59}
// *********************************************************************//
interface ICustomShapes : public TDispWrapper<IDispatch>
{
  void __fastcall Clear()
  {
    _TDispID _dispid(/* Clear */ DISPID(2));
    OleProcedure(_dispid);
  }

  Addflow5lib_tlb::afCustomShape* __fastcall get_Item(long idx)
  {
    _TDispID _dispid(/* Item */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = idx /*[VT_I4:0]*/;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::afCustomShape* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  LPUNKNOWN __fastcall _NewEnum()
  {
    _TDispID _dispid(/* _NewEnum */ DISPID(-4));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return _args.GetRetVariant();
  }

  Addflow5lib_tlb::afCustomShape* __fastcall get__Item(long idx)
  {
    _TDispID _dispid(/* _Item */ DISPID(0));
    TAutoArgs<1> _args;
    _args[1] = idx /*[VT_I4:0]*/;
    OlePropertyGet(_dispid, _args);
    return (Addflow5lib_tlb::afCustomShape* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  Addflow5lib_tlb::afCustomShape* __fastcall Add()
  {
    _TDispID _dispid(/* Add */ DISPID(3));
    TAutoArgs<0> _args;
    OleFunction(_dispid, _args);
    return (Addflow5lib_tlb::afCustomShape* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
  }

  void __fastcall set_Count(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* Count */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_Count()
  {
    _TDispID _dispid(/* Count */ DISPID(1));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   long            Count = {read = get_Count, write = set_Count};
};
// *********************************************************************//
// Interface: ICustomShape
// Flags:     (4096) Dispatchable
// GUID:      {1B61DB7B-D136-4EB6-A462-DF9AEF115812}
// *********************************************************************//
interface ICustomShape : public TDispWrapper<IDispatch>
{
  void __fastcall AddPoint(short x, short y)
  {
    _TDispID _dispid(/* AddPoint */ DISPID(2));
    TAutoArgs<2> _args;
    _args[1] = x /*[VT_I2:0]*/;
    _args[2] = y /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall Clear()
  {
    _TDispID _dispid(/* Clear */ DISPID(3));
    OleProcedure(_dispid);
  }

  void __fastcall set_Count(long /*[VT_I4:0]*/ Value)
  {
    _TDispID _dispid(/* Count */ DISPID(1));
    TAutoArgs<1> _args;
    _args[1] = Value;
    OlePropertyPut(_dispid, _args);
  }

  long /*[VT_I4:0]*/ __fastcall get_Count()
  {
    _TDispID _dispid(/* Count */ DISPID(1));
    TAutoArgs<0> _args;
    OlePropertyGet(_dispid, _args);
    return _args.GetRetVariant();
  }


  __property   long            Count = {read = get_Count, write = set_Count};
};
// *********************************************************************//
// Interface: _DAddFlowEvents
// Flags:     (4096) Dispatchable
// GUID:      {9431AEF2-26DB-42B6-869F-48D0C9763F08}
// *********************************************************************//
interface _DAddFlowEvents : public TDispWrapper<IDispatch>
{
  void __fastcall _Click()
  {
    _TDispID _dispid(/* Click */ DISPID(-600));
    OleProcedure(_dispid);
  }

  void __fastcall DblClick()
  {
    _TDispID _dispid(/* DblClick */ DISPID(-601));
    OleProcedure(_dispid);
  }

  void __fastcall MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseDown */ DISPID(-605));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseMove */ DISPID(-606));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
  {
    _TDispID _dispid(/* MouseUp */ DISPID(-607));
    TAutoArgs<4> _args;
    _args[1] = Button /*[VT_I2:0]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    _args[3] = x /*[VT_I4:0]*/;
    _args[4] = y /*[VT_I4:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall KeyDown(short* KeyCode, short Shift)
  {
    _TDispID _dispid(/* KeyDown */ DISPID(-602));
    TAutoArgs<2> _args;
    _args[1] = KeyCode /*[VT_I2:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall KeyPress(short* KeyAscii)
  {
    _TDispID _dispid(/* KeyPress */ DISPID(-603));
    TAutoArgs<1> _args;
    _args[1] = KeyAscii /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall KeyUp(short* KeyCode, short Shift)
  {
    _TDispID _dispid(/* KeyUp */ DISPID(-604));
    TAutoArgs<2> _args;
    _args[1] = KeyCode /*[VT_I2:1]*/;
    _args[2] = Shift /*[VT_I2:0]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall Error(short Number, BSTR* Description, long Scode, BSTR Source, BSTR HelpFile, 
                        long HelpContext, VARIANT_BOOL* CancelDisplay)
  {
    _TDispID _dispid(/* Error */ DISPID(-608));
    TAutoArgs<7> _args;
    _args[1] = Number /*[VT_I2:0]*/;
    _args[2] = Description /*[VT_BSTR:1]*/;
    _args[3] = Scode /*[VT_I4:0]*/;
    _args[4] = Source /*[VT_BSTR:0]*/;
    _args[5] = HelpFile /*[VT_BSTR:0]*/;
    _args[6] = HelpContext /*[VT_I4:0]*/;
    _args[7] = CancelDisplay /*[VT_BOOL:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall Scroll()
  {
    _TDispID _dispid(/* Scroll */ DISPID(1));
    OleProcedure(_dispid);
  }

  void __fastcall afLostFocus()
  {
    _TDispID _dispid(/* afLostFocus */ DISPID(2));
    OleProcedure(_dispid);
  }

  void __fastcall afGotFocus()
  {
    _TDispID _dispid(/* afGotFocus */ DISPID(3));
    OleProcedure(_dispid);
  }

  void __fastcall AfterAddNode(Addflow5lib_tlb::afNode* NewNode)
  {
    _TDispID _dispid(/* AfterAddNode */ DISPID(4));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)NewNode /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall AfterAddLink(Addflow5lib_tlb::afLink* NewLink)
  {
    _TDispID _dispid(/* AfterAddLink */ DISPID(5));
    TAutoArgs<1> _args;
    _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afLink*)NewLink /*[VT_USERDEFINED:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall BeforeAddNode(float Left, float Top, float Width, float Height, short* Cancel)
  {
    _TDispID _dispid(/* BeforeAddNode */ DISPID(6));
    TAutoArgs<5> _args;
    _args[1] = Left /*[VT_R4:0]*/;
    _args[2] = Top /*[VT_R4:0]*/;
    _args[3] = Width /*[VT_R4:0]*/;
    _args[4] = Height /*[VT_R4:0]*/;
    _args[5] = Cancel /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall BeforeAddLink(Addflow5lib_tlb::afNode* Org, Addflow5lib_tlb::afNode* Dst, 
                                short* Cancel)
  {
    _TDispID _dispid(/* BeforeAddLink */ DISPID(7));
    TAutoArgs<3> _args;
    _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)Org /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)Dst /*[VT_USERDEFINED:1]*/;
    _args[3] = Cancel /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall AfterResize()
  {
    _TDispID _dispid(/* AfterResize */ DISPID(8));
    OleProcedure(_dispid);
  }

  void __fastcall AfterMove()
  {
    _TDispID _dispid(/* AfterMove */ DISPID(9));
    OleProcedure(_dispid);
  }

  void __fastcall AfterStretch()
  {
    _TDispID _dispid(/* AfterStretch */ DISPID(10));
    OleProcedure(_dispid);
  }

  void __fastcall AfterSelect()
  {
    _TDispID _dispid(/* AfterSelect */ DISPID(11));
    OleProcedure(_dispid);
  }

  void __fastcall BeforeEdit(Addflow5lib_tlb::afNode* node, short* Cancel)
  {
    _TDispID _dispid(/* BeforeEdit */ DISPID(12));
    TAutoArgs<2> _args;
    _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)node /*[VT_USERDEFINED:1]*/;
    _args[2] = Cancel /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall AfterEdit(Addflow5lib_tlb::afNode* node, short* Cancel, BSTR* NewString)
  {
    _TDispID _dispid(/* AfterEdit */ DISPID(13));
    TAutoArgs<3> _args;
    _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)node /*[VT_USERDEFINED:1]*/;
    _args[2] = Cancel /*[VT_I2:1]*/;
    _args[3] = NewString /*[VT_BSTR:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall BeforeChangeDst(Addflow5lib_tlb::afLink* link, Addflow5lib_tlb::afNode* Dst, 
                                  short* Cancel)
  {
    _TDispID _dispid(/* BeforeChangeDst */ DISPID(14));
    TAutoArgs<3> _args;
    _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afLink*)link /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)Dst /*[VT_USERDEFINED:1]*/;
    _args[3] = Cancel /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall BeforeChangeOrg(Addflow5lib_tlb::afLink* link, Addflow5lib_tlb::afNode* Org, 
                                  short* Cancel)
  {
    _TDispID _dispid(/* BeforeChangeOrg */ DISPID(15));
    TAutoArgs<3> _args;
    _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afLink*)link /*[VT_USERDEFINED:1]*/;
    _args[2] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)Org /*[VT_USERDEFINED:1]*/;
    _args[3] = Cancel /*[VT_I2:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall NodeOwnerDraw(long Hdc, Addflow5lib_tlb::afNode* node, long* Flags)
  {
    _TDispID _dispid(/* NodeOwnerDraw */ DISPID(16));
    TAutoArgs<3> _args;
    _args[1] = Hdc /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)node /*[VT_USERDEFINED:1]*/;
    _args[3] = Flags /*[VT_I4:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall LinkOwnerDraw(long Hdc, Addflow5lib_tlb::afLink* link, long* Flags)
  {
    _TDispID _dispid(/* LinkOwnerDraw */ DISPID(17));
    TAutoArgs<3> _args;
    _args[1] = Hdc /*[VT_I4:0]*/;
    _args[2] = (LPDISPATCH)(Addflow5lib_tlb::afLink*)link /*[VT_USERDEFINED:1]*/;
    _args[3] = Flags /*[VT_I4:1]*/;
    OleProcedure(_dispid, _args);
  }

  void __fastcall DiagramOwnerDraw(long Hdc, long* Flags)
  {
    _TDispID _dispid(/* DiagramOwnerDraw */ DISPID(18));
    TAutoArgs<2> _args;
    _args[1] = Hdc /*[VT_I4:0]*/;
    _args[2] = Flags /*[VT_I4:1]*/;
    OleProcedure(_dispid, _args);
  }


};
#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// DispIntf:  _DAddFlow
// Flags:     (4112) Hidden Dispatchable
// GUID:      {BF12FD4C-504D-4B4D-AC66-210BF90EE59C}
// *********************************************************************//
template<class T>
class _DAddFlowDispT : public TAutoDriver<_DAddFlow>
{
public:
  _DAddFlowDispT(){}

  _DAddFlowDispT(_DAddFlow *pintf)
  {
    TAutoDriver<_DAddFlow>::Bind(pintf, false);
  }

  _DAddFlowDispT(_DAddFlowPtr pintf)
  {
    TAutoDriver<_DAddFlow>::Bind(pintf, true);
  }

  _DAddFlowDispT& operator=(_DAddFlow *pintf)
  {
    TAutoDriver<_DAddFlow>::Bind(pintf, false);
    return *this;
  }

  _DAddFlowDispT& operator=(_DAddFlowPtr pintf)
  {
    TAutoDriver<_DAddFlow>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_AddFlow));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_AddFlow);
  }

  void            __fastcall AboutBox();
  Addflow5lib_tlb::afLink* __fastcall AddLink(Addflow5lib_tlb::afNode* Org, 
                                              Addflow5lib_tlb::afNode* Dst);
  IPictureDisp**  __fastcall ExportPagePicture(float Left, float Top, float Width, float Height);
  OLE_HANDLE      __fastcall SaveMemory(Addflow5lib_tlb::ItemSetConstants ItemSet);
  void            __fastcall LoadMemory(OLE_HANDLE hMem);
  void            __fastcall BeginAction(short code);
  void            __fastcall UndocMethod(short param);
  void            __fastcall EndAction();
  VARIANT_BOOL    __fastcall CanRedo();
  VARIANT_BOOL    __fastcall CanUndo();
  void            __fastcall Redo();
  void            __fastcall Undo();
  void            __fastcall ZoomRectangle(short TypeZoom, float Left, float Top, float Width, 
                                           float Height);
  void            __fastcall SelectRectangle(Addflow5lib_tlb::FilterConstants Filter, float Left, 
                                             float Top, float Width, float Height);
  void            __fastcall StartEdit();
  VARIANT_BOOL    __fastcall CanPaste();
  void            __fastcall Paste(VARIANT_BOOL SelectPastedItems);
  void            __fastcall Copy(Addflow5lib_tlb::ItemSetConstants ItemSet);
  void            __fastcall DisplayPropertyPage(short param);
  IPictureDisp**  __fastcall ExportPicture(Addflow5lib_tlb::ItemSetConstants ItemSet, 
                                           VARIANT_BOOL IncludeBackColor, 
                                           VARIANT_BOOL IncludeBackPic);
  Addflow5lib_tlb::afLink* __fastcall GetLinkAtPoint(float x, float y);
  Addflow5lib_tlb::afNode* __fastcall GetNodeAtPoint(float x, float y);
  void            __fastcall LoadFile(BSTR file);
  void            __fastcall SaveFile(BSTR file);
  void            __fastcall DeleteMarked();
  void            __fastcall DeleteSel();
  void            __fastcall GetVersion(short* major, short* minor);
  void            __fastcall SetSelChangedFlag(VARIANT_BOOL SelChanged);
  VARIANT_BOOL    __fastcall IsSelChanged();
  void            __fastcall SaveImage(Addflow5lib_tlb::SaveImageMediumConstants tymed, 
                                       Addflow5lib_tlb::SaveImageFormatConstants format, BSTR file);
  void            __fastcall DoClick();
  void            __fastcall SetChangedFlag(VARIANT_BOOL Changed);
  VARIANT_BOOL    __fastcall IsChanged();
  void            __fastcall SelectAll();
  void            __fastcall Refresh();
  void            __fastcall set_BackPicture(IPictureDisp** Value);
  IPictureDisp**  __fastcall get_BackPicture();
  void            __fastcall set_Repaint(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Repaint();
  void            __fastcall set_ArrowOrg(Addflow5lib_tlb::ArrowConstants Value);
  Addflow5lib_tlb::ArrowConstants __fastcall get_ArrowOrg();
  void            __fastcall set_PointedArea(Addflow5lib_tlb::PointedAreaConstants Value);
  Addflow5lib_tlb::PointedAreaConstants __fastcall get_PointedArea();
  void            __fastcall set_Enabled(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Enabled();
  void            __fastcall set_hWnd(OLE_HANDLE Value);
  OLE_HANDLE      __fastcall get_hWnd();
  void            __fastcall set_Alignment(Addflow5lib_tlb::AlignmentConstants Value);
  Addflow5lib_tlb::AlignmentConstants __fastcall get_Alignment();
  void            __fastcall set_ShapeOrientation(Addflow5lib_tlb::ShapeOrientationConstants Value);
  Addflow5lib_tlb::ShapeOrientationConstants __fastcall get_ShapeOrientation();
  void            __fastcall set_ReadOnly(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_ReadOnly();
  void            __fastcall set_DisplayHandles(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_DisplayHandles();
  void            __fastcall set_MultiSel(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_MultiSel();
  void            __fastcall set_SelectAction(Addflow5lib_tlb::SelectActionConstants Value);
  Addflow5lib_tlb::SelectActionConstants __fastcall get_SelectAction();
  void            __fastcall set_StretchingPoint(long Value);
  long            __fastcall get_StretchingPoint();
  void            __fastcall set_ArrowMid(Addflow5lib_tlb::ArrowConstants Value);
  Addflow5lib_tlb::ArrowConstants __fastcall get_ArrowMid();
  void            __fastcall set_ProportionalBars(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_ProportionalBars();
  void            __fastcall set_BackColor(::OLE_COLOR Value);
  ::OLE_COLOR     __fastcall get_BackColor();
  void            __fastcall set_CanDrawNode(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_CanDrawNode();
  void            __fastcall set_DrawStyle(Addflow5lib_tlb::DrawStyleConstants Value);
  Addflow5lib_tlb::DrawStyleConstants __fastcall get_DrawStyle();
  void            __fastcall set_yScroll(float Value);
  float           __fastcall get_yScroll();
  void            __fastcall set_CanMoveNode(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_CanMoveNode();
  void            __fastcall set_PointedLink(Addflow5lib_tlb::afLink* Value);
  Addflow5lib_tlb::afLink* __fastcall get_PointedLink();
  void            __fastcall set_Font(IFontDisp** Value);
  IFontDisp**     __fastcall get_Font();
  void            __fastcall set_LinkStyle(Addflow5lib_tlb::LinkStyleConstants Value);
  Addflow5lib_tlb::LinkStyleConstants __fastcall get_LinkStyle();
  void            __fastcall set_xScroll(float Value);
  float           __fastcall get_xScroll();
  void            __fastcall set_Shape(Addflow5lib_tlb::ShapeConstants Value);
  Addflow5lib_tlb::ShapeConstants __fastcall get_Shape();
  void            __fastcall set_AutoScroll(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_AutoScroll();
  void            __fastcall set_AutoSize(Addflow5lib_tlb::AutoSizeConstants Value);
  Addflow5lib_tlb::AutoSizeConstants __fastcall get_AutoSize();
  void            __fastcall set_ScrollBars(Addflow5lib_tlb::ScrollBarsConstants Value);
  Addflow5lib_tlb::ScrollBarsConstants __fastcall get_ScrollBars();
  void            __fastcall set_yGrid(float Value);
  float           __fastcall get_yGrid();
  void            __fastcall set_xGrid(float Value);
  float           __fastcall get_xGrid();
  void            __fastcall set_SelectMode(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_SelectMode();
  void            __fastcall set_SelLinks(Addflow5lib_tlb::afSelLinks* Value);
  Addflow5lib_tlb::afSelLinks* __fastcall get_SelLinks();
  void            __fastcall set_GridColor(::OLE_COLOR Value);
  ::OLE_COLOR     __fastcall get_GridColor();
  void            __fastcall set_ForeColor(::OLE_COLOR Value);
  ::OLE_COLOR     __fastcall get_ForeColor();
  void            __fastcall set_FillColor(::OLE_COLOR Value);
  ::OLE_COLOR     __fastcall get_FillColor();
  void            __fastcall set_ShowGrid(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_ShowGrid();
  void            __fastcall set_LinkCreationMode(Addflow5lib_tlb::LinkCreationModeConstants Value);
  Addflow5lib_tlb::LinkCreationModeConstants __fastcall get_LinkCreationMode();
  void            __fastcall set_PicturePosition(Addflow5lib_tlb::PicturePositionConstants Value);
  Addflow5lib_tlb::PicturePositionConstants __fastcall get_PicturePosition();
  void            __fastcall set_GridStyle(Addflow5lib_tlb::GridStyleConstants Value);
  Addflow5lib_tlb::GridStyleConstants __fastcall get_GridStyle();
  void            __fastcall set_CanDrawLink(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_CanDrawLink();
  void            __fastcall set_AdjustOrg(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_AdjustOrg();
  void            __fastcall set_DrawColor(::OLE_COLOR Value);
  ::OLE_COLOR     __fastcall get_DrawColor();
  void            __fastcall set_AdjustDst(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_AdjustDst();
  void            __fastcall set_Transparent(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Transparent();
  void            __fastcall set_CanStretchLink(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_CanStretchLink();
  void            __fastcall set_CanSizeNode(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_CanSizeNode();
  void            __fastcall set_Rigid(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Rigid();
  void            __fastcall set_AllowArrowKeys(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_AllowArrowKeys();
  void            __fastcall set_CanUndoRedo(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_CanUndoRedo();
  void            __fastcall set_LinkingHandleSize(Addflow5lib_tlb::HandleSizeConstants Value);
  Addflow5lib_tlb::HandleSizeConstants __fastcall get_LinkingHandleSize();
  void            __fastcall set_EditMode(Addflow5lib_tlb::EditModeConstants Value);
  Addflow5lib_tlb::EditModeConstants __fastcall get_EditMode();
  void            __fastcall set_SelectionHandleSize(Addflow5lib_tlb::HandleSizeConstants Value);
  Addflow5lib_tlb::HandleSizeConstants __fastcall get_SelectionHandleSize();
  void            __fastcall set_SelNodes(Addflow5lib_tlb::afSelNodes* Value);
  Addflow5lib_tlb::afSelNodes* __fastcall get_SelNodes();
  void            __fastcall set_BackMode(Addflow5lib_tlb::BackModeConstants Value);
  Addflow5lib_tlb::BackModeConstants __fastcall get_BackMode();
  void            __fastcall set_yShadowOffset(float Value);
  float           __fastcall get_yShadowOffset();
  void            __fastcall set_OrthogonalDynamic(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_OrthogonalDynamic();
  void            __fastcall set_SnapToGrid(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_SnapToGrid();
  void            __fastcall set_ScrollTrack(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_ScrollTrack();
  void            __fastcall set_Hidden(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Hidden();
  void            __fastcall set_CanMultiLink(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_CanMultiLink();
  void            __fastcall set_Shadow(Addflow5lib_tlb::ShadowConstants Value);
  Addflow5lib_tlb::ShadowConstants __fastcall get_Shadow();
  void            __fastcall set_xShadowOffset(float Value);
  float           __fastcall get_xShadowOffset();
  void            __fastcall set_ShadowColor(::OLE_COLOR Value);
  ::OLE_COLOR     __fastcall get_ShadowColor();
  void            __fastcall set_OrientedText(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_OrientedText();
  void            __fastcall set_Pictures(Addflow5lib_tlb::afPictures* Value);
  Addflow5lib_tlb::afPictures* __fastcall get_Pictures();
  void            __fastcall set_CanChangeDst(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_CanChangeDst();
  void            __fastcall set_MaxInDegree(long Value);
  long            __fastcall get_MaxInDegree();
  void            __fastcall set_ShowPropertyPages(Addflow5lib_tlb::ShowPropertyPagesConstants Value);
  Addflow5lib_tlb::ShowPropertyPagesConstants __fastcall get_ShowPropertyPages();
  void            __fastcall set_MaxOutDegree(long Value);
  long            __fastcall get_MaxOutDegree();
  void            __fastcall set_MaxDegree(long Value);
  long            __fastcall get_MaxDegree();
  void            __fastcall set_OwnerDraw(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_OwnerDraw();
  void            __fastcall set_LinkOwnerDraw(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_LinkOwnerDraw();
  void            __fastcall set_GradientColor(::OLE_COLOR Value);
  ::OLE_COLOR     __fastcall get_GradientColor();
  void            __fastcall set_Gradient(Addflow5lib_tlb::GradientConstants Value);
  Addflow5lib_tlb::GradientConstants __fastcall get_Gradient();
  void            __fastcall set_RedoNode(Addflow5lib_tlb::afNode* Value);
  Addflow5lib_tlb::afNode* __fastcall get_RedoNode();
  void            __fastcall set_NodeOwnerDraw(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_NodeOwnerDraw();
  void            __fastcall set_RedoLink(Addflow5lib_tlb::afLink* Value);
  Addflow5lib_tlb::afLink* __fastcall get_RedoLink();
  void            __fastcall set_UndoLink(Addflow5lib_tlb::afLink* Value);
  Addflow5lib_tlb::afLink* __fastcall get_UndoLink();
  void            __fastcall set_DrawMethod(Addflow5lib_tlb::DrawMethodConstants Value);
  Addflow5lib_tlb::DrawMethodConstants __fastcall get_DrawMethod();
  void            __fastcall set_LogicalOnly(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_LogicalOnly();
  void            __fastcall set_SizeArrowMid(Addflow5lib_tlb::ArrowSizeConstants Value);
  Addflow5lib_tlb::ArrowSizeConstants __fastcall get_SizeArrowMid();
  void            __fastcall set_CanFireError(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_CanFireError();
  void            __fastcall set_CycleMode(Addflow5lib_tlb::CycleModeConstants Value);
  Addflow5lib_tlb::CycleModeConstants __fastcall get_CycleMode();
  void            __fastcall set_SizeArrowDst(Addflow5lib_tlb::ArrowSizeConstants Value);
  Addflow5lib_tlb::ArrowSizeConstants __fastcall get_SizeArrowDst();
  void            __fastcall set_SizeArrowOrg(Addflow5lib_tlb::ArrowSizeConstants Value);
  Addflow5lib_tlb::ArrowSizeConstants __fastcall get_SizeArrowOrg();
  void            __fastcall set_ShowJump(Addflow5lib_tlb::ShowJumpConstants Value);
  Addflow5lib_tlb::ShowJumpConstants __fastcall get_ShowJump();
  void            __fastcall set_CanChangeOrg(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_CanChangeOrg();
  void            __fastcall set_RedoCode(Addflow5lib_tlb::ActionConstants Value);
  Addflow5lib_tlb::ActionConstants __fastcall get_RedoCode();
  void            __fastcall set_NoPrefix(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_NoPrefix();
  void            __fastcall set_Ellipsis(Addflow5lib_tlb::EllipsisConstants Value);
  Addflow5lib_tlb::EllipsisConstants __fastcall get_Ellipsis();
  void            __fastcall set_UndoCode(Addflow5lib_tlb::ActionConstants Value);
  Addflow5lib_tlb::ActionConstants __fastcall get_UndoCode();
  void            __fastcall set_ZeroOriginForExport(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_ZeroOriginForExport();
  void            __fastcall set_ScrollWheel(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_ScrollWheel();
  void            __fastcall set_RemovePointAngle(Addflow5lib_tlb::RemovePointAngleConstants Value);
  Addflow5lib_tlb::RemovePointAngleConstants __fastcall get_RemovePointAngle();
  void            __fastcall set_PictureIndex(long Value);
  long            __fastcall get_PictureIndex();
  void            __fastcall set_MousePointer(Addflow5lib_tlb::MousePointerConstants Value);
  Addflow5lib_tlb::MousePointerConstants __fastcall get_MousePointer();
  void            __fastcall set_MouseIcon(IPictureDisp** Value);
  IPictureDisp**  __fastcall get_MouseIcon();
  void            __fastcall set_Nodes(Addflow5lib_tlb::afNodes* Value);
  Addflow5lib_tlb::afNodes* __fastcall get_Nodes();
  void            __fastcall set_BorderStyle(Addflow5lib_tlb::BorderStyleConstants Value);
  Addflow5lib_tlb::BorderStyleConstants __fastcall get_BorderStyle();
  void            __fastcall set_LastUserAction(Addflow5lib_tlb::UserActionConstants Value);
  Addflow5lib_tlb::UserActionConstants __fastcall get_LastUserAction();
  void            __fastcall set_SelectedNode(Addflow5lib_tlb::afNode* Value);
  Addflow5lib_tlb::afNode* __fastcall get_SelectedNode();
  void            __fastcall set_DrawWidth(float Value);
  float           __fastcall get_DrawWidth();
  void            __fastcall set_ArrowDst(Addflow5lib_tlb::ArrowConstants Value);
  Addflow5lib_tlb::ArrowConstants __fastcall get_ArrowDst();
  void            __fastcall set_yExtent(float Value);
  float           __fastcall get_yExtent();
  void            __fastcall set_PointedNode(Addflow5lib_tlb::afNode* Value);
  Addflow5lib_tlb::afNode* __fastcall get_PointedNode();
  void            __fastcall set_SelectedLink(Addflow5lib_tlb::afLink* Value);
  Addflow5lib_tlb::afLink* __fastcall get_SelectedLink();
  void            __fastcall set_ShowToolTip(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_ShowToolTip();
  void            __fastcall set_CanReflexLink(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_CanReflexLink();
  void            __fastcall set_Appearance(Addflow5lib_tlb::AppearanceConstants Value);
  Addflow5lib_tlb::AppearanceConstants __fastcall get_Appearance();
  void            __fastcall set_xExtent(float Value);
  float           __fastcall get_xExtent();
  void            __fastcall set_xZoom(long Value);
  long            __fastcall get_xZoom();
  void            __fastcall set_RoundedCorner(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_RoundedCorner();
  void            __fastcall set_CustomShapes(Addflow5lib_tlb::afCustomShapes* Value);
  Addflow5lib_tlb::afCustomShapes* __fastcall get_CustomShapes();
  void            __fastcall set_SkipUndo(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_SkipUndo();
  void            __fastcall set_RoundedCornerSize(Addflow5lib_tlb::RoundSizeConstants Value);
  Addflow5lib_tlb::RoundSizeConstants __fastcall get_RoundedCornerSize();
  void            __fastcall set_EditHardReturn(Addflow5lib_tlb::EditHardReturnConstants Value);
  Addflow5lib_tlb::EditHardReturnConstants __fastcall get_EditHardReturn();
  void            __fastcall set_CustomShapeIndex(long Value);
  long            __fastcall get_CustomShapeIndex();
  void            __fastcall set_JumpSize(Addflow5lib_tlb::JumpSizeConstants Value);
  Addflow5lib_tlb::JumpSizeConstants __fastcall get_JumpSize();
  void            __fastcall set_License(BSTR Value);
  BSTR            __fastcall get_License();
  void            __fastcall set_RouteStartMethod(Addflow5lib_tlb::StartMethodConstants Value);
  Addflow5lib_tlb::StartMethodConstants __fastcall get_RouteStartMethod();
  void            __fastcall set_UndoSize(long Value);
  long            __fastcall get_UndoSize();
  void            __fastcall set_yZoom(long Value);
  long            __fastcall get_yZoom();
  void            __fastcall set_Autorouting(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Autorouting();
  void            __fastcall set_RouteMinDistance(long Value);
  long            __fastcall get_RouteMinDistance();
  void            __fastcall set_UndoNode(Addflow5lib_tlb::afNode* Value);
  Addflow5lib_tlb::afNode* __fastcall get_UndoNode();
  void            __fastcall set_RouteGrain(long Value);
  long            __fastcall get_RouteGrain();

  __property   IPictureDisp**  BackPicture = {read = get_BackPicture, write = set_BackPicture};
  __property   VARIANT_BOOL    Repaint = {read = get_Repaint, write = set_Repaint};
  __property   Addflow5lib_tlb::ArrowConstants ArrowOrg = {read = get_ArrowOrg, write = set_ArrowOrg};
  __property   Addflow5lib_tlb::PointedAreaConstants PointedArea = {read = get_PointedArea, write = set_PointedArea};
  __property   VARIANT_BOOL    Enabled = {read = get_Enabled, write = set_Enabled};
  __property   OLE_HANDLE      hWnd = {read = get_hWnd, write = set_hWnd};
  __property   Addflow5lib_tlb::AlignmentConstants Alignment = {read = get_Alignment, write = set_Alignment};
  __property   Addflow5lib_tlb::ShapeOrientationConstants ShapeOrientation = {read = get_ShapeOrientation, write = set_ShapeOrientation};
  __property   VARIANT_BOOL    ReadOnly = {read = get_ReadOnly, write = set_ReadOnly};
  __property   VARIANT_BOOL    DisplayHandles = {read = get_DisplayHandles, write = set_DisplayHandles};
  __property   VARIANT_BOOL    MultiSel = {read = get_MultiSel, write = set_MultiSel};
  __property   Addflow5lib_tlb::SelectActionConstants SelectAction = {read = get_SelectAction, write = set_SelectAction};
  __property   long            StretchingPoint = {read = get_StretchingPoint, write = set_StretchingPoint};
  __property   Addflow5lib_tlb::ArrowConstants ArrowMid = {read = get_ArrowMid, write = set_ArrowMid};
  __property   VARIANT_BOOL    ProportionalBars = {read = get_ProportionalBars, write = set_ProportionalBars};
  __property   ::OLE_COLOR     BackColor = {read = get_BackColor, write = set_BackColor};
  __property   VARIANT_BOOL    CanDrawNode = {read = get_CanDrawNode, write = set_CanDrawNode};
  __property   Addflow5lib_tlb::DrawStyleConstants DrawStyle = {read = get_DrawStyle, write = set_DrawStyle};
  __property   float           yScroll = {read = get_yScroll, write = set_yScroll};
  __property   VARIANT_BOOL    CanMoveNode = {read = get_CanMoveNode, write = set_CanMoveNode};
  __property   Addflow5lib_tlb::afLink* PointedLink = {read = get_PointedLink, write = set_PointedLink};
  __property   IFontDisp**     Font = {read = get_Font, write = set_Font};
  __property   Addflow5lib_tlb::LinkStyleConstants LinkStyle = {read = get_LinkStyle, write = set_LinkStyle};
  __property   float           xScroll = {read = get_xScroll, write = set_xScroll};
  __property   Addflow5lib_tlb::ShapeConstants Shape = {read = get_Shape, write = set_Shape};
  __property   VARIANT_BOOL    AutoScroll = {read = get_AutoScroll, write = set_AutoScroll};
  __property   Addflow5lib_tlb::AutoSizeConstants AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   Addflow5lib_tlb::ScrollBarsConstants ScrollBars = {read = get_ScrollBars, write = set_ScrollBars};
  __property   float           yGrid = {read = get_yGrid, write = set_yGrid};
  __property   float           xGrid = {read = get_xGrid, write = set_xGrid};
  __property   VARIANT_BOOL    SelectMode = {read = get_SelectMode, write = set_SelectMode};
  __property   Addflow5lib_tlb::afSelLinks* SelLinks = {read = get_SelLinks, write = set_SelLinks};
  __property   ::OLE_COLOR     GridColor = {read = get_GridColor, write = set_GridColor};
  __property   ::OLE_COLOR     ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   ::OLE_COLOR     FillColor = {read = get_FillColor, write = set_FillColor};
  __property   VARIANT_BOOL    ShowGrid = {read = get_ShowGrid, write = set_ShowGrid};
  __property   Addflow5lib_tlb::LinkCreationModeConstants LinkCreationMode = {read = get_LinkCreationMode, write = set_LinkCreationMode};
  __property   Addflow5lib_tlb::PicturePositionConstants PicturePosition = {read = get_PicturePosition, write = set_PicturePosition};
  __property   Addflow5lib_tlb::GridStyleConstants GridStyle = {read = get_GridStyle, write = set_GridStyle};
  __property   VARIANT_BOOL    CanDrawLink = {read = get_CanDrawLink, write = set_CanDrawLink};
  __property   VARIANT_BOOL    AdjustOrg = {read = get_AdjustOrg, write = set_AdjustOrg};
  __property   ::OLE_COLOR     DrawColor = {read = get_DrawColor, write = set_DrawColor};
  __property   VARIANT_BOOL    AdjustDst = {read = get_AdjustDst, write = set_AdjustDst};
  __property   VARIANT_BOOL    Transparent = {read = get_Transparent, write = set_Transparent};
  __property   VARIANT_BOOL    CanStretchLink = {read = get_CanStretchLink, write = set_CanStretchLink};
  __property   VARIANT_BOOL    CanSizeNode = {read = get_CanSizeNode, write = set_CanSizeNode};
  __property   VARIANT_BOOL    Rigid = {read = get_Rigid, write = set_Rigid};
  __property   VARIANT_BOOL    AllowArrowKeys = {read = get_AllowArrowKeys, write = set_AllowArrowKeys};
  __property   VARIANT_BOOL    CanUndoRedo = {read = get_CanUndoRedo, write = set_CanUndoRedo};
  __property   Addflow5lib_tlb::HandleSizeConstants LinkingHandleSize = {read = get_LinkingHandleSize, write = set_LinkingHandleSize};
  __property   Addflow5lib_tlb::EditModeConstants EditMode = {read = get_EditMode, write = set_EditMode};
  __property   Addflow5lib_tlb::HandleSizeConstants SelectionHandleSize = {read = get_SelectionHandleSize, write = set_SelectionHandleSize};
  __property   Addflow5lib_tlb::afSelNodes* SelNodes = {read = get_SelNodes, write = set_SelNodes};
  __property   Addflow5lib_tlb::BackModeConstants BackMode = {read = get_BackMode, write = set_BackMode};
  __property   float           yShadowOffset = {read = get_yShadowOffset, write = set_yShadowOffset};
  __property   VARIANT_BOOL    OrthogonalDynamic = {read = get_OrthogonalDynamic, write = set_OrthogonalDynamic};
  __property   VARIANT_BOOL    SnapToGrid = {read = get_SnapToGrid, write = set_SnapToGrid};
  __property   VARIANT_BOOL    ScrollTrack = {read = get_ScrollTrack, write = set_ScrollTrack};
  __property   VARIANT_BOOL    Hidden = {read = get_Hidden, write = set_Hidden};
  __property   VARIANT_BOOL    CanMultiLink = {read = get_CanMultiLink, write = set_CanMultiLink};
  __property   Addflow5lib_tlb::ShadowConstants Shadow = {read = get_Shadow, write = set_Shadow};
  __property   float           xShadowOffset = {read = get_xShadowOffset, write = set_xShadowOffset};
  __property   ::OLE_COLOR     ShadowColor = {read = get_ShadowColor, write = set_ShadowColor};
  __property   VARIANT_BOOL    OrientedText = {read = get_OrientedText, write = set_OrientedText};
  __property   Addflow5lib_tlb::afPictures* Pictures = {read = get_Pictures, write = set_Pictures};
  __property   VARIANT_BOOL    CanChangeDst = {read = get_CanChangeDst, write = set_CanChangeDst};
  __property   long            MaxInDegree = {read = get_MaxInDegree, write = set_MaxInDegree};
  __property   Addflow5lib_tlb::ShowPropertyPagesConstants ShowPropertyPages = {read = get_ShowPropertyPages, write = set_ShowPropertyPages};
  __property   long            MaxOutDegree = {read = get_MaxOutDegree, write = set_MaxOutDegree};
  __property   long            MaxDegree = {read = get_MaxDegree, write = set_MaxDegree};
  __property   VARIANT_BOOL    OwnerDraw = {read = get_OwnerDraw, write = set_OwnerDraw};
  __property   VARIANT_BOOL    LinkOwnerDraw = {read = get_LinkOwnerDraw, write = set_LinkOwnerDraw};
  __property   ::OLE_COLOR     GradientColor = {read = get_GradientColor, write = set_GradientColor};
  __property   Addflow5lib_tlb::GradientConstants Gradient = {read = get_Gradient, write = set_Gradient};
  __property   Addflow5lib_tlb::afNode* RedoNode = {read = get_RedoNode, write = set_RedoNode};
  __property   VARIANT_BOOL    NodeOwnerDraw = {read = get_NodeOwnerDraw, write = set_NodeOwnerDraw};
  __property   Addflow5lib_tlb::afLink* RedoLink = {read = get_RedoLink, write = set_RedoLink};
  __property   Addflow5lib_tlb::afLink* UndoLink = {read = get_UndoLink, write = set_UndoLink};
  __property   Addflow5lib_tlb::DrawMethodConstants DrawMethod = {read = get_DrawMethod, write = set_DrawMethod};
  __property   VARIANT_BOOL    LogicalOnly = {read = get_LogicalOnly, write = set_LogicalOnly};
  __property   Addflow5lib_tlb::ArrowSizeConstants SizeArrowMid = {read = get_SizeArrowMid, write = set_SizeArrowMid};
  __property   VARIANT_BOOL    CanFireError = {read = get_CanFireError, write = set_CanFireError};
  __property   Addflow5lib_tlb::CycleModeConstants CycleMode = {read = get_CycleMode, write = set_CycleMode};
  __property   Addflow5lib_tlb::ArrowSizeConstants SizeArrowDst = {read = get_SizeArrowDst, write = set_SizeArrowDst};
  __property   Addflow5lib_tlb::ArrowSizeConstants SizeArrowOrg = {read = get_SizeArrowOrg, write = set_SizeArrowOrg};
  __property   Addflow5lib_tlb::ShowJumpConstants ShowJump = {read = get_ShowJump, write = set_ShowJump};
  __property   VARIANT_BOOL    CanChangeOrg = {read = get_CanChangeOrg, write = set_CanChangeOrg};
  __property   Addflow5lib_tlb::ActionConstants RedoCode = {read = get_RedoCode, write = set_RedoCode};
  __property   VARIANT_BOOL    NoPrefix = {read = get_NoPrefix, write = set_NoPrefix};
  __property   Addflow5lib_tlb::EllipsisConstants Ellipsis = {read = get_Ellipsis, write = set_Ellipsis};
  __property   Addflow5lib_tlb::ActionConstants UndoCode = {read = get_UndoCode, write = set_UndoCode};
  __property   VARIANT_BOOL    ZeroOriginForExport = {read = get_ZeroOriginForExport, write = set_ZeroOriginForExport};
  __property   VARIANT_BOOL    ScrollWheel = {read = get_ScrollWheel, write = set_ScrollWheel};
  __property   Addflow5lib_tlb::RemovePointAngleConstants RemovePointAngle = {read = get_RemovePointAngle, write = set_RemovePointAngle};
  __property   long            PictureIndex = {read = get_PictureIndex, write = set_PictureIndex};
  __property   Addflow5lib_tlb::MousePointerConstants MousePointer = {read = get_MousePointer, write = set_MousePointer};
  __property   IPictureDisp**  MouseIcon = {read = get_MouseIcon, write = set_MouseIcon};
  __property   Addflow5lib_tlb::afNodes* Nodes = {read = get_Nodes, write = set_Nodes};
  __property   Addflow5lib_tlb::BorderStyleConstants BorderStyle = {read = get_BorderStyle, write = set_BorderStyle};
  __property   Addflow5lib_tlb::UserActionConstants LastUserAction = {read = get_LastUserAction, write = set_LastUserAction};
  __property   Addflow5lib_tlb::afNode* SelectedNode = {read = get_SelectedNode, write = set_SelectedNode};
  __property   float           DrawWidth = {read = get_DrawWidth, write = set_DrawWidth};
  __property   Addflow5lib_tlb::ArrowConstants ArrowDst = {read = get_ArrowDst, write = set_ArrowDst};
  __property   float           yExtent = {read = get_yExtent, write = set_yExtent};
  __property   Addflow5lib_tlb::afNode* PointedNode = {read = get_PointedNode, write = set_PointedNode};
  __property   Addflow5lib_tlb::afLink* SelectedLink = {read = get_SelectedLink, write = set_SelectedLink};
  __property   VARIANT_BOOL    ShowToolTip = {read = get_ShowToolTip, write = set_ShowToolTip};
  __property   VARIANT_BOOL    CanReflexLink = {read = get_CanReflexLink, write = set_CanReflexLink};
  __property   Addflow5lib_tlb::AppearanceConstants Appearance = {read = get_Appearance, write = set_Appearance};
  __property   float           xExtent = {read = get_xExtent, write = set_xExtent};
  __property   long            xZoom = {read = get_xZoom, write = set_xZoom};
  __property   VARIANT_BOOL    RoundedCorner = {read = get_RoundedCorner, write = set_RoundedCorner};
  __property   Addflow5lib_tlb::afCustomShapes* CustomShapes = {read = get_CustomShapes, write = set_CustomShapes};
  __property   VARIANT_BOOL    SkipUndo = {read = get_SkipUndo, write = set_SkipUndo};
  __property   Addflow5lib_tlb::RoundSizeConstants RoundedCornerSize = {read = get_RoundedCornerSize, write = set_RoundedCornerSize};
  __property   Addflow5lib_tlb::EditHardReturnConstants EditHardReturn = {read = get_EditHardReturn, write = set_EditHardReturn};
  __property   long            CustomShapeIndex = {read = get_CustomShapeIndex, write = set_CustomShapeIndex};
  __property   Addflow5lib_tlb::JumpSizeConstants JumpSize = {read = get_JumpSize, write = set_JumpSize};
  __property   BSTR            License = {read = get_License, write = set_License};
  __property   Addflow5lib_tlb::StartMethodConstants RouteStartMethod = {read = get_RouteStartMethod, write = set_RouteStartMethod};
  __property   long            UndoSize = {read = get_UndoSize, write = set_UndoSize};
  __property   long            yZoom = {read = get_yZoom, write = set_yZoom};
  __property   VARIANT_BOOL    Autorouting = {read = get_Autorouting, write = set_Autorouting};
  __property   long            RouteMinDistance = {read = get_RouteMinDistance, write = set_RouteMinDistance};
  __property   Addflow5lib_tlb::afNode* UndoNode = {read = get_UndoNode, write = set_UndoNode};
  __property   long            RouteGrain = {read = get_RouteGrain, write = set_RouteGrain};
};
typedef _DAddFlowDispT<_DAddFlow> _DAddFlowDisp;

// *********************************************************************//
// DispIntf:  INodes
// Flags:     (4112) Hidden Dispatchable
// GUID:      {15078B02-F53D-4CEE-8932-4AA0BFA472B3}
// *********************************************************************//
template<class T>
class INodesDispT : public TAutoDriver<INodes>
{
public:
  INodesDispT(){}

  INodesDispT(INodes *pintf)
  {
    TAutoDriver<INodes>::Bind(pintf, false);
  }

  INodesDispT(INodesPtr pintf)
  {
    TAutoDriver<INodes>::Bind(pintf, true);
  }

  INodesDispT& operator=(INodes *pintf)
  {
    TAutoDriver<INodes>::Bind(pintf, false);
    return *this;
  }

  INodesDispT& operator=(INodesPtr pintf)
  {
    TAutoDriver<INodes>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_afNodes));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_afNodes);
  }

  void            __fastcall Clear();
  Addflow5lib_tlb::afNode* __fastcall Item(VARIANT Index);
  LPUNKNOWN       __fastcall _NewEnum();
  Addflow5lib_tlb::afNode* __fastcall Add(float Left, float Top, float Width, float Height);
  void            __fastcall Remove(VARIANT Index);
  void            __fastcall set_Count(long Value);
  long            __fastcall get_Count();

  __property   long            Count = {read = get_Count, write = set_Count};
};
typedef INodesDispT<INodes> INodesDisp;

// *********************************************************************//
// DispIntf:  INode
// Flags:     (4112) Hidden Dispatchable
// GUID:      {62BDF910-DED7-42EA-B8CE-B1284A2F07D9}
// *********************************************************************//
template<class T>
class INodeDispT : public TAutoDriver<INode>
{
public:
  INodeDispT(){}

  INodeDispT(INode *pintf)
  {
    TAutoDriver<INode>::Bind(pintf, false);
  }

  INodeDispT(INodePtr pintf)
  {
    TAutoDriver<INode>::Bind(pintf, true);
  }

  INodeDispT& operator=(INode *pintf)
  {
    TAutoDriver<INode>::Bind(pintf, false);
    return *this;
  }

  INodeDispT& operator=(INodePtr pintf)
  {
    TAutoDriver<INode>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_afNode));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_afNode);
  }

  void            __fastcall Refresh();
  void            __fastcall PropertyPage(BSTR title, long page);
  Addflow5lib_tlb::afNode* __fastcall Clone();
  VARIANT_BOOL    __fastcall EnsureVisible();
  Addflow5lib_tlb::afNode* __fastcall GetLinkedNode(Addflow5lib_tlb::afLink* link);
  void            __fastcall set_DrawWidth(float Value);
  float           __fastcall get_DrawWidth();
  void            __fastcall set_Selectable(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Selectable();
  void            __fastcall set_Text(BSTR Value);
  BSTR            __fastcall get_Text();
  void            __fastcall set_ForeColor(::OLE_COLOR Value);
  ::OLE_COLOR     __fastcall get_ForeColor();
  void            __fastcall set_ZOrder(long Value);
  long            __fastcall get_ZOrder();
  void            __fastcall set_Font(IFontDisp** Value);
  IFontDisp**     __fastcall get_Font();
  void            __fastcall set_Tag(BSTR Value);
  BSTR            __fastcall get_Tag();
  void            __fastcall set_Top(float Value);
  float           __fastcall get_Top();
  void            __fastcall set_Width(float Value);
  float           __fastcall get_Width();
  void            __fastcall set_Shape(Addflow5lib_tlb::ShapeConstants Value);
  Addflow5lib_tlb::ShapeConstants __fastcall get_Shape();
  void            __fastcall set_Selected(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Selected();
  void            __fastcall set_DrawStyle(Addflow5lib_tlb::DrawStyleConstants Value);
  Addflow5lib_tlb::DrawStyleConstants __fastcall get_DrawStyle();
  void            __fastcall set_Left(float Value);
  float           __fastcall get_Left();
  void            __fastcall set_DrawColor(::OLE_COLOR Value);
  ::OLE_COLOR     __fastcall get_DrawColor();
  void            __fastcall set_OutLinks(Addflow5lib_tlb::afLinks* Value);
  Addflow5lib_tlb::afLinks* __fastcall get_OutLinks();
  void            __fastcall set_Height(float Value);
  float           __fastcall get_Height();
  void            __fastcall set_Index(long Value);
  long            __fastcall get_Index();
  void            __fastcall set_Key(BSTR Value);
  BSTR            __fastcall get_Key();
  void            __fastcall set_Links(Addflow5lib_tlb::afLinks* Value);
  Addflow5lib_tlb::afLinks* __fastcall get_Links();
  void            __fastcall set_Hidden(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Hidden();
  void            __fastcall set_InLinks(Addflow5lib_tlb::afLinks* Value);
  Addflow5lib_tlb::afLinks* __fastcall get_InLinks();
  void            __fastcall set_ToolTip(BSTR Value);
  BSTR            __fastcall get_ToolTip();
  void            __fastcall set_UserData(long Value);
  long            __fastcall get_UserData();
  void            __fastcall set_FillColor(::OLE_COLOR Value);
  ::OLE_COLOR     __fastcall get_FillColor();
  void            __fastcall set_Transparent(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Transparent();
  void            __fastcall set_Marked(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Marked();
  void            __fastcall set_PicturePosition(Addflow5lib_tlb::PicturePositionConstants Value);
  Addflow5lib_tlb::PicturePositionConstants __fastcall get_PicturePosition();
  void            __fastcall set_Picture(IPictureDisp** Value);
  IPictureDisp**  __fastcall get_Picture();
  void            __fastcall set_Shadow(Addflow5lib_tlb::ShadowConstants Value);
  Addflow5lib_tlb::ShadowConstants __fastcall get_Shadow();
  void            __fastcall set_Logical(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Logical();
  void            __fastcall set_ShapeOrientation(short Value);
  short           __fastcall get_ShapeOrientation();
  void            __fastcall set_PictureIndex(long Value);
  long            __fastcall get_PictureIndex();
  void            __fastcall set_yScrollable(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_yScrollable();
  void            __fastcall set_EditMode(Addflow5lib_tlb::EditModeConstants Value);
  Addflow5lib_tlb::EditModeConstants __fastcall get_EditMode();
  void            __fastcall set_xScrollable(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_xScrollable();
  void            __fastcall set_ZOrderIndex(long Value);
  long            __fastcall get_ZOrderIndex();
  void            __fastcall set_BackMode(Addflow5lib_tlb::BackModeConstants Value);
  Addflow5lib_tlb::BackModeConstants __fastcall get_BackMode();
  void            __fastcall set_XMoveable(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_XMoveable();
  void            __fastcall set_YMoveable(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_YMoveable();
  void            __fastcall set_XSizeable(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_XSizeable();
  void            __fastcall set_YSizeable(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_YSizeable();
  void            __fastcall set_CustomShapeIndex(long Value);
  long            __fastcall get_CustomShapeIndex();
  void            __fastcall set_Moveable(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Moveable();
  void            __fastcall set_Sizeable(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Sizeable();
  void            __fastcall set_TagVariant(VARIANT Value);
  VARIANT         __fastcall get_TagVariant();
  void            __fastcall set_Alignment(Addflow5lib_tlb::AlignmentConstants Value);
  Addflow5lib_tlb::AlignmentConstants __fastcall get_Alignment();
  void            __fastcall set_AutoSize(Addflow5lib_tlb::AutoSizeConstants Value);
  Addflow5lib_tlb::AutoSizeConstants __fastcall get_AutoSize();
  void            __fastcall set_MaxDegree(long Value);
  long            __fastcall get_MaxDegree();
  void            __fastcall set_MaxInDegree(long Value);
  long            __fastcall get_MaxInDegree();
  void            __fastcall set_Gradient(Addflow5lib_tlb::GradientConstants Value);
  Addflow5lib_tlb::GradientConstants __fastcall get_Gradient();
  void            __fastcall set_xTextMargin(long Value);
  long            __fastcall get_xTextMargin();
  void            __fastcall set_yTextMargin(long Value);
  long            __fastcall get_yTextMargin();
  void            __fastcall set_MaxOutDegree(long Value);
  long            __fastcall get_MaxOutDegree();
  void            __fastcall set_OwnerDraw(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_OwnerDraw();
  void            __fastcall set_GradientColor(::OLE_COLOR Value);
  ::OLE_COLOR     __fastcall get_GradientColor();

  __property   float           DrawWidth = {read = get_DrawWidth, write = set_DrawWidth};
  __property   VARIANT_BOOL    Selectable = {read = get_Selectable, write = set_Selectable};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   ::OLE_COLOR     ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   long            ZOrder = {read = get_ZOrder, write = set_ZOrder};
  __property   IFontDisp**     Font = {read = get_Font, write = set_Font};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   float           Top = {read = get_Top, write = set_Top};
  __property   float           Width = {read = get_Width, write = set_Width};
  __property   Addflow5lib_tlb::ShapeConstants Shape = {read = get_Shape, write = set_Shape};
  __property   VARIANT_BOOL    Selected = {read = get_Selected, write = set_Selected};
  __property   Addflow5lib_tlb::DrawStyleConstants DrawStyle = {read = get_DrawStyle, write = set_DrawStyle};
  __property   float           Left = {read = get_Left, write = set_Left};
  __property   ::OLE_COLOR     DrawColor = {read = get_DrawColor, write = set_DrawColor};
  __property   Addflow5lib_tlb::afLinks* OutLinks = {read = get_OutLinks, write = set_OutLinks};
  __property   float           Height = {read = get_Height, write = set_Height};
  __property   long            Index = {read = get_Index, write = set_Index};
  __property   BSTR            Key = {read = get_Key, write = set_Key};
  __property   Addflow5lib_tlb::afLinks* Links = {read = get_Links, write = set_Links};
  __property   VARIANT_BOOL    Hidden = {read = get_Hidden, write = set_Hidden};
  __property   Addflow5lib_tlb::afLinks* InLinks = {read = get_InLinks, write = set_InLinks};
  __property   BSTR            ToolTip = {read = get_ToolTip, write = set_ToolTip};
  __property   long            UserData = {read = get_UserData, write = set_UserData};
  __property   ::OLE_COLOR     FillColor = {read = get_FillColor, write = set_FillColor};
  __property   VARIANT_BOOL    Transparent = {read = get_Transparent, write = set_Transparent};
  __property   VARIANT_BOOL    Marked = {read = get_Marked, write = set_Marked};
  __property   Addflow5lib_tlb::PicturePositionConstants PicturePosition = {read = get_PicturePosition, write = set_PicturePosition};
  __property   IPictureDisp**  Picture = {read = get_Picture, write = set_Picture};
  __property   Addflow5lib_tlb::ShadowConstants Shadow = {read = get_Shadow, write = set_Shadow};
  __property   VARIANT_BOOL    Logical = {read = get_Logical, write = set_Logical};
  __property   short           ShapeOrientation = {read = get_ShapeOrientation, write = set_ShapeOrientation};
  __property   long            PictureIndex = {read = get_PictureIndex, write = set_PictureIndex};
  __property   VARIANT_BOOL    yScrollable = {read = get_yScrollable, write = set_yScrollable};
  __property   Addflow5lib_tlb::EditModeConstants EditMode = {read = get_EditMode, write = set_EditMode};
  __property   VARIANT_BOOL    xScrollable = {read = get_xScrollable, write = set_xScrollable};
  __property   long            ZOrderIndex = {read = get_ZOrderIndex, write = set_ZOrderIndex};
  __property   Addflow5lib_tlb::BackModeConstants BackMode = {read = get_BackMode, write = set_BackMode};
  __property   VARIANT_BOOL    XMoveable = {read = get_XMoveable, write = set_XMoveable};
  __property   VARIANT_BOOL    YMoveable = {read = get_YMoveable, write = set_YMoveable};
  __property   VARIANT_BOOL    XSizeable = {read = get_XSizeable, write = set_XSizeable};
  __property   VARIANT_BOOL    YSizeable = {read = get_YSizeable, write = set_YSizeable};
  __property   long            CustomShapeIndex = {read = get_CustomShapeIndex, write = set_CustomShapeIndex};
  __property   VARIANT_BOOL    Moveable = {read = get_Moveable, write = set_Moveable};
  __property   VARIANT_BOOL    Sizeable = {read = get_Sizeable, write = set_Sizeable};
  __property   VARIANT         TagVariant = {read = get_TagVariant, write = set_TagVariant};
  __property   Addflow5lib_tlb::AlignmentConstants Alignment = {read = get_Alignment, write = set_Alignment};
  __property   Addflow5lib_tlb::AutoSizeConstants AutoSize = {read = get_AutoSize, write = set_AutoSize};
  __property   long            MaxDegree = {read = get_MaxDegree, write = set_MaxDegree};
  __property   long            MaxInDegree = {read = get_MaxInDegree, write = set_MaxInDegree};
  __property   Addflow5lib_tlb::GradientConstants Gradient = {read = get_Gradient, write = set_Gradient};
  __property   long            xTextMargin = {read = get_xTextMargin, write = set_xTextMargin};
  __property   long            yTextMargin = {read = get_yTextMargin, write = set_yTextMargin};
  __property   long            MaxOutDegree = {read = get_MaxOutDegree, write = set_MaxOutDegree};
  __property   VARIANT_BOOL    OwnerDraw = {read = get_OwnerDraw, write = set_OwnerDraw};
  __property   ::OLE_COLOR     GradientColor = {read = get_GradientColor, write = set_GradientColor};
};
typedef INodeDispT<INode> INodeDisp;

// *********************************************************************//
// DispIntf:  ILinks
// Flags:     (4112) Hidden Dispatchable
// GUID:      {AA91F32C-DC66-4628-AFC7-05EB72B637D7}
// *********************************************************************//
template<class T>
class ILinksDispT : public TAutoDriver<ILinks>
{
public:
  ILinksDispT(){}

  ILinksDispT(ILinks *pintf)
  {
    TAutoDriver<ILinks>::Bind(pintf, false);
  }

  ILinksDispT(ILinksPtr pintf)
  {
    TAutoDriver<ILinks>::Bind(pintf, true);
  }

  ILinksDispT& operator=(ILinks *pintf)
  {
    TAutoDriver<ILinks>::Bind(pintf, false);
    return *this;
  }

  ILinksDispT& operator=(ILinksPtr pintf)
  {
    TAutoDriver<ILinks>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_afLinks));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_afLinks);
  }

  void            __fastcall Clear();
  Addflow5lib_tlb::afLink* __fastcall Item(VARIANT Index);
  LPUNKNOWN       __fastcall _NewEnum();
  Addflow5lib_tlb::afLink* __fastcall Add(Addflow5lib_tlb::afNode* nodx);
  void            __fastcall Remove(VARIANT Index);
  void            __fastcall set_Count(long Value);
  long            __fastcall get_Count();

  __property   long            Count = {read = get_Count, write = set_Count};
};
typedef ILinksDispT<ILinks> ILinksDisp;

// *********************************************************************//
// DispIntf:  ILink
// Flags:     (4112) Hidden Dispatchable
// GUID:      {1937F811-DFDA-4223-8F31-BDC1D0D16767}
// *********************************************************************//
template<class T>
class ILinkDispT : public TAutoDriver<ILink>
{
public:
  ILinkDispT(){}

  ILinkDispT(ILink *pintf)
  {
    TAutoDriver<ILink>::Bind(pintf, false);
  }

  ILinkDispT(ILinkPtr pintf)
  {
    TAutoDriver<ILink>::Bind(pintf, true);
  }

  ILinkDispT& operator=(ILink *pintf)
  {
    TAutoDriver<ILink>::Bind(pintf, false);
    return *this;
  }

  ILinkDispT& operator=(ILinkPtr pintf)
  {
    TAutoDriver<ILink>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_afLink));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_afLink);
  }

  void            __fastcall Refresh();
  void            __fastcall PropertyPage(BSTR title, long page);
  Addflow5lib_tlb::afLink* __fastcall Clone(Addflow5lib_tlb::afNode* Org, 
                                            Addflow5lib_tlb::afNode* Dst);
  VARIANT_BOOL    __fastcall EnsureVisible();
  void            __fastcall Reverse();
  void            __fastcall set_ZOrder(long Value);
  long            __fastcall get_ZOrder();
  void            __fastcall set_Selected(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Selected();
  void            __fastcall set_Selectable(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Selectable();
  void            __fastcall set_ForeColor(::OLE_COLOR Value);
  ::OLE_COLOR     __fastcall get_ForeColor();
  void            __fastcall set_Dst(Addflow5lib_tlb::afNode* Value);
  Addflow5lib_tlb::afNode* __fastcall get_Dst();
  void            __fastcall set_ArrowDst(Addflow5lib_tlb::ArrowConstants Value);
  Addflow5lib_tlb::ArrowConstants __fastcall get_ArrowDst();
  void            __fastcall set_Org(Addflow5lib_tlb::afNode* Value);
  Addflow5lib_tlb::afNode* __fastcall get_Org();
  void            __fastcall set_Font(IFontDisp** Value);
  IFontDisp**     __fastcall get_Font();
  void            __fastcall set_Text(BSTR Value);
  BSTR            __fastcall get_Text();
  void            __fastcall set_Tag(BSTR Value);
  BSTR            __fastcall get_Tag();
  void            __fastcall set_ExtraPoints(Addflow5lib_tlb::afLinkPoints* Value);
  Addflow5lib_tlb::afLinkPoints* __fastcall get_ExtraPoints();
  void            __fastcall set_LinkStyle(Addflow5lib_tlb::LinkStyleConstants Value);
  Addflow5lib_tlb::LinkStyleConstants __fastcall get_LinkStyle();
  void            __fastcall set_Key(BSTR Value);
  BSTR            __fastcall get_Key();
  void            __fastcall set_InIndex(long Value);
  long            __fastcall get_InIndex();
  void            __fastcall set_OutIndex(long Value);
  long            __fastcall get_OutIndex();
  void            __fastcall set_UserData(long Value);
  long            __fastcall get_UserData();
  void            __fastcall set_DrawColor(::OLE_COLOR Value);
  ::OLE_COLOR     __fastcall get_DrawColor();
  void            __fastcall set_Marked(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Marked();
  void            __fastcall set_Hidden(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Hidden();
  void            __fastcall set_Rigid(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Rigid();
  void            __fastcall set_ArrowOrg(Addflow5lib_tlb::ArrowConstants Value);
  Addflow5lib_tlb::ArrowConstants __fastcall get_ArrowOrg();
  void            __fastcall set_AdjustOrg(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_AdjustOrg();
  void            __fastcall set_AdjustDst(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_AdjustDst();
  void            __fastcall set_ToolTip(BSTR Value);
  BSTR            __fastcall get_ToolTip();
  void            __fastcall set_SizeArrowMid(Addflow5lib_tlb::ArrowSizeConstants Value);
  Addflow5lib_tlb::ArrowSizeConstants __fastcall get_SizeArrowMid();
  void            __fastcall set_Logical(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Logical();
  void            __fastcall set_OrthogonalDynamic(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_OrthogonalDynamic();
  void            __fastcall set_Stretchable(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_Stretchable();
  void            __fastcall set_BackMode(Addflow5lib_tlb::BackModeConstants Value);
  Addflow5lib_tlb::BackModeConstants __fastcall get_BackMode();
  void            __fastcall set_ArrowMid(Addflow5lib_tlb::ArrowConstants Value);
  Addflow5lib_tlb::ArrowConstants __fastcall get_ArrowMid();
  void            __fastcall set_ZOrderIndex(long Value);
  long            __fastcall get_ZOrderIndex();
  void            __fastcall set_TextSegment(long Value);
  long            __fastcall get_TextSegment();
  void            __fastcall set_OrientedText(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_OrientedText();
  void            __fastcall set_ShowJump(Addflow5lib_tlb::ShowJumpConstants Value);
  Addflow5lib_tlb::ShowJumpConstants __fastcall get_ShowJump();
  void            __fastcall set_DrawWidth(float Value);
  float           __fastcall get_DrawWidth();
  void            __fastcall set_DrawStyle(Addflow5lib_tlb::DrawStyleConstants Value);
  Addflow5lib_tlb::DrawStyleConstants __fastcall get_DrawStyle();
  void            __fastcall set_OwnerDraw(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_OwnerDraw();
  void            __fastcall set_SizeArrowOrg(Addflow5lib_tlb::ArrowSizeConstants Value);
  Addflow5lib_tlb::ArrowSizeConstants __fastcall get_SizeArrowOrg();
  void            __fastcall set_RoundedCorner(VARIANT_BOOL Value);
  VARIANT_BOOL    __fastcall get_RoundedCorner();
  void            __fastcall set_TagVariant(VARIANT Value);
  VARIANT         __fastcall get_TagVariant();
  void            __fastcall set_SizeArrowDst(Addflow5lib_tlb::ArrowSizeConstants Value);
  Addflow5lib_tlb::ArrowSizeConstants __fastcall get_SizeArrowDst();

  __property   long            ZOrder = {read = get_ZOrder, write = set_ZOrder};
  __property   VARIANT_BOOL    Selected = {read = get_Selected, write = set_Selected};
  __property   VARIANT_BOOL    Selectable = {read = get_Selectable, write = set_Selectable};
  __property   ::OLE_COLOR     ForeColor = {read = get_ForeColor, write = set_ForeColor};
  __property   Addflow5lib_tlb::afNode* Dst = {read = get_Dst, write = set_Dst};
  __property   Addflow5lib_tlb::ArrowConstants ArrowDst = {read = get_ArrowDst, write = set_ArrowDst};
  __property   Addflow5lib_tlb::afNode* Org = {read = get_Org, write = set_Org};
  __property   IFontDisp**     Font = {read = get_Font, write = set_Font};
  __property   BSTR            Text = {read = get_Text, write = set_Text};
  __property   BSTR            Tag = {read = get_Tag, write = set_Tag};
  __property   Addflow5lib_tlb::afLinkPoints* ExtraPoints = {read = get_ExtraPoints, write = set_ExtraPoints};
  __property   Addflow5lib_tlb::LinkStyleConstants LinkStyle = {read = get_LinkStyle, write = set_LinkStyle};
  __property   BSTR            Key = {read = get_Key, write = set_Key};
  __property   long            InIndex = {read = get_InIndex, write = set_InIndex};
  __property   long            OutIndex = {read = get_OutIndex, write = set_OutIndex};
  __property   long            UserData = {read = get_UserData, write = set_UserData};
  __property   ::OLE_COLOR     DrawColor = {read = get_DrawColor, write = set_DrawColor};
  __property   VARIANT_BOOL    Marked = {read = get_Marked, write = set_Marked};
  __property   VARIANT_BOOL    Hidden = {read = get_Hidden, write = set_Hidden};
  __property   VARIANT_BOOL    Rigid = {read = get_Rigid, write = set_Rigid};
  __property   Addflow5lib_tlb::ArrowConstants ArrowOrg = {read = get_ArrowOrg, write = set_ArrowOrg};
  __property   VARIANT_BOOL    AdjustOrg = {read = get_AdjustOrg, write = set_AdjustOrg};
  __property   VARIANT_BOOL    AdjustDst = {read = get_AdjustDst, write = set_AdjustDst};
  __property   BSTR            ToolTip = {read = get_ToolTip, write = set_ToolTip};
  __property   Addflow5lib_tlb::ArrowSizeConstants SizeArrowMid = {read = get_SizeArrowMid, write = set_SizeArrowMid};
  __property   VARIANT_BOOL    Logical = {read = get_Logical, write = set_Logical};
  __property   VARIANT_BOOL    OrthogonalDynamic = {read = get_OrthogonalDynamic, write = set_OrthogonalDynamic};
  __property   VARIANT_BOOL    Stretchable = {read = get_Stretchable, write = set_Stretchable};
  __property   Addflow5lib_tlb::BackModeConstants BackMode = {read = get_BackMode, write = set_BackMode};
  __property   Addflow5lib_tlb::ArrowConstants ArrowMid = {read = get_ArrowMid, write = set_ArrowMid};
  __property   long            ZOrderIndex = {read = get_ZOrderIndex, write = set_ZOrderIndex};
  __property   long            TextSegment = {read = get_TextSegment, write = set_TextSegment};
  __property   VARIANT_BOOL    OrientedText = {read = get_OrientedText, write = set_OrientedText};
  __property   Addflow5lib_tlb::ShowJumpConstants ShowJump = {read = get_ShowJump, write = set_ShowJump};
  __property   float           DrawWidth = {read = get_DrawWidth, write = set_DrawWidth};
  __property   Addflow5lib_tlb::DrawStyleConstants DrawStyle = {read = get_DrawStyle, write = set_DrawStyle};
  __property   VARIANT_BOOL    OwnerDraw = {read = get_OwnerDraw, write = set_OwnerDraw};
  __property   Addflow5lib_tlb::ArrowSizeConstants SizeArrowOrg = {read = get_SizeArrowOrg, write = set_SizeArrowOrg};
  __property   VARIANT_BOOL    RoundedCorner = {read = get_RoundedCorner, write = set_RoundedCorner};
  __property   VARIANT         TagVariant = {read = get_TagVariant, write = set_TagVariant};
  __property   Addflow5lib_tlb::ArrowSizeConstants SizeArrowDst = {read = get_SizeArrowDst, write = set_SizeArrowDst};
};
typedef ILinkDispT<ILink> ILinkDisp;

// *********************************************************************//
// DispIntf:  ILinkPoints
// Flags:     (4112) Hidden Dispatchable
// GUID:      {E625F3B1-CB36-4ABA-8FAF-E5E6B1A7A72B}
// *********************************************************************//
template<class T>
class ILinkPointsDispT : public TAutoDriver<ILinkPoints>
{
public:
  ILinkPointsDispT(){}

  ILinkPointsDispT(ILinkPoints *pintf)
  {
    TAutoDriver<ILinkPoints>::Bind(pintf, false);
  }

  ILinkPointsDispT(ILinkPointsPtr pintf)
  {
    TAutoDriver<ILinkPoints>::Bind(pintf, true);
  }

  ILinkPointsDispT& operator=(ILinkPoints *pintf)
  {
    TAutoDriver<ILinkPoints>::Bind(pintf, false);
    return *this;
  }

  ILinkPointsDispT& operator=(ILinkPointsPtr pintf)
  {
    TAutoDriver<ILinkPoints>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_afLinkPoints));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_afLinkPoints);
  }

  Addflow5lib_tlb::afLinkPoint* __fastcall get_Item(long Index);
  void            __fastcall Clear();
  void            __fastcall Remove(long Index);
  void            __fastcall _set_Item(long Index, Addflow5lib_tlb::afLinkPoint* Param2);
  Addflow5lib_tlb::afLinkPoint* __fastcall Add(float x, float y);
  LPUNKNOWN       __fastcall _NewEnum();
  void            __fastcall set_Count(long Value);
  long            __fastcall get_Count();

  __property   long            Count = {read = get_Count, write = set_Count};
};
typedef ILinkPointsDispT<ILinkPoints> ILinkPointsDisp;

// *********************************************************************//
// DispIntf:  ILinkPoint
// Flags:     (4112) Hidden Dispatchable
// GUID:      {3C98496E-F2CA-43BE-A0C3-8EB1C2FA9259}
// *********************************************************************//
template<class T>
class ILinkPointDispT : public TAutoDriver<ILinkPoint>
{
public:
  ILinkPointDispT(){}

  ILinkPointDispT(ILinkPoint *pintf)
  {
    TAutoDriver<ILinkPoint>::Bind(pintf, false);
  }

  ILinkPointDispT(ILinkPointPtr pintf)
  {
    TAutoDriver<ILinkPoint>::Bind(pintf, true);
  }

  ILinkPointDispT& operator=(ILinkPoint *pintf)
  {
    TAutoDriver<ILinkPoint>::Bind(pintf, false);
    return *this;
  }

  ILinkPointDispT& operator=(ILinkPointPtr pintf)
  {
    TAutoDriver<ILinkPoint>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_afLinkPoint));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_afLinkPoint);
  }

  void            __fastcall set_x(float Value);
  float           __fastcall get_x();
  void            __fastcall set_y(float Value);
  float           __fastcall get_y();

  __property   float           x = {read = get_x, write = set_x};
  __property   float           y = {read = get_y, write = set_y};
};
typedef ILinkPointDispT<ILinkPoint> ILinkPointDisp;

// *********************************************************************//
// DispIntf:  ISelNodes
// Flags:     (4096) Dispatchable
// GUID:      {54BBB3DA-D31C-4471-8C2F-C68A074B3D1C}
// *********************************************************************//
template<class T>
class ISelNodesDispT : public TAutoDriver<ISelNodes>
{
public:
  ISelNodesDispT(){}

  ISelNodesDispT(ISelNodes *pintf)
  {
    TAutoDriver<ISelNodes>::Bind(pintf, false);
  }

  ISelNodesDispT(ISelNodesPtr pintf)
  {
    TAutoDriver<ISelNodes>::Bind(pintf, true);
  }

  ISelNodesDispT& operator=(ISelNodes *pintf)
  {
    TAutoDriver<ISelNodes>::Bind(pintf, false);
    return *this;
  }

  ISelNodesDispT& operator=(ISelNodesPtr pintf)
  {
    TAutoDriver<ISelNodes>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_afSelNodes));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_afSelNodes);
  }

  void            __fastcall Add(Addflow5lib_tlb::afNode* node);
  void            __fastcall Clear();
  LPUNKNOWN       __fastcall _NewEnum();
  void            __fastcall Remove(Addflow5lib_tlb::afNode* node);
  Addflow5lib_tlb::afNode* __fastcall Item(long Index);
  void            __fastcall set_Count(long Value);
  long            __fastcall get_Count();

  __property   long            Count = {read = get_Count, write = set_Count};
};
typedef ISelNodesDispT<ISelNodes> ISelNodesDisp;

// *********************************************************************//
// DispIntf:  ISelLinks
// Flags:     (4096) Dispatchable
// GUID:      {75795457-BA5C-4322-A818-D62B7FF7C0D3}
// *********************************************************************//
template<class T>
class ISelLinksDispT : public TAutoDriver<ISelLinks>
{
public:
  ISelLinksDispT(){}

  ISelLinksDispT(ISelLinks *pintf)
  {
    TAutoDriver<ISelLinks>::Bind(pintf, false);
  }

  ISelLinksDispT(ISelLinksPtr pintf)
  {
    TAutoDriver<ISelLinks>::Bind(pintf, true);
  }

  ISelLinksDispT& operator=(ISelLinks *pintf)
  {
    TAutoDriver<ISelLinks>::Bind(pintf, false);
    return *this;
  }

  ISelLinksDispT& operator=(ISelLinksPtr pintf)
  {
    TAutoDriver<ISelLinks>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_afSelLinks));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_afSelLinks);
  }

  void            __fastcall Add(Addflow5lib_tlb::afLink* link);
  void            __fastcall Clear();
  LPUNKNOWN       __fastcall _NewEnum();
  void            __fastcall Remove(Addflow5lib_tlb::afLink* link);
  Addflow5lib_tlb::afLink* __fastcall Item(long Index);
  void            __fastcall set_Count(long Value);
  long            __fastcall get_Count();

  __property   long            Count = {read = get_Count, write = set_Count};
};
typedef ISelLinksDispT<ISelLinks> ISelLinksDisp;

// *********************************************************************//
// DispIntf:  IPictures
// Flags:     (4096) Dispatchable
// GUID:      {9BDEDFA3-5C40-4BCE-B1C5-4D3E40E0F8A2}
// *********************************************************************//
template<class T>
class IPicturesDispT : public TAutoDriver<IPictures>
{
public:
  IPicturesDispT(){}

  IPicturesDispT(IPictures *pintf)
  {
    TAutoDriver<IPictures>::Bind(pintf, false);
  }

  IPicturesDispT(IPicturesPtr pintf)
  {
    TAutoDriver<IPictures>::Bind(pintf, true);
  }

  IPicturesDispT& operator=(IPictures *pintf)
  {
    TAutoDriver<IPictures>::Bind(pintf, false);
    return *this;
  }

  IPicturesDispT& operator=(IPicturesPtr pintf)
  {
    TAutoDriver<IPictures>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_afPictures));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_afPictures);
  }

  void            __fastcall Add(IPictureDisp** Picture);
  void            __fastcall Clear();
  LPUNKNOWN       __fastcall _NewEnum();
  IPictureDisp**  __fastcall get_Item(long idx);
  IPictureDisp**  __fastcall get__Item(long idx);
  void            __fastcall set_Count(long Value);
  long            __fastcall get_Count();

  __property   long            Count = {read = get_Count, write = set_Count};
};
typedef IPicturesDispT<IPictures> IPicturesDisp;

// *********************************************************************//
// DispIntf:  ICustomShapes
// Flags:     (4096) Dispatchable
// GUID:      {77BF7BAC-C68A-40F7-8B1A-F62DE2980D59}
// *********************************************************************//
template<class T>
class ICustomShapesDispT : public TAutoDriver<ICustomShapes>
{
public:
  ICustomShapesDispT(){}

  ICustomShapesDispT(ICustomShapes *pintf)
  {
    TAutoDriver<ICustomShapes>::Bind(pintf, false);
  }

  ICustomShapesDispT(ICustomShapesPtr pintf)
  {
    TAutoDriver<ICustomShapes>::Bind(pintf, true);
  }

  ICustomShapesDispT& operator=(ICustomShapes *pintf)
  {
    TAutoDriver<ICustomShapes>::Bind(pintf, false);
    return *this;
  }

  ICustomShapesDispT& operator=(ICustomShapesPtr pintf)
  {
    TAutoDriver<ICustomShapes>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_afCustomShapes));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_afCustomShapes);
  }

  void            __fastcall Clear();
  Addflow5lib_tlb::afCustomShape* __fastcall get_Item(long idx);
  LPUNKNOWN       __fastcall _NewEnum();
  Addflow5lib_tlb::afCustomShape* __fastcall get__Item(long idx);
  Addflow5lib_tlb::afCustomShape* __fastcall Add();
  void            __fastcall set_Count(long Value);
  long            __fastcall get_Count();

  __property   long            Count = {read = get_Count, write = set_Count};
};
typedef ICustomShapesDispT<ICustomShapes> ICustomShapesDisp;

// *********************************************************************//
// DispIntf:  ICustomShape
// Flags:     (4096) Dispatchable
// GUID:      {1B61DB7B-D136-4EB6-A462-DF9AEF115812}
// *********************************************************************//
template<class T>
class ICustomShapeDispT : public TAutoDriver<ICustomShape>
{
public:
  ICustomShapeDispT(){}

  ICustomShapeDispT(ICustomShape *pintf)
  {
    TAutoDriver<ICustomShape>::Bind(pintf, false);
  }

  ICustomShapeDispT(ICustomShapePtr pintf)
  {
    TAutoDriver<ICustomShape>::Bind(pintf, true);
  }

  ICustomShapeDispT& operator=(ICustomShape *pintf)
  {
    TAutoDriver<ICustomShape>::Bind(pintf, false);
    return *this;
  }

  ICustomShapeDispT& operator=(ICustomShapePtr pintf)
  {
    TAutoDriver<ICustomShape>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_afCustomShape));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_afCustomShape);
  }

  void            __fastcall AddPoint(short x, short y);
  void            __fastcall Clear();
  void            __fastcall set_Count(long Value);
  long            __fastcall get_Count();

  __property   long            Count = {read = get_Count, write = set_Count};
};
typedef ICustomShapeDispT<ICustomShape> ICustomShapeDisp;

// *********************************************************************//
// DispIntf:  _DAddFlowEvents
// Flags:     (4096) Dispatchable
// GUID:      {9431AEF2-26DB-42B6-869F-48D0C9763F08}
// *********************************************************************//
template <class T>
class _DAddFlowEventsDispT : public TAutoDriver<_DAddFlowEvents>
{
public:
  _DAddFlowEventsDispT(){}

  void Attach(LPUNKNOWN punk)
  { m_Dispatch = static_cast<T*>(punk); }

  void            __fastcall _Click();
  void            __fastcall DblClick();
  void            __fastcall MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                       OLE_YPOS_PIXELS y);
  void            __fastcall MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, 
                                       OLE_YPOS_PIXELS y);
  void            __fastcall MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            __fastcall KeyDown(short* KeyCode, short Shift);
  void            __fastcall KeyPress(short* KeyAscii);
  void            __fastcall KeyUp(short* KeyCode, short Shift);
  void            __fastcall Error(short Number, BSTR* Description, long Scode, BSTR Source, 
                                   BSTR HelpFile, long HelpContext, VARIANT_BOOL* CancelDisplay);
  void            __fastcall Scroll();
  void            __fastcall afLostFocus();
  void            __fastcall afGotFocus();
  void            __fastcall AfterAddNode(Addflow5lib_tlb::afNode* NewNode);
  void            __fastcall AfterAddLink(Addflow5lib_tlb::afLink* NewLink);
  void            __fastcall BeforeAddNode(float Left, float Top, float Width, float Height, 
                                           short* Cancel);
  void            __fastcall BeforeAddLink(Addflow5lib_tlb::afNode* Org, 
                                           Addflow5lib_tlb::afNode* Dst, short* Cancel);
  void            __fastcall AfterResize();
  void            __fastcall AfterMove();
  void            __fastcall AfterStretch();
  void            __fastcall AfterSelect();
  void            __fastcall BeforeEdit(Addflow5lib_tlb::afNode* node, short* Cancel);
  void            __fastcall AfterEdit(Addflow5lib_tlb::afNode* node, short* Cancel, BSTR* NewString);
  void            __fastcall BeforeChangeDst(Addflow5lib_tlb::afLink* link, 
                                             Addflow5lib_tlb::afNode* Dst, short* Cancel);
  void            __fastcall BeforeChangeOrg(Addflow5lib_tlb::afLink* link, 
                                             Addflow5lib_tlb::afNode* Org, short* Cancel);
  void            __fastcall NodeOwnerDraw(long Hdc, Addflow5lib_tlb::afNode* node, long* Flags);
  void            __fastcall LinkOwnerDraw(long Hdc, Addflow5lib_tlb::afLink* link, long* Flags);
  void            __fastcall DiagramOwnerDraw(long Hdc, long* Flags);

};
typedef _DAddFlowEventsDispT<_DAddFlowEvents> _DAddFlowEventsDisp;

// *********************************************************************//
// DispIntf:  _DAddFlow
// Flags:     (4112) Hidden Dispatchable
// GUID:      {BF12FD4C-504D-4B4D-AC66-210BF90EE59C}
// *********************************************************************//
template <class T> void __fastcall
_DAddFlowDispT<T>::AboutBox()
{
  _TDispID _dispid(*this, OLETEXT("AboutBox"), DISPID(-552));
  OleProcedure(_dispid);
}

template <class T> Addflow5lib_tlb::afLink* __fastcall
_DAddFlowDispT<T>::AddLink(Addflow5lib_tlb::afNode* Org, Addflow5lib_tlb::afNode* Dst)
{
  _TDispID _dispid(*this, OLETEXT("AddLink"), DISPID(152));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)Org /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)Dst /*[VT_USERDEFINED:1]*/;
  OleFunction(_dispid, _args);
  return (Addflow5lib_tlb::afLink* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> IPictureDisp** __fastcall
_DAddFlowDispT<T>::ExportPagePicture(float Left, float Top, float Width, float Height)
{
  _TDispID _dispid(*this, OLETEXT("ExportPagePicture"), DISPID(151));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  OleFunction(_dispid, _args);
  return (IPictureDisp** /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> OLE_HANDLE __fastcall
_DAddFlowDispT<T>::SaveMemory(Addflow5lib_tlb::ItemSetConstants ItemSet)
{
  _TDispID _dispid(*this, OLETEXT("SaveMemory"), DISPID(150));
  TAutoArgs<1> _args;
  _args[1] = (int)ItemSet /*[VT_USERDEFINED:0]*/;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::LoadMemory(OLE_HANDLE hMem)
{
  _TDispID _dispid(*this, OLETEXT("LoadMemory"), DISPID(149));
  TAutoArgs<1> _args;
  _args[1] = hMem /*[VT_INT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowDispT<T>::BeginAction(short code)
{
  _TDispID _dispid(*this, OLETEXT("BeginAction"), DISPID(148));
  TAutoArgs<1> _args;
  _args[1] = code /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowDispT<T>::UndocMethod(short param)
{
  _TDispID _dispid(*this, OLETEXT("UndocMethod"), DISPID(147));
  TAutoArgs<1> _args;
  _args[1] = param /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowDispT<T>::EndAction()
{
  _TDispID _dispid(*this, OLETEXT("EndAction"), DISPID(146));
  OleProcedure(_dispid);
}

template <class T> VARIANT_BOOL __fastcall
_DAddFlowDispT<T>::CanRedo()
{
  _TDispID _dispid(*this, OLETEXT("CanRedo"), DISPID(145));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> VARIANT_BOOL __fastcall
_DAddFlowDispT<T>::CanUndo()
{
  _TDispID _dispid(*this, OLETEXT("CanUndo"), DISPID(144));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::Redo()
{
  _TDispID _dispid(*this, OLETEXT("Redo"), DISPID(143));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DAddFlowDispT<T>::Undo()
{
  _TDispID _dispid(*this, OLETEXT("Undo"), DISPID(142));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DAddFlowDispT<T>::ZoomRectangle(short TypeZoom, float Left, float Top, float Width, float Height)
{
  _TDispID _dispid(*this, OLETEXT("ZoomRectangle"), DISPID(141));
  TAutoArgs<5> _args;
  _args[1] = TypeZoom /*[VT_I2:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowDispT<T>::SelectRectangle(Addflow5lib_tlb::FilterConstants Filter, float Left, float Top, 
                                   float Width, float Height)
{
  _TDispID _dispid(*this, OLETEXT("SelectRectangle"), DISPID(140));
  TAutoArgs<5> _args;
  _args[1] = (int)Filter /*[VT_USERDEFINED:0]*/;
  _args[2] = Left /*[VT_R4:0]*/;
  _args[3] = Top /*[VT_R4:0]*/;
  _args[4] = Width /*[VT_R4:0]*/;
  _args[5] = Height /*[VT_R4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowDispT<T>::StartEdit()
{
  _TDispID _dispid(*this, OLETEXT("StartEdit"), DISPID(139));
  OleProcedure(_dispid);
}

template <class T> VARIANT_BOOL __fastcall
_DAddFlowDispT<T>::CanPaste()
{
  _TDispID _dispid(*this, OLETEXT("CanPaste"), DISPID(138));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::Paste(VARIANT_BOOL SelectPastedItems)
{
  _TDispID _dispid(*this, OLETEXT("Paste"), DISPID(137));
  TAutoArgs<1> _args;
  _args[1] = SelectPastedItems /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowDispT<T>::Copy(Addflow5lib_tlb::ItemSetConstants ItemSet)
{
  _TDispID _dispid(*this, OLETEXT("Copy"), DISPID(136));
  TAutoArgs<1> _args;
  _args[1] = (int)ItemSet /*[VT_USERDEFINED:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowDispT<T>::DisplayPropertyPage(short param)
{
  _TDispID _dispid(*this, OLETEXT("DisplayPropertyPage"), DISPID(135));
  TAutoArgs<1> _args;
  _args[1] = param /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> IPictureDisp** __fastcall
_DAddFlowDispT<T>::ExportPicture(Addflow5lib_tlb::ItemSetConstants ItemSet, 
                                 VARIANT_BOOL IncludeBackColor, VARIANT_BOOL IncludeBackPic)
{
  _TDispID _dispid(*this, OLETEXT("ExportPicture"), DISPID(134));
  TAutoArgs<3> _args;
  _args[1] = (int)ItemSet /*[VT_USERDEFINED:0]*/;
  _args[2] = IncludeBackColor /*[VT_BOOL:0]*/;
  _args[3] = IncludeBackPic /*[VT_BOOL:0]*/;
  OleFunction(_dispid, _args);
  return (IPictureDisp** /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Addflow5lib_tlb::afLink* __fastcall
_DAddFlowDispT<T>::GetLinkAtPoint(float x, float y)
{
  _TDispID _dispid(*this, OLETEXT("GetLinkAtPoint"), DISPID(133));
  TAutoArgs<2> _args;
  _args[1] = x /*[VT_R4:0]*/;
  _args[2] = y /*[VT_R4:0]*/;
  OleFunction(_dispid, _args);
  return (Addflow5lib_tlb::afLink* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Addflow5lib_tlb::afNode* __fastcall
_DAddFlowDispT<T>::GetNodeAtPoint(float x, float y)
{
  _TDispID _dispid(*this, OLETEXT("GetNodeAtPoint"), DISPID(132));
  TAutoArgs<2> _args;
  _args[1] = x /*[VT_R4:0]*/;
  _args[2] = y /*[VT_R4:0]*/;
  OleFunction(_dispid, _args);
  return (Addflow5lib_tlb::afNode* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::LoadFile(BSTR file)
{
  _TDispID _dispid(*this, OLETEXT("LoadFile"), DISPID(131));
  TAutoArgs<1> _args;
  _args[1] = file /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowDispT<T>::SaveFile(BSTR file)
{
  _TDispID _dispid(*this, OLETEXT("SaveFile"), DISPID(130));
  TAutoArgs<1> _args;
  _args[1] = file /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowDispT<T>::DeleteMarked()
{
  _TDispID _dispid(*this, OLETEXT("DeleteMarked"), DISPID(129));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DAddFlowDispT<T>::DeleteSel()
{
  _TDispID _dispid(*this, OLETEXT("DeleteSel"), DISPID(128));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DAddFlowDispT<T>::GetVersion(short* major, short* minor)
{
  _TDispID _dispid(*this, OLETEXT("GetVersion"), DISPID(127));
  TAutoArgs<2> _args;
  _args[1] = major /*[VT_I2:1]*/;
  _args[2] = minor /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowDispT<T>::SetSelChangedFlag(VARIANT_BOOL SelChanged)
{
  _TDispID _dispid(*this, OLETEXT("SetSelChangedFlag"), DISPID(126));
  TAutoArgs<1> _args;
  _args[1] = SelChanged /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> VARIANT_BOOL __fastcall
_DAddFlowDispT<T>::IsSelChanged()
{
  _TDispID _dispid(*this, OLETEXT("IsSelChanged"), DISPID(125));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::SaveImage(Addflow5lib_tlb::SaveImageMediumConstants tymed, 
                             Addflow5lib_tlb::SaveImageFormatConstants format, BSTR file)
{
  _TDispID _dispid(*this, OLETEXT("SaveImage"), DISPID(124));
  TAutoArgs<3> _args;
  _args[1] = (int)tymed /*[VT_USERDEFINED:0]*/;
  _args[2] = (int)format /*[VT_USERDEFINED:0]*/;
  _args[3] = file /*[VT_BSTR:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowDispT<T>::DoClick()
{
  _TDispID _dispid(*this, OLETEXT("DoClick"), DISPID(-551));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DAddFlowDispT<T>::SetChangedFlag(VARIANT_BOOL Changed)
{
  _TDispID _dispid(*this, OLETEXT("SetChangedFlag"), DISPID(123));
  TAutoArgs<1> _args;
  _args[1] = Changed /*[VT_BOOL:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> VARIANT_BOOL __fastcall
_DAddFlowDispT<T>::IsChanged()
{
  _TDispID _dispid(*this, OLETEXT("IsChanged"), DISPID(122));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::SelectAll()
{
  _TDispID _dispid(*this, OLETEXT("SelectAll"), DISPID(121));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DAddFlowDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(-550));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_BackPicture(IPictureDisp** /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("BackPicture"), DISPID(66));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (IPictureDisp** /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> IPictureDisp** /*[VT_USERDEFINED:1]*/ __fastcall
_DAddFlowDispT<T>::get_BackPicture()
{
  _TDispID _dispid(*this, OLETEXT("BackPicture"), DISPID(66));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (IPictureDisp** /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_Repaint(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Repaint"), DISPID(68));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_Repaint()
{
  _TDispID _dispid(*this, OLETEXT("Repaint"), DISPID(68));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_ArrowOrg(Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ArrowOrg"), DISPID(72));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_ArrowOrg()
{
  _TDispID _dispid(*this, OLETEXT("ArrowOrg"), DISPID(72));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::ArrowConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_PointedArea(Addflow5lib_tlb::PointedAreaConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PointedArea"), DISPID(64));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::PointedAreaConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::PointedAreaConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_PointedArea()
{
  _TDispID _dispid(*this, OLETEXT("PointedArea"), DISPID(64));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::PointedAreaConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_Enabled(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_Enabled()
{
  _TDispID _dispid(*this, OLETEXT("Enabled"), DISPID(-514));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_hWnd(OLE_HANDLE /*[VT_INT:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("hWnd"), DISPID(-515));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> OLE_HANDLE /*[VT_INT:0]*/ __fastcall
_DAddFlowDispT<T>::get_hWnd()
{
  _TDispID _dispid(*this, OLETEXT("hWnd"), DISPID(-515));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_Alignment(Addflow5lib_tlb::AlignmentConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(65));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::AlignmentConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::AlignmentConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_Alignment()
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(65));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::AlignmentConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_ShapeOrientation(Addflow5lib_tlb::ShapeOrientationConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ShapeOrientation"), DISPID(89));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ShapeOrientationConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::ShapeOrientationConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_ShapeOrientation()
{
  _TDispID _dispid(*this, OLETEXT("ShapeOrientation"), DISPID(89));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::ShapeOrientationConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_ReadOnly(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_ReadOnly()
{
  _TDispID _dispid(*this, OLETEXT("ReadOnly"), DISPID(35));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_DisplayHandles(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("DisplayHandles"), DISPID(34));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_DisplayHandles()
{
  _TDispID _dispid(*this, OLETEXT("DisplayHandles"), DISPID(34));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_MultiSel(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("MultiSel"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_MultiSel()
{
  _TDispID _dispid(*this, OLETEXT("MultiSel"), DISPID(36));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_SelectAction(Addflow5lib_tlb::SelectActionConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SelectAction"), DISPID(91));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::SelectActionConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::SelectActionConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_SelectAction()
{
  _TDispID _dispid(*this, OLETEXT("SelectAction"), DISPID(91));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::SelectActionConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_StretchingPoint(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("StretchingPoint"), DISPID(88));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DAddFlowDispT<T>::get_StretchingPoint()
{
  _TDispID _dispid(*this, OLETEXT("StretchingPoint"), DISPID(88));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_ArrowMid(Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ArrowMid"), DISPID(90));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_ArrowMid()
{
  _TDispID _dispid(*this, OLETEXT("ArrowMid"), DISPID(90));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::ArrowConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_ProportionalBars(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ProportionalBars"), DISPID(92));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_ProportionalBars()
{
  _TDispID _dispid(*this, OLETEXT("ProportionalBars"), DISPID(92));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_BackColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall
_DAddFlowDispT<T>::get_BackColor()
{
  _TDispID _dispid(*this, OLETEXT("BackColor"), DISPID(-501));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_CanDrawNode(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CanDrawNode"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_CanDrawNode()
{
  _TDispID _dispid(*this, OLETEXT("CanDrawNode"), DISPID(1));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_DrawStyle(Addflow5lib_tlb::DrawStyleConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("DrawStyle"), DISPID(61));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::DrawStyleConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::DrawStyleConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_DrawStyle()
{
  _TDispID _dispid(*this, OLETEXT("DrawStyle"), DISPID(61));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::DrawStyleConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_yScroll(float /*[VT_R4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("yScroll"), DISPID(63));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> float /*[VT_R4:0]*/ __fastcall
_DAddFlowDispT<T>::get_yScroll()
{
  _TDispID _dispid(*this, OLETEXT("yScroll"), DISPID(63));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_CanMoveNode(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CanMoveNode"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_CanMoveNode()
{
  _TDispID _dispid(*this, OLETEXT("CanMoveNode"), DISPID(2));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_PointedLink(Addflow5lib_tlb::afLink* /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PointedLink"), DISPID(81));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afLink* /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afLink* /*[VT_USERDEFINED:1]*/ __fastcall
_DAddFlowDispT<T>::get_PointedLink()
{
  _TDispID _dispid(*this, OLETEXT("PointedLink"), DISPID(81));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::afLink* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_Font(IFontDisp** /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (IFontDisp** /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> IFontDisp** /*[VT_USERDEFINED:1]*/ __fastcall
_DAddFlowDispT<T>::get_Font()
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(-512));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (IFontDisp** /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_LinkStyle(Addflow5lib_tlb::LinkStyleConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("LinkStyle"), DISPID(82));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::LinkStyleConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::LinkStyleConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_LinkStyle()
{
  _TDispID _dispid(*this, OLETEXT("LinkStyle"), DISPID(82));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::LinkStyleConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_xScroll(float /*[VT_R4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("xScroll"), DISPID(62));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> float /*[VT_R4:0]*/ __fastcall
_DAddFlowDispT<T>::get_xScroll()
{
  _TDispID _dispid(*this, OLETEXT("xScroll"), DISPID(62));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_Shape(Addflow5lib_tlb::ShapeConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Shape"), DISPID(59));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ShapeConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::ShapeConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_Shape()
{
  _TDispID _dispid(*this, OLETEXT("Shape"), DISPID(59));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::ShapeConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_AutoScroll(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("AutoScroll"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_AutoScroll()
{
  _TDispID _dispid(*this, OLETEXT("AutoScroll"), DISPID(3));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_AutoSize(Addflow5lib_tlb::AutoSizeConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(69));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::AutoSizeConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::AutoSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_AutoSize()
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(69));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::AutoSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_ScrollBars(Addflow5lib_tlb::ScrollBarsConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ScrollBars"), DISPID(60));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ScrollBarsConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::ScrollBarsConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_ScrollBars()
{
  _TDispID _dispid(*this, OLETEXT("ScrollBars"), DISPID(60));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::ScrollBarsConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_yGrid(float /*[VT_R4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("yGrid"), DISPID(57));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> float /*[VT_R4:0]*/ __fastcall
_DAddFlowDispT<T>::get_yGrid()
{
  _TDispID _dispid(*this, OLETEXT("yGrid"), DISPID(57));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_xGrid(float /*[VT_R4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("xGrid"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> float /*[VT_R4:0]*/ __fastcall
_DAddFlowDispT<T>::get_xGrid()
{
  _TDispID _dispid(*this, OLETEXT("xGrid"), DISPID(56));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_SelectMode(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SelectMode"), DISPID(58));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_SelectMode()
{
  _TDispID _dispid(*this, OLETEXT("SelectMode"), DISPID(58));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_SelLinks(Addflow5lib_tlb::afSelLinks* /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SelLinks"), DISPID(87));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afSelLinks* /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afSelLinks* /*[VT_USERDEFINED:1]*/ __fastcall
_DAddFlowDispT<T>::get_SelLinks()
{
  _TDispID _dispid(*this, OLETEXT("SelLinks"), DISPID(87));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::afSelLinks* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_GridColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("GridColor"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall
_DAddFlowDispT<T>::get_GridColor()
{
  _TDispID _dispid(*this, OLETEXT("GridColor"), DISPID(23));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_ForeColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall
_DAddFlowDispT<T>::get_ForeColor()
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(30));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_FillColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("FillColor"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall
_DAddFlowDispT<T>::get_FillColor()
{
  _TDispID _dispid(*this, OLETEXT("FillColor"), DISPID(29));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_ShowGrid(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ShowGrid"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_ShowGrid()
{
  _TDispID _dispid(*this, OLETEXT("ShowGrid"), DISPID(24));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_LinkCreationMode(Addflow5lib_tlb::LinkCreationModeConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("LinkCreationMode"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::LinkCreationModeConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::LinkCreationModeConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_LinkCreationMode()
{
  _TDispID _dispid(*this, OLETEXT("LinkCreationMode"), DISPID(21));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::LinkCreationModeConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_PicturePosition(Addflow5lib_tlb::PicturePositionConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PicturePosition"), DISPID(85));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::PicturePositionConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::PicturePositionConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_PicturePosition()
{
  _TDispID _dispid(*this, OLETEXT("PicturePosition"), DISPID(85));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::PicturePositionConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_GridStyle(Addflow5lib_tlb::GridStyleConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("GridStyle"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::GridStyleConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::GridStyleConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_GridStyle()
{
  _TDispID _dispid(*this, OLETEXT("GridStyle"), DISPID(22));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::GridStyleConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_CanDrawLink(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CanDrawLink"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_CanDrawLink()
{
  _TDispID _dispid(*this, OLETEXT("CanDrawLink"), DISPID(31));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_AdjustOrg(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("AdjustOrg"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_AdjustOrg()
{
  _TDispID _dispid(*this, OLETEXT("AdjustOrg"), DISPID(9));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_DrawColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("DrawColor"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall
_DAddFlowDispT<T>::get_DrawColor()
{
  _TDispID _dispid(*this, OLETEXT("DrawColor"), DISPID(28));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_AdjustDst(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("AdjustDst"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_AdjustDst()
{
  _TDispID _dispid(*this, OLETEXT("AdjustDst"), DISPID(10));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_Transparent(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Transparent"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_Transparent()
{
  _TDispID _dispid(*this, OLETEXT("Transparent"), DISPID(27));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_CanStretchLink(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CanStretchLink"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_CanStretchLink()
{
  _TDispID _dispid(*this, OLETEXT("CanStretchLink"), DISPID(33));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_CanSizeNode(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CanSizeNode"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_CanSizeNode()
{
  _TDispID _dispid(*this, OLETEXT("CanSizeNode"), DISPID(32));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_Rigid(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Rigid"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_Rigid()
{
  _TDispID _dispid(*this, OLETEXT("Rigid"), DISPID(8));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_AllowArrowKeys(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("AllowArrowKeys"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_AllowArrowKeys()
{
  _TDispID _dispid(*this, OLETEXT("AllowArrowKeys"), DISPID(7));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_CanUndoRedo(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CanUndoRedo"), DISPID(41));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_CanUndoRedo()
{
  _TDispID _dispid(*this, OLETEXT("CanUndoRedo"), DISPID(41));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_LinkingHandleSize(Addflow5lib_tlb::HandleSizeConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("LinkingHandleSize"), DISPID(40));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::HandleSizeConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::HandleSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_LinkingHandleSize()
{
  _TDispID _dispid(*this, OLETEXT("LinkingHandleSize"), DISPID(40));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::HandleSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_EditMode(Addflow5lib_tlb::EditModeConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("EditMode"), DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::EditModeConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::EditModeConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_EditMode()
{
  _TDispID _dispid(*this, OLETEXT("EditMode"), DISPID(37));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::EditModeConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_SelectionHandleSize(Addflow5lib_tlb::HandleSizeConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SelectionHandleSize"), DISPID(39));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::HandleSizeConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::HandleSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_SelectionHandleSize()
{
  _TDispID _dispid(*this, OLETEXT("SelectionHandleSize"), DISPID(39));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::HandleSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_SelNodes(Addflow5lib_tlb::afSelNodes* /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SelNodes"), DISPID(86));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afSelNodes* /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afSelNodes* /*[VT_USERDEFINED:1]*/ __fastcall
_DAddFlowDispT<T>::get_SelNodes()
{
  _TDispID _dispid(*this, OLETEXT("SelNodes"), DISPID(86));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::afSelNodes* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_BackMode(Addflow5lib_tlb::BackModeConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("BackMode"), DISPID(96));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::BackModeConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::BackModeConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_BackMode()
{
  _TDispID _dispid(*this, OLETEXT("BackMode"), DISPID(96));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::BackModeConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_yShadowOffset(float /*[VT_R4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("yShadowOffset"), DISPID(95));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> float /*[VT_R4:0]*/ __fastcall
_DAddFlowDispT<T>::get_yShadowOffset()
{
  _TDispID _dispid(*this, OLETEXT("yShadowOffset"), DISPID(95));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_OrthogonalDynamic(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("OrthogonalDynamic"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_OrthogonalDynamic()
{
  _TDispID _dispid(*this, OLETEXT("OrthogonalDynamic"), DISPID(11));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_SnapToGrid(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SnapToGrid"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_SnapToGrid()
{
  _TDispID _dispid(*this, OLETEXT("SnapToGrid"), DISPID(25));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_ScrollTrack(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ScrollTrack"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_ScrollTrack()
{
  _TDispID _dispid(*this, OLETEXT("ScrollTrack"), DISPID(6));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_Hidden(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Hidden"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_Hidden()
{
  _TDispID _dispid(*this, OLETEXT("Hidden"), DISPID(26));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_CanMultiLink(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CanMultiLink"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_CanMultiLink()
{
  _TDispID _dispid(*this, OLETEXT("CanMultiLink"), DISPID(5));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_Shadow(Addflow5lib_tlb::ShadowConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(93));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ShadowConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::ShadowConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_Shadow()
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(93));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::ShadowConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_xShadowOffset(float /*[VT_R4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("xShadowOffset"), DISPID(94));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> float /*[VT_R4:0]*/ __fastcall
_DAddFlowDispT<T>::get_xShadowOffset()
{
  _TDispID _dispid(*this, OLETEXT("xShadowOffset"), DISPID(94));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_ShadowColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ShadowColor"), DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall
_DAddFlowDispT<T>::get_ShadowColor()
{
  _TDispID _dispid(*this, OLETEXT("ShadowColor"), DISPID(38));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_OrientedText(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("OrientedText"), DISPID(43));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_OrientedText()
{
  _TDispID _dispid(*this, OLETEXT("OrientedText"), DISPID(43));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_Pictures(Addflow5lib_tlb::afPictures* /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Pictures"), DISPID(102));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afPictures* /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afPictures* /*[VT_USERDEFINED:1]*/ __fastcall
_DAddFlowDispT<T>::get_Pictures()
{
  _TDispID _dispid(*this, OLETEXT("Pictures"), DISPID(102));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::afPictures* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_CanChangeDst(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CanChangeDst"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_CanChangeDst()
{
  _TDispID _dispid(*this, OLETEXT("CanChangeDst"), DISPID(19));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_MaxInDegree(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("MaxInDegree"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DAddFlowDispT<T>::get_MaxInDegree()
{
  _TDispID _dispid(*this, OLETEXT("MaxInDegree"), DISPID(44));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_ShowPropertyPages(Addflow5lib_tlb::ShowPropertyPagesConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ShowPropertyPages"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ShowPropertyPagesConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::ShowPropertyPagesConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_ShowPropertyPages()
{
  _TDispID _dispid(*this, OLETEXT("ShowPropertyPages"), DISPID(12));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::ShowPropertyPagesConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_MaxOutDegree(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("MaxOutDegree"), DISPID(45));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DAddFlowDispT<T>::get_MaxOutDegree()
{
  _TDispID _dispid(*this, OLETEXT("MaxOutDegree"), DISPID(45));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_MaxDegree(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("MaxDegree"), DISPID(46));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DAddFlowDispT<T>::get_MaxDegree()
{
  _TDispID _dispid(*this, OLETEXT("MaxDegree"), DISPID(46));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_OwnerDraw(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("OwnerDraw"), DISPID(115));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_OwnerDraw()
{
  _TDispID _dispid(*this, OLETEXT("OwnerDraw"), DISPID(115));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_LinkOwnerDraw(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("LinkOwnerDraw"), DISPID(117));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_LinkOwnerDraw()
{
  _TDispID _dispid(*this, OLETEXT("LinkOwnerDraw"), DISPID(117));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_GradientColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("GradientColor"), DISPID(55));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall
_DAddFlowDispT<T>::get_GradientColor()
{
  _TDispID _dispid(*this, OLETEXT("GradientColor"), DISPID(55));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_Gradient(Addflow5lib_tlb::GradientConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Gradient"), DISPID(120));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::GradientConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::GradientConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_Gradient()
{
  _TDispID _dispid(*this, OLETEXT("Gradient"), DISPID(120));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::GradientConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_RedoNode(Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("RedoNode"), DISPID(113));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afNode* /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ __fastcall
_DAddFlowDispT<T>::get_RedoNode()
{
  _TDispID _dispid(*this, OLETEXT("RedoNode"), DISPID(113));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::afNode* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_NodeOwnerDraw(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("NodeOwnerDraw"), DISPID(116));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_NodeOwnerDraw()
{
  _TDispID _dispid(*this, OLETEXT("NodeOwnerDraw"), DISPID(116));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_RedoLink(Addflow5lib_tlb::afLink* /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("RedoLink"), DISPID(114));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afLink* /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afLink* /*[VT_USERDEFINED:1]*/ __fastcall
_DAddFlowDispT<T>::get_RedoLink()
{
  _TDispID _dispid(*this, OLETEXT("RedoLink"), DISPID(114));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::afLink* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_UndoLink(Addflow5lib_tlb::afLink* /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("UndoLink"), DISPID(112));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afLink* /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afLink* /*[VT_USERDEFINED:1]*/ __fastcall
_DAddFlowDispT<T>::get_UndoLink()
{
  _TDispID _dispid(*this, OLETEXT("UndoLink"), DISPID(112));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::afLink* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_DrawMethod(Addflow5lib_tlb::DrawMethodConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("DrawMethod"), DISPID(98));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::DrawMethodConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::DrawMethodConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_DrawMethod()
{
  _TDispID _dispid(*this, OLETEXT("DrawMethod"), DISPID(98));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::DrawMethodConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_LogicalOnly(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("LogicalOnly"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_LogicalOnly()
{
  _TDispID _dispid(*this, OLETEXT("LogicalOnly"), DISPID(13));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_SizeArrowMid(Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SizeArrowMid"), DISPID(105));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowSizeConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_SizeArrowMid()
{
  _TDispID _dispid(*this, OLETEXT("SizeArrowMid"), DISPID(105));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::ArrowSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_CanFireError(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CanFireError"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_CanFireError()
{
  _TDispID _dispid(*this, OLETEXT("CanFireError"), DISPID(17));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_CycleMode(Addflow5lib_tlb::CycleModeConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CycleMode"), DISPID(47));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::CycleModeConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::CycleModeConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_CycleMode()
{
  _TDispID _dispid(*this, OLETEXT("CycleMode"), DISPID(47));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::CycleModeConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_SizeArrowDst(Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SizeArrowDst"), DISPID(103));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowSizeConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_SizeArrowDst()
{
  _TDispID _dispid(*this, OLETEXT("SizeArrowDst"), DISPID(103));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::ArrowSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_SizeArrowOrg(Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SizeArrowOrg"), DISPID(104));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowSizeConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_SizeArrowOrg()
{
  _TDispID _dispid(*this, OLETEXT("SizeArrowOrg"), DISPID(104));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::ArrowSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_ShowJump(Addflow5lib_tlb::ShowJumpConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ShowJump"), DISPID(48));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ShowJumpConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::ShowJumpConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_ShowJump()
{
  _TDispID _dispid(*this, OLETEXT("ShowJump"), DISPID(48));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::ShowJumpConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_CanChangeOrg(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CanChangeOrg"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_CanChangeOrg()
{
  _TDispID _dispid(*this, OLETEXT("CanChangeOrg"), DISPID(18));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_RedoCode(Addflow5lib_tlb::ActionConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("RedoCode"), DISPID(101));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ActionConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::ActionConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_RedoCode()
{
  _TDispID _dispid(*this, OLETEXT("RedoCode"), DISPID(101));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::ActionConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_NoPrefix(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("NoPrefix"), DISPID(99));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_NoPrefix()
{
  _TDispID _dispid(*this, OLETEXT("NoPrefix"), DISPID(99));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_Ellipsis(Addflow5lib_tlb::EllipsisConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Ellipsis"), DISPID(97));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::EllipsisConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::EllipsisConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_Ellipsis()
{
  _TDispID _dispid(*this, OLETEXT("Ellipsis"), DISPID(97));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::EllipsisConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_UndoCode(Addflow5lib_tlb::ActionConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("UndoCode"), DISPID(100));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ActionConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::ActionConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_UndoCode()
{
  _TDispID _dispid(*this, OLETEXT("UndoCode"), DISPID(100));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::ActionConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_ZeroOriginForExport(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ZeroOriginForExport"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_ZeroOriginForExport()
{
  _TDispID _dispid(*this, OLETEXT("ZeroOriginForExport"), DISPID(16));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_ScrollWheel(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ScrollWheel"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_ScrollWheel()
{
  _TDispID _dispid(*this, OLETEXT("ScrollWheel"), DISPID(14));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_RemovePointAngle(Addflow5lib_tlb::RemovePointAngleConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("RemovePointAngle"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::RemovePointAngleConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::RemovePointAngleConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_RemovePointAngle()
{
  _TDispID _dispid(*this, OLETEXT("RemovePointAngle"), DISPID(15));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::RemovePointAngleConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_PictureIndex(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PictureIndex"), DISPID(119));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DAddFlowDispT<T>::get_PictureIndex()
{
  _TDispID _dispid(*this, OLETEXT("PictureIndex"), DISPID(119));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_MousePointer(Addflow5lib_tlb::MousePointerConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(70));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::MousePointerConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::MousePointerConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_MousePointer()
{
  _TDispID _dispid(*this, OLETEXT("MousePointer"), DISPID(70));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::MousePointerConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_MouseIcon(IPictureDisp** /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(71));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (IPictureDisp** /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> IPictureDisp** /*[VT_USERDEFINED:1]*/ __fastcall
_DAddFlowDispT<T>::get_MouseIcon()
{
  _TDispID _dispid(*this, OLETEXT("MouseIcon"), DISPID(71));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (IPictureDisp** /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_Nodes(Addflow5lib_tlb::afNodes* /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Nodes"), DISPID(73));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afNodes* /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afNodes* /*[VT_USERDEFINED:1]*/ __fastcall
_DAddFlowDispT<T>::get_Nodes()
{
  _TDispID _dispid(*this, OLETEXT("Nodes"), DISPID(73));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::afNodes* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_BorderStyle(Addflow5lib_tlb::BorderStyleConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::BorderStyleConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::BorderStyleConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_BorderStyle()
{
  _TDispID _dispid(*this, OLETEXT("BorderStyle"), DISPID(-504));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::BorderStyleConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_LastUserAction(Addflow5lib_tlb::UserActionConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("LastUserAction"), DISPID(76));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::UserActionConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::UserActionConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_LastUserAction()
{
  _TDispID _dispid(*this, OLETEXT("LastUserAction"), DISPID(76));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::UserActionConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_SelectedNode(Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SelectedNode"), DISPID(78));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afNode* /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ __fastcall
_DAddFlowDispT<T>::get_SelectedNode()
{
  _TDispID _dispid(*this, OLETEXT("SelectedNode"), DISPID(78));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::afNode* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_DrawWidth(float /*[VT_R4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("DrawWidth"), DISPID(77));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> float /*[VT_R4:0]*/ __fastcall
_DAddFlowDispT<T>::get_DrawWidth()
{
  _TDispID _dispid(*this, OLETEXT("DrawWidth"), DISPID(77));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_ArrowDst(Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ArrowDst"), DISPID(67));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_ArrowDst()
{
  _TDispID _dispid(*this, OLETEXT("ArrowDst"), DISPID(67));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::ArrowConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_yExtent(float /*[VT_R4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("yExtent"), DISPID(84));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> float /*[VT_R4:0]*/ __fastcall
_DAddFlowDispT<T>::get_yExtent()
{
  _TDispID _dispid(*this, OLETEXT("yExtent"), DISPID(84));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_PointedNode(Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PointedNode"), DISPID(80));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afNode* /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ __fastcall
_DAddFlowDispT<T>::get_PointedNode()
{
  _TDispID _dispid(*this, OLETEXT("PointedNode"), DISPID(80));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::afNode* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_SelectedLink(Addflow5lib_tlb::afLink* /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SelectedLink"), DISPID(79));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afLink* /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afLink* /*[VT_USERDEFINED:1]*/ __fastcall
_DAddFlowDispT<T>::get_SelectedLink()
{
  _TDispID _dispid(*this, OLETEXT("SelectedLink"), DISPID(79));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::afLink* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_ShowToolTip(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ShowToolTip"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_ShowToolTip()
{
  _TDispID _dispid(*this, OLETEXT("ShowToolTip"), DISPID(20));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_CanReflexLink(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CanReflexLink"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_CanReflexLink()
{
  _TDispID _dispid(*this, OLETEXT("CanReflexLink"), DISPID(4));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_Appearance(Addflow5lib_tlb::AppearanceConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Appearance"), DISPID(-520));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::AppearanceConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::AppearanceConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_Appearance()
{
  _TDispID _dispid(*this, OLETEXT("Appearance"), DISPID(-520));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::AppearanceConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_xExtent(float /*[VT_R4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("xExtent"), DISPID(83));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> float /*[VT_R4:0]*/ __fastcall
_DAddFlowDispT<T>::get_xExtent()
{
  _TDispID _dispid(*this, OLETEXT("xExtent"), DISPID(83));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_xZoom(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("xZoom"), DISPID(74));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DAddFlowDispT<T>::get_xZoom()
{
  _TDispID _dispid(*this, OLETEXT("xZoom"), DISPID(74));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_RoundedCorner(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("RoundedCorner"), DISPID(49));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_RoundedCorner()
{
  _TDispID _dispid(*this, OLETEXT("RoundedCorner"), DISPID(49));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_CustomShapes(Addflow5lib_tlb::afCustomShapes* /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CustomShapes"), DISPID(106));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afCustomShapes* /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afCustomShapes* /*[VT_USERDEFINED:1]*/ __fastcall
_DAddFlowDispT<T>::get_CustomShapes()
{
  _TDispID _dispid(*this, OLETEXT("CustomShapes"), DISPID(106));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::afCustomShapes* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_SkipUndo(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SkipUndo"), DISPID(107));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_SkipUndo()
{
  _TDispID _dispid(*this, OLETEXT("SkipUndo"), DISPID(107));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_RoundedCornerSize(Addflow5lib_tlb::RoundSizeConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("RoundedCornerSize"), DISPID(109));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::RoundSizeConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::RoundSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_RoundedCornerSize()
{
  _TDispID _dispid(*this, OLETEXT("RoundedCornerSize"), DISPID(109));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::RoundSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_EditHardReturn(Addflow5lib_tlb::EditHardReturnConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("EditHardReturn"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::EditHardReturnConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::EditHardReturnConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_EditHardReturn()
{
  _TDispID _dispid(*this, OLETEXT("EditHardReturn"), DISPID(54));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::EditHardReturnConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_CustomShapeIndex(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CustomShapeIndex"), DISPID(118));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DAddFlowDispT<T>::get_CustomShapeIndex()
{
  _TDispID _dispid(*this, OLETEXT("CustomShapeIndex"), DISPID(118));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_JumpSize(Addflow5lib_tlb::JumpSizeConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("JumpSize"), DISPID(108));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::JumpSizeConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::JumpSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_JumpSize()
{
  _TDispID _dispid(*this, OLETEXT("JumpSize"), DISPID(108));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::JumpSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_License(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("License"), DISPID(110));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
_DAddFlowDispT<T>::get_License()
{
  _TDispID _dispid(*this, OLETEXT("License"), DISPID(110));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_RouteStartMethod(Addflow5lib_tlb::StartMethodConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("RouteStartMethod"), DISPID(51));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::StartMethodConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::StartMethodConstants /*[VT_USERDEFINED:0]*/ __fastcall
_DAddFlowDispT<T>::get_RouteStartMethod()
{
  _TDispID _dispid(*this, OLETEXT("RouteStartMethod"), DISPID(51));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::StartMethodConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_UndoSize(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("UndoSize"), DISPID(42));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DAddFlowDispT<T>::get_UndoSize()
{
  _TDispID _dispid(*this, OLETEXT("UndoSize"), DISPID(42));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_yZoom(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("yZoom"), DISPID(75));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DAddFlowDispT<T>::get_yZoom()
{
  _TDispID _dispid(*this, OLETEXT("yZoom"), DISPID(75));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_Autorouting(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Autorouting"), DISPID(50));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
_DAddFlowDispT<T>::get_Autorouting()
{
  _TDispID _dispid(*this, OLETEXT("Autorouting"), DISPID(50));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_RouteMinDistance(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("RouteMinDistance"), DISPID(53));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DAddFlowDispT<T>::get_RouteMinDistance()
{
  _TDispID _dispid(*this, OLETEXT("RouteMinDistance"), DISPID(53));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_UndoNode(Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("UndoNode"), DISPID(111));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afNode* /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ __fastcall
_DAddFlowDispT<T>::get_UndoNode()
{
  _TDispID _dispid(*this, OLETEXT("UndoNode"), DISPID(111));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::afNode* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
_DAddFlowDispT<T>::set_RouteGrain(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("RouteGrain"), DISPID(52));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
_DAddFlowDispT<T>::get_RouteGrain()
{
  _TDispID _dispid(*this, OLETEXT("RouteGrain"), DISPID(52));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  INodes
// Flags:     (4112) Hidden Dispatchable
// GUID:      {15078B02-F53D-4CEE-8932-4AA0BFA472B3}
// *********************************************************************//
template <class T> void __fastcall
INodesDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(2));
  OleProcedure(_dispid);
}

template <class T> Addflow5lib_tlb::afNode* __fastcall
INodesDispT<T>::Item(VARIANT Index)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return (Addflow5lib_tlb::afNode* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> LPUNKNOWN __fastcall
INodesDispT<T>::_NewEnum()
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Addflow5lib_tlb::afNode* __fastcall
INodesDispT<T>::Add(float Left, float Top, float Width, float Height)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(3));
  TAutoArgs<4> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  OleFunction(_dispid, _args);
  return (Addflow5lib_tlb::afNode* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> void __fastcall
INodesDispT<T>::Remove(VARIANT Index)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
INodesDispT<T>::set_Count(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
INodesDispT<T>::get_Count()
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  INode
// Flags:     (4112) Hidden Dispatchable
// GUID:      {62BDF910-DED7-42EA-B8CE-B1284A2F07D9}
// *********************************************************************//
template <class T> void __fastcall
INodeDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(60));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
INodeDispT<T>::PropertyPage(BSTR title, long page)
{
  _TDispID _dispid(*this, OLETEXT("PropertyPage"), DISPID(59));
  TAutoArgs<2> _args;
  _args[1] = title /*[VT_BSTR:0]*/;
  _args[2] = page /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afNode* __fastcall
INodeDispT<T>::Clone()
{
  _TDispID _dispid(*this, OLETEXT("Clone"), DISPID(58));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return (Addflow5lib_tlb::afNode* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> VARIANT_BOOL __fastcall
INodeDispT<T>::EnsureVisible()
{
  _TDispID _dispid(*this, OLETEXT("EnsureVisible"), DISPID(57));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Addflow5lib_tlb::afNode* __fastcall
INodeDispT<T>::GetLinkedNode(Addflow5lib_tlb::afLink* link)
{
  _TDispID _dispid(*this, OLETEXT("GetLinkedNode"), DISPID(56));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afLink*)link /*[VT_USERDEFINED:1]*/;
  OleFunction(_dispid, _args);
  return (Addflow5lib_tlb::afNode* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_DrawWidth(float /*[VT_R4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("DrawWidth"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> float /*[VT_R4:0]*/ __fastcall
INodeDispT<T>::get_DrawWidth()
{
  _TDispID _dispid(*this, OLETEXT("DrawWidth"), DISPID(14));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_Selectable(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Selectable"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
INodeDispT<T>::get_Selectable()
{
  _TDispID _dispid(*this, OLETEXT("Selectable"), DISPID(11));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_Text(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
INodeDispT<T>::get_Text()
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(8));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_ForeColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall
INodeDispT<T>::get_ForeColor()
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(5));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_ZOrder(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ZOrder"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
INodeDispT<T>::get_ZOrder()
{
  _TDispID _dispid(*this, OLETEXT("ZOrder"), DISPID(12));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_Font(IFontDisp** /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (IFontDisp** /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> IFontDisp** /*[VT_USERDEFINED:1]*/ __fastcall
INodeDispT<T>::get_Font()
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(13));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (IFontDisp** /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_Tag(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
INodeDispT<T>::get_Tag()
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(9));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_Top(float /*[VT_R4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> float /*[VT_R4:0]*/ __fastcall
INodeDispT<T>::get_Top()
{
  _TDispID _dispid(*this, OLETEXT("Top"), DISPID(21));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_Width(float /*[VT_R4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> float /*[VT_R4:0]*/ __fastcall
INodeDispT<T>::get_Width()
{
  _TDispID _dispid(*this, OLETEXT("Width"), DISPID(22));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_Shape(Addflow5lib_tlb::ShapeConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Shape"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ShapeConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::ShapeConstants /*[VT_USERDEFINED:0]*/ __fastcall
INodeDispT<T>::get_Shape()
{
  _TDispID _dispid(*this, OLETEXT("Shape"), DISPID(19));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::ShapeConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_Selected(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
INodeDispT<T>::get_Selected()
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(10));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_DrawStyle(Addflow5lib_tlb::DrawStyleConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("DrawStyle"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::DrawStyleConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::DrawStyleConstants /*[VT_USERDEFINED:0]*/ __fastcall
INodeDispT<T>::get_DrawStyle()
{
  _TDispID _dispid(*this, OLETEXT("DrawStyle"), DISPID(15));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::DrawStyleConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_Left(float /*[VT_R4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> float /*[VT_R4:0]*/ __fastcall
INodeDispT<T>::get_Left()
{
  _TDispID _dispid(*this, OLETEXT("Left"), DISPID(20));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_DrawColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("DrawColor"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall
INodeDispT<T>::get_DrawColor()
{
  _TDispID _dispid(*this, OLETEXT("DrawColor"), DISPID(4));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_OutLinks(Addflow5lib_tlb::afLinks* /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("OutLinks"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afLinks* /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afLinks* /*[VT_USERDEFINED:1]*/ __fastcall
INodeDispT<T>::get_OutLinks()
{
  _TDispID _dispid(*this, OLETEXT("OutLinks"), DISPID(26));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::afLinks* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_Height(float /*[VT_R4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> float /*[VT_R4:0]*/ __fastcall
INodeDispT<T>::get_Height()
{
  _TDispID _dispid(*this, OLETEXT("Height"), DISPID(23));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_Index(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
INodeDispT<T>::get_Index()
{
  _TDispID _dispid(*this, OLETEXT("Index"), DISPID(24));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_Key(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
INodeDispT<T>::get_Key()
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(27));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_Links(Addflow5lib_tlb::afLinks* /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Links"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afLinks* /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afLinks* /*[VT_USERDEFINED:1]*/ __fastcall
INodeDispT<T>::get_Links()
{
  _TDispID _dispid(*this, OLETEXT("Links"), DISPID(28));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::afLinks* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_Hidden(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Hidden"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
INodeDispT<T>::get_Hidden()
{
  _TDispID _dispid(*this, OLETEXT("Hidden"), DISPID(1));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_InLinks(Addflow5lib_tlb::afLinks* /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("InLinks"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afLinks* /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afLinks* /*[VT_USERDEFINED:1]*/ __fastcall
INodeDispT<T>::get_InLinks()
{
  _TDispID _dispid(*this, OLETEXT("InLinks"), DISPID(25));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::afLinks* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_ToolTip(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ToolTip"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
INodeDispT<T>::get_ToolTip()
{
  _TDispID _dispid(*this, OLETEXT("ToolTip"), DISPID(30));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_UserData(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
INodeDispT<T>::get_UserData()
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(6));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_FillColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("FillColor"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall
INodeDispT<T>::get_FillColor()
{
  _TDispID _dispid(*this, OLETEXT("FillColor"), DISPID(3));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_Transparent(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Transparent"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
INodeDispT<T>::get_Transparent()
{
  _TDispID _dispid(*this, OLETEXT("Transparent"), DISPID(2));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_Marked(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Marked"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
INodeDispT<T>::get_Marked()
{
  _TDispID _dispid(*this, OLETEXT("Marked"), DISPID(7));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_PicturePosition(Addflow5lib_tlb::PicturePositionConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PicturePosition"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::PicturePositionConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::PicturePositionConstants /*[VT_USERDEFINED:0]*/ __fastcall
INodeDispT<T>::get_PicturePosition()
{
  _TDispID _dispid(*this, OLETEXT("PicturePosition"), DISPID(29));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::PicturePositionConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_Picture(IPictureDisp** /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (IPictureDisp** /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> IPictureDisp** /*[VT_USERDEFINED:1]*/ __fastcall
INodeDispT<T>::get_Picture()
{
  _TDispID _dispid(*this, OLETEXT("Picture"), DISPID(16));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (IPictureDisp** /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_Shadow(Addflow5lib_tlb::ShadowConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ShadowConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::ShadowConstants /*[VT_USERDEFINED:0]*/ __fastcall
INodeDispT<T>::get_Shadow()
{
  _TDispID _dispid(*this, OLETEXT("Shadow"), DISPID(36));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::ShadowConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_Logical(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Logical"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
INodeDispT<T>::get_Logical()
{
  _TDispID _dispid(*this, OLETEXT("Logical"), DISPID(31));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_ShapeOrientation(short /*[VT_I2:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ShapeOrientation"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> short /*[VT_I2:0]*/ __fastcall
INodeDispT<T>::get_ShapeOrientation()
{
  _TDispID _dispid(*this, OLETEXT("ShapeOrientation"), DISPID(32));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_PictureIndex(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("PictureIndex"), DISPID(43));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
INodeDispT<T>::get_PictureIndex()
{
  _TDispID _dispid(*this, OLETEXT("PictureIndex"), DISPID(43));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_yScrollable(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("yScrollable"), DISPID(34));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
INodeDispT<T>::get_yScrollable()
{
  _TDispID _dispid(*this, OLETEXT("yScrollable"), DISPID(34));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_EditMode(Addflow5lib_tlb::EditModeConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("EditMode"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::EditModeConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::EditModeConstants /*[VT_USERDEFINED:0]*/ __fastcall
INodeDispT<T>::get_EditMode()
{
  _TDispID _dispid(*this, OLETEXT("EditMode"), DISPID(35));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::EditModeConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_xScrollable(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("xScrollable"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
INodeDispT<T>::get_xScrollable()
{
  _TDispID _dispid(*this, OLETEXT("xScrollable"), DISPID(33));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_ZOrderIndex(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ZOrderIndex"), DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
INodeDispT<T>::get_ZOrderIndex()
{
  _TDispID _dispid(*this, OLETEXT("ZOrderIndex"), DISPID(37));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_BackMode(Addflow5lib_tlb::BackModeConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("BackMode"), DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::BackModeConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::BackModeConstants /*[VT_USERDEFINED:0]*/ __fastcall
INodeDispT<T>::get_BackMode()
{
  _TDispID _dispid(*this, OLETEXT("BackMode"), DISPID(38));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::BackModeConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_XMoveable(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("XMoveable"), DISPID(39));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
INodeDispT<T>::get_XMoveable()
{
  _TDispID _dispid(*this, OLETEXT("XMoveable"), DISPID(39));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_YMoveable(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("YMoveable"), DISPID(40));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
INodeDispT<T>::get_YMoveable()
{
  _TDispID _dispid(*this, OLETEXT("YMoveable"), DISPID(40));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_XSizeable(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("XSizeable"), DISPID(41));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
INodeDispT<T>::get_XSizeable()
{
  _TDispID _dispid(*this, OLETEXT("XSizeable"), DISPID(41));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_YSizeable(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("YSizeable"), DISPID(42));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
INodeDispT<T>::get_YSizeable()
{
  _TDispID _dispid(*this, OLETEXT("YSizeable"), DISPID(42));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_CustomShapeIndex(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("CustomShapeIndex"), DISPID(52));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
INodeDispT<T>::get_CustomShapeIndex()
{
  _TDispID _dispid(*this, OLETEXT("CustomShapeIndex"), DISPID(52));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_Moveable(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Moveable"), DISPID(48));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
INodeDispT<T>::get_Moveable()
{
  _TDispID _dispid(*this, OLETEXT("Moveable"), DISPID(48));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_Sizeable(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Sizeable"), DISPID(49));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
INodeDispT<T>::get_Sizeable()
{
  _TDispID _dispid(*this, OLETEXT("Sizeable"), DISPID(49));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_TagVariant(VARIANT /*[VT_VARIANT:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("TagVariant"), DISPID(44));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT /*[VT_VARIANT:0]*/ __fastcall
INodeDispT<T>::get_TagVariant()
{
  _TDispID _dispid(*this, OLETEXT("TagVariant"), DISPID(44));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_Alignment(Addflow5lib_tlb::AlignmentConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::AlignmentConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::AlignmentConstants /*[VT_USERDEFINED:0]*/ __fastcall
INodeDispT<T>::get_Alignment()
{
  _TDispID _dispid(*this, OLETEXT("Alignment"), DISPID(17));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::AlignmentConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_AutoSize(Addflow5lib_tlb::AutoSizeConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::AutoSizeConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::AutoSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall
INodeDispT<T>::get_AutoSize()
{
  _TDispID _dispid(*this, OLETEXT("AutoSize"), DISPID(18));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::AutoSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_MaxDegree(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("MaxDegree"), DISPID(47));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
INodeDispT<T>::get_MaxDegree()
{
  _TDispID _dispid(*this, OLETEXT("MaxDegree"), DISPID(47));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_MaxInDegree(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("MaxInDegree"), DISPID(45));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
INodeDispT<T>::get_MaxInDegree()
{
  _TDispID _dispid(*this, OLETEXT("MaxInDegree"), DISPID(45));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_Gradient(Addflow5lib_tlb::GradientConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Gradient"), DISPID(55));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::GradientConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::GradientConstants /*[VT_USERDEFINED:0]*/ __fastcall
INodeDispT<T>::get_Gradient()
{
  _TDispID _dispid(*this, OLETEXT("Gradient"), DISPID(55));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::GradientConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_xTextMargin(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("xTextMargin"), DISPID(50));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
INodeDispT<T>::get_xTextMargin()
{
  _TDispID _dispid(*this, OLETEXT("xTextMargin"), DISPID(50));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_yTextMargin(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("yTextMargin"), DISPID(51));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
INodeDispT<T>::get_yTextMargin()
{
  _TDispID _dispid(*this, OLETEXT("yTextMargin"), DISPID(51));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_MaxOutDegree(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("MaxOutDegree"), DISPID(46));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
INodeDispT<T>::get_MaxOutDegree()
{
  _TDispID _dispid(*this, OLETEXT("MaxOutDegree"), DISPID(46));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_OwnerDraw(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("OwnerDraw"), DISPID(53));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
INodeDispT<T>::get_OwnerDraw()
{
  _TDispID _dispid(*this, OLETEXT("OwnerDraw"), DISPID(53));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
INodeDispT<T>::set_GradientColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("GradientColor"), DISPID(54));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall
INodeDispT<T>::get_GradientColor()
{
  _TDispID _dispid(*this, OLETEXT("GradientColor"), DISPID(54));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  ILinks
// Flags:     (4112) Hidden Dispatchable
// GUID:      {AA91F32C-DC66-4628-AFC7-05EB72B637D7}
// *********************************************************************//
template <class T> void __fastcall
ILinksDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(2));
  OleProcedure(_dispid);
}

template <class T> Addflow5lib_tlb::afLink* __fastcall
ILinksDispT<T>::Item(VARIANT Index)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleFunction(_dispid, _args);
  return (Addflow5lib_tlb::afLink* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> LPUNKNOWN __fastcall
ILinksDispT<T>::_NewEnum()
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Addflow5lib_tlb::afLink* __fastcall
ILinksDispT<T>::Add(Addflow5lib_tlb::afNode* nodx)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)nodx /*[VT_USERDEFINED:1]*/;
  OleFunction(_dispid, _args);
  return (Addflow5lib_tlb::afLink* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> void __fastcall
ILinksDispT<T>::Remove(VARIANT Index)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_VARIANT:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ILinksDispT<T>::set_Count(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ILinksDispT<T>::get_Count()
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  ILink
// Flags:     (4112) Hidden Dispatchable
// GUID:      {1937F811-DFDA-4223-8F31-BDC1D0D16767}
// *********************************************************************//
template <class T> void __fastcall
ILinkDispT<T>::Refresh()
{
  _TDispID _dispid(*this, OLETEXT("Refresh"), DISPID(46));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
ILinkDispT<T>::PropertyPage(BSTR title, long page)
{
  _TDispID _dispid(*this, OLETEXT("PropertyPage"), DISPID(45));
  TAutoArgs<2> _args;
  _args[1] = title /*[VT_BSTR:0]*/;
  _args[2] = page /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afLink* __fastcall
ILinkDispT<T>::Clone(Addflow5lib_tlb::afNode* Org, Addflow5lib_tlb::afNode* Dst)
{
  _TDispID _dispid(*this, OLETEXT("Clone"), DISPID(44));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)Org /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)Dst /*[VT_USERDEFINED:1]*/;
  OleFunction(_dispid, _args);
  return (Addflow5lib_tlb::afLink* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> VARIANT_BOOL __fastcall
ILinkDispT<T>::EnsureVisible()
{
  _TDispID _dispid(*this, OLETEXT("EnsureVisible"), DISPID(43));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::Reverse()
{
  _TDispID _dispid(*this, OLETEXT("Reverse"), DISPID(42));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
ILinkDispT<T>::set_ZOrder(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ZOrder"), DISPID(14));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ILinkDispT<T>::get_ZOrder()
{
  _TDispID _dispid(*this, OLETEXT("ZOrder"), DISPID(14));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_Selected(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(12));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
ILinkDispT<T>::get_Selected()
{
  _TDispID _dispid(*this, OLETEXT("Selected"), DISPID(12));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_Selectable(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Selectable"), DISPID(13));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
ILinkDispT<T>::get_Selectable()
{
  _TDispID _dispid(*this, OLETEXT("Selectable"), DISPID(13));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_ForeColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall
ILinkDispT<T>::get_ForeColor()
{
  _TDispID _dispid(*this, OLETEXT("ForeColor"), DISPID(3));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_Dst(Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Dst"), DISPID(21));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afNode* /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ __fastcall
ILinkDispT<T>::get_Dst()
{
  _TDispID _dispid(*this, OLETEXT("Dst"), DISPID(21));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::afNode* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_ArrowDst(Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ArrowDst"), DISPID(19));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ __fastcall
ILinkDispT<T>::get_ArrowDst()
{
  _TDispID _dispid(*this, OLETEXT("ArrowDst"), DISPID(19));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::ArrowConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_Org(Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Org"), DISPID(20));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afNode* /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afNode* /*[VT_USERDEFINED:1]*/ __fastcall
ILinkDispT<T>::get_Org()
{
  _TDispID _dispid(*this, OLETEXT("Org"), DISPID(20));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::afNode* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_Font(IFontDisp** /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(15));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (IFontDisp** /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> IFontDisp** /*[VT_USERDEFINED:1]*/ __fastcall
ILinkDispT<T>::get_Font()
{
  _TDispID _dispid(*this, OLETEXT("Font"), DISPID(15));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (IFontDisp** /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_Text(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(10));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
ILinkDispT<T>::get_Text()
{
  _TDispID _dispid(*this, OLETEXT("Text"), DISPID(10));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_Tag(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(11));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
ILinkDispT<T>::get_Tag()
{
  _TDispID _dispid(*this, OLETEXT("Tag"), DISPID(11));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_ExtraPoints(Addflow5lib_tlb::afLinkPoints* /*[VT_USERDEFINED:1]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ExtraPoints"), DISPID(22));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH) /*[VT_DISPATCH:1]*/ (Addflow5lib_tlb::afLinkPoints* /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afLinkPoints* /*[VT_USERDEFINED:1]*/ __fastcall
ILinkDispT<T>::get_ExtraPoints()
{
  _TDispID _dispid(*this, OLETEXT("ExtraPoints"), DISPID(22));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::afLinkPoints* /*[C3]*/)(LPDISPATCH)_args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_LinkStyle(Addflow5lib_tlb::LinkStyleConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("LinkStyle"), DISPID(23));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::LinkStyleConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::LinkStyleConstants /*[VT_USERDEFINED:0]*/ __fastcall
ILinkDispT<T>::get_LinkStyle()
{
  _TDispID _dispid(*this, OLETEXT("LinkStyle"), DISPID(23));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::LinkStyleConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_Key(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(24));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
ILinkDispT<T>::get_Key()
{
  _TDispID _dispid(*this, OLETEXT("Key"), DISPID(24));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_InIndex(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("InIndex"), DISPID(25));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ILinkDispT<T>::get_InIndex()
{
  _TDispID _dispid(*this, OLETEXT("InIndex"), DISPID(25));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_OutIndex(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("OutIndex"), DISPID(26));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ILinkDispT<T>::get_OutIndex()
{
  _TDispID _dispid(*this, OLETEXT("OutIndex"), DISPID(26));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_UserData(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ILinkDispT<T>::get_UserData()
{
  _TDispID _dispid(*this, OLETEXT("UserData"), DISPID(4));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_DrawColor(::OLE_COLOR /*[VT_UI4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("DrawColor"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> ::OLE_COLOR /*[VT_UI4:0]*/ __fastcall
ILinkDispT<T>::get_DrawColor()
{
  _TDispID _dispid(*this, OLETEXT("DrawColor"), DISPID(2));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_Marked(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Marked"), DISPID(6));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
ILinkDispT<T>::get_Marked()
{
  _TDispID _dispid(*this, OLETEXT("Marked"), DISPID(6));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_Hidden(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Hidden"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
ILinkDispT<T>::get_Hidden()
{
  _TDispID _dispid(*this, OLETEXT("Hidden"), DISPID(1));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_Rigid(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Rigid"), DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
ILinkDispT<T>::get_Rigid()
{
  _TDispID _dispid(*this, OLETEXT("Rigid"), DISPID(5));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_ArrowOrg(Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ArrowOrg"), DISPID(18));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ __fastcall
ILinkDispT<T>::get_ArrowOrg()
{
  _TDispID _dispid(*this, OLETEXT("ArrowOrg"), DISPID(18));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::ArrowConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_AdjustOrg(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("AdjustOrg"), DISPID(7));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
ILinkDispT<T>::get_AdjustOrg()
{
  _TDispID _dispid(*this, OLETEXT("AdjustOrg"), DISPID(7));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_AdjustDst(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("AdjustDst"), DISPID(8));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
ILinkDispT<T>::get_AdjustDst()
{
  _TDispID _dispid(*this, OLETEXT("AdjustDst"), DISPID(8));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_ToolTip(BSTR /*[VT_BSTR:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ToolTip"), DISPID(28));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> BSTR /*[VT_BSTR:0]*/ __fastcall
ILinkDispT<T>::get_ToolTip()
{
  _TDispID _dispid(*this, OLETEXT("ToolTip"), DISPID(28));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_SizeArrowMid(Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SizeArrowMid"), DISPID(39));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowSizeConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall
ILinkDispT<T>::get_SizeArrowMid()
{
  _TDispID _dispid(*this, OLETEXT("SizeArrowMid"), DISPID(39));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::ArrowSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_Logical(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Logical"), DISPID(27));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
ILinkDispT<T>::get_Logical()
{
  _TDispID _dispid(*this, OLETEXT("Logical"), DISPID(27));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_OrthogonalDynamic(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("OrthogonalDynamic"), DISPID(9));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
ILinkDispT<T>::get_OrthogonalDynamic()
{
  _TDispID _dispid(*this, OLETEXT("OrthogonalDynamic"), DISPID(9));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_Stretchable(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Stretchable"), DISPID(30));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
ILinkDispT<T>::get_Stretchable()
{
  _TDispID _dispid(*this, OLETEXT("Stretchable"), DISPID(30));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_BackMode(Addflow5lib_tlb::BackModeConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("BackMode"), DISPID(32));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::BackModeConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::BackModeConstants /*[VT_USERDEFINED:0]*/ __fastcall
ILinkDispT<T>::get_BackMode()
{
  _TDispID _dispid(*this, OLETEXT("BackMode"), DISPID(32));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::BackModeConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_ArrowMid(Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ArrowMid"), DISPID(29));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::ArrowConstants /*[VT_USERDEFINED:0]*/ __fastcall
ILinkDispT<T>::get_ArrowMid()
{
  _TDispID _dispid(*this, OLETEXT("ArrowMid"), DISPID(29));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::ArrowConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_ZOrderIndex(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ZOrderIndex"), DISPID(31));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ILinkDispT<T>::get_ZOrderIndex()
{
  _TDispID _dispid(*this, OLETEXT("ZOrderIndex"), DISPID(31));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_TextSegment(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("TextSegment"), DISPID(36));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ILinkDispT<T>::get_TextSegment()
{
  _TDispID _dispid(*this, OLETEXT("TextSegment"), DISPID(36));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_OrientedText(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("OrientedText"), DISPID(33));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
ILinkDispT<T>::get_OrientedText()
{
  _TDispID _dispid(*this, OLETEXT("OrientedText"), DISPID(33));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_ShowJump(Addflow5lib_tlb::ShowJumpConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("ShowJump"), DISPID(35));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ShowJumpConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::ShowJumpConstants /*[VT_USERDEFINED:0]*/ __fastcall
ILinkDispT<T>::get_ShowJump()
{
  _TDispID _dispid(*this, OLETEXT("ShowJump"), DISPID(35));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::ShowJumpConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_DrawWidth(float /*[VT_R4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("DrawWidth"), DISPID(16));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> float /*[VT_R4:0]*/ __fastcall
ILinkDispT<T>::get_DrawWidth()
{
  _TDispID _dispid(*this, OLETEXT("DrawWidth"), DISPID(16));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_DrawStyle(Addflow5lib_tlb::DrawStyleConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("DrawStyle"), DISPID(17));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::DrawStyleConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::DrawStyleConstants /*[VT_USERDEFINED:0]*/ __fastcall
ILinkDispT<T>::get_DrawStyle()
{
  _TDispID _dispid(*this, OLETEXT("DrawStyle"), DISPID(17));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::DrawStyleConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_OwnerDraw(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("OwnerDraw"), DISPID(41));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
ILinkDispT<T>::get_OwnerDraw()
{
  _TDispID _dispid(*this, OLETEXT("OwnerDraw"), DISPID(41));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_SizeArrowOrg(Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SizeArrowOrg"), DISPID(38));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowSizeConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall
ILinkDispT<T>::get_SizeArrowOrg()
{
  _TDispID _dispid(*this, OLETEXT("SizeArrowOrg"), DISPID(38));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::ArrowSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_RoundedCorner(VARIANT_BOOL /*[VT_BOOL:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("RoundedCorner"), DISPID(40));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT_BOOL /*[VT_BOOL:0]*/ __fastcall
ILinkDispT<T>::get_RoundedCorner()
{
  _TDispID _dispid(*this, OLETEXT("RoundedCorner"), DISPID(40));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_TagVariant(VARIANT /*[VT_VARIANT:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("TagVariant"), DISPID(34));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> VARIANT /*[VT_VARIANT:0]*/ __fastcall
ILinkDispT<T>::get_TagVariant()
{
  _TDispID _dispid(*this, OLETEXT("TagVariant"), DISPID(34));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkDispT<T>::set_SizeArrowDst(Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("SizeArrowDst"), DISPID(37));
  TAutoArgs<1> _args;
  _args[1] = (int) /*[VT_I4:0]*/ (Addflow5lib_tlb::ArrowSizeConstants /*[C2]*/)Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::ArrowSizeConstants /*[VT_USERDEFINED:0]*/ __fastcall
ILinkDispT<T>::get_SizeArrowDst()
{
  _TDispID _dispid(*this, OLETEXT("SizeArrowDst"), DISPID(37));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::ArrowSizeConstants /*[C3]*/)(int)_args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  ILinkPoints
// Flags:     (4112) Hidden Dispatchable
// GUID:      {E625F3B1-CB36-4ABA-8FAF-E5E6B1A7A72B}
// *********************************************************************//
template <class T> Addflow5lib_tlb::afLinkPoint* __fastcall
ILinkPointsDispT<T>::get_Item(long Index)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::afLinkPoint* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> void __fastcall
ILinkPointsDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(2));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
ILinkPointsDispT<T>::Remove(long Index)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(3));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ILinkPointsDispT<T>::_set_Item(long Index, Addflow5lib_tlb::afLinkPoint* Param2)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<2> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Addflow5lib_tlb::afLinkPoint*)Param2 /*[VT_USERDEFINED:1]*/;
  OlePropertyPut(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afLinkPoint* __fastcall
ILinkPointsDispT<T>::Add(float x, float y)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(4));
  TAutoArgs<2> _args;
  _args[1] = x /*[VT_R4:0]*/;
  _args[2] = y /*[VT_R4:0]*/;
  OleFunction(_dispid, _args);
  return (Addflow5lib_tlb::afLinkPoint* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> LPUNKNOWN __fastcall
ILinkPointsDispT<T>::_NewEnum()
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkPointsDispT<T>::set_Count(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ILinkPointsDispT<T>::get_Count()
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  ILinkPoint
// Flags:     (4112) Hidden Dispatchable
// GUID:      {3C98496E-F2CA-43BE-A0C3-8EB1C2FA9259}
// *********************************************************************//
template <class T> void __fastcall
ILinkPointDispT<T>::set_x(float /*[VT_R4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("x"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> float /*[VT_R4:0]*/ __fastcall
ILinkPointDispT<T>::get_x()
{
  _TDispID _dispid(*this, OLETEXT("x"), DISPID(1));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ILinkPointDispT<T>::set_y(float /*[VT_R4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("y"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> float /*[VT_R4:0]*/ __fastcall
ILinkPointDispT<T>::get_y()
{
  _TDispID _dispid(*this, OLETEXT("y"), DISPID(2));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  ISelNodes
// Flags:     (4096) Dispatchable
// GUID:      {54BBB3DA-D31C-4471-8C2F-C68A074B3D1C}
// *********************************************************************//
template <class T> void __fastcall
ISelNodesDispT<T>::Add(Addflow5lib_tlb::afNode* node)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)node /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ISelNodesDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(3));
  OleProcedure(_dispid);
}

template <class T> LPUNKNOWN __fastcall
ISelNodesDispT<T>::_NewEnum()
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ISelNodesDispT<T>::Remove(Addflow5lib_tlb::afNode* node)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)node /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afNode* __fastcall
ISelNodesDispT<T>::Item(long Index)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return (Addflow5lib_tlb::afNode* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> void __fastcall
ISelNodesDispT<T>::set_Count(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ISelNodesDispT<T>::get_Count()
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  ISelLinks
// Flags:     (4096) Dispatchable
// GUID:      {75795457-BA5C-4322-A818-D62B7FF7C0D3}
// *********************************************************************//
template <class T> void __fastcall
ISelLinksDispT<T>::Add(Addflow5lib_tlb::afLink* link)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afLink*)link /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ISelLinksDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(3));
  OleProcedure(_dispid);
}

template <class T> LPUNKNOWN __fastcall
ISelLinksDispT<T>::_NewEnum()
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> void __fastcall
ISelLinksDispT<T>::Remove(Addflow5lib_tlb::afLink* link)
{
  _TDispID _dispid(*this, OLETEXT("Remove"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afLink*)link /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> Addflow5lib_tlb::afLink* __fastcall
ISelLinksDispT<T>::Item(long Index)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = Index /*[VT_I4:0]*/;
  OleFunction(_dispid, _args);
  return (Addflow5lib_tlb::afLink* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> void __fastcall
ISelLinksDispT<T>::set_Count(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ISelLinksDispT<T>::get_Count()
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  IPictures
// Flags:     (4096) Dispatchable
// GUID:      {9BDEDFA3-5C40-4BCE-B1C5-4D3E40E0F8A2}
// *********************************************************************//
template <class T> void __fastcall
IPicturesDispT<T>::Add(IPictureDisp** Picture)
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(2));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(IPictureDisp**)Picture /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
IPicturesDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(3));
  OleProcedure(_dispid);
}

template <class T> LPUNKNOWN __fastcall
IPicturesDispT<T>::_NewEnum()
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> IPictureDisp** __fastcall
IPicturesDispT<T>::get_Item(long idx)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = idx /*[VT_I4:0]*/;
  OlePropertyGet(_dispid, _args);
  return (IPictureDisp** /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> IPictureDisp** __fastcall
IPicturesDispT<T>::get__Item(long idx)
{
  _TDispID _dispid(*this, OLETEXT("_Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = idx /*[VT_I4:0]*/;
  OlePropertyGet(_dispid, _args);
  return (IPictureDisp** /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> void __fastcall
IPicturesDispT<T>::set_Count(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
IPicturesDispT<T>::get_Count()
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  ICustomShapes
// Flags:     (4096) Dispatchable
// GUID:      {77BF7BAC-C68A-40F7-8B1A-F62DE2980D59}
// *********************************************************************//
template <class T> void __fastcall
ICustomShapesDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(2));
  OleProcedure(_dispid);
}

template <class T> Addflow5lib_tlb::afCustomShape* __fastcall
ICustomShapesDispT<T>::get_Item(long idx)
{
  _TDispID _dispid(*this, OLETEXT("Item"), DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = idx /*[VT_I4:0]*/;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::afCustomShape* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> LPUNKNOWN __fastcall
ICustomShapesDispT<T>::_NewEnum()
{
  _TDispID _dispid(*this, OLETEXT("_NewEnum"), DISPID(-4));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return _args.GetRetVariant();
}

template <class T> Addflow5lib_tlb::afCustomShape* __fastcall
ICustomShapesDispT<T>::get__Item(long idx)
{
  _TDispID _dispid(*this, OLETEXT("_Item"), DISPID(0));
  TAutoArgs<1> _args;
  _args[1] = idx /*[VT_I4:0]*/;
  OlePropertyGet(_dispid, _args);
  return (Addflow5lib_tlb::afCustomShape* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> Addflow5lib_tlb::afCustomShape* __fastcall
ICustomShapesDispT<T>::Add()
{
  _TDispID _dispid(*this, OLETEXT("Add"), DISPID(3));
  TAutoArgs<0> _args;
  OleFunction(_dispid, _args);
  return (Addflow5lib_tlb::afCustomShape* /*[C1]*/)(LPDISPATCH) /*[VT_DISPATCH:1]*/_args.GetRetVariant();
}

template <class T> void __fastcall
ICustomShapesDispT<T>::set_Count(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ICustomShapesDispT<T>::get_Count()
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  ICustomShape
// Flags:     (4096) Dispatchable
// GUID:      {1B61DB7B-D136-4EB6-A462-DF9AEF115812}
// *********************************************************************//
template <class T> void __fastcall
ICustomShapeDispT<T>::AddPoint(short x, short y)
{
  _TDispID _dispid(*this, OLETEXT("AddPoint"), DISPID(2));
  TAutoArgs<2> _args;
  _args[1] = x /*[VT_I2:0]*/;
  _args[2] = y /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
ICustomShapeDispT<T>::Clear()
{
  _TDispID _dispid(*this, OLETEXT("Clear"), DISPID(3));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
ICustomShapeDispT<T>::set_Count(long /*[VT_I4:0]*/ Value)
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<1> _args;
  _args[1] = Value;
  OlePropertyPut(_dispid, _args);
}

template <class T> long /*[VT_I4:0]*/ __fastcall
ICustomShapeDispT<T>::get_Count()
{
  _TDispID _dispid(*this, OLETEXT("Count"), DISPID(1));
  TAutoArgs<0> _args;
  OlePropertyGet(_dispid, _args);
  return _args.GetRetVariant();
}

// *********************************************************************//
// DispIntf:  _DAddFlowEvents
// Flags:     (4096) Dispatchable
// GUID:      {9431AEF2-26DB-42B6-869F-48D0C9763F08}
// *********************************************************************//
template <class T> void __fastcall
_DAddFlowEventsDispT<T>::_Click()
{
  _TDispID _dispid(/* Click */ DISPID(-600));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::DblClick()
{
  _TDispID _dispid(/* DblClick */ DISPID(-601));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseDown */ DISPID(-605));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseMove */ DISPID(-606));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  _TDispID _dispid(/* MouseUp */ DISPID(-607));
  TAutoArgs<4> _args;
  _args[1] = Button /*[VT_I2:0]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  _args[3] = x /*[VT_I4:0]*/;
  _args[4] = y /*[VT_I4:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::KeyDown(short* KeyCode, short Shift)
{
  _TDispID _dispid(/* KeyDown */ DISPID(-602));
  TAutoArgs<2> _args;
  _args[1] = KeyCode /*[VT_I2:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::KeyPress(short* KeyAscii)
{
  _TDispID _dispid(/* KeyPress */ DISPID(-603));
  TAutoArgs<1> _args;
  _args[1] = KeyAscii /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::KeyUp(short* KeyCode, short Shift)
{
  _TDispID _dispid(/* KeyUp */ DISPID(-604));
  TAutoArgs<2> _args;
  _args[1] = KeyCode /*[VT_I2:1]*/;
  _args[2] = Shift /*[VT_I2:0]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::Error(short Number, BSTR* Description, long Scode, BSTR Source, 
                               BSTR HelpFile, long HelpContext, VARIANT_BOOL* CancelDisplay)
{
  _TDispID _dispid(/* Error */ DISPID(-608));
  TAutoArgs<7> _args;
  _args[1] = Number /*[VT_I2:0]*/;
  _args[2] = Description /*[VT_BSTR:1]*/;
  _args[3] = Scode /*[VT_I4:0]*/;
  _args[4] = Source /*[VT_BSTR:0]*/;
  _args[5] = HelpFile /*[VT_BSTR:0]*/;
  _args[6] = HelpContext /*[VT_I4:0]*/;
  _args[7] = CancelDisplay /*[VT_BOOL:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::Scroll()
{
  _TDispID _dispid(/* Scroll */ DISPID(1));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::afLostFocus()
{
  _TDispID _dispid(/* afLostFocus */ DISPID(2));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::afGotFocus()
{
  _TDispID _dispid(/* afGotFocus */ DISPID(3));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::AfterAddNode(Addflow5lib_tlb::afNode* NewNode)
{
  _TDispID _dispid(/* AfterAddNode */ DISPID(4));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)NewNode /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::AfterAddLink(Addflow5lib_tlb::afLink* NewLink)
{
  _TDispID _dispid(/* AfterAddLink */ DISPID(5));
  TAutoArgs<1> _args;
  _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afLink*)NewLink /*[VT_USERDEFINED:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::BeforeAddNode(float Left, float Top, float Width, float Height, 
                                       short* Cancel)
{
  _TDispID _dispid(/* BeforeAddNode */ DISPID(6));
  TAutoArgs<5> _args;
  _args[1] = Left /*[VT_R4:0]*/;
  _args[2] = Top /*[VT_R4:0]*/;
  _args[3] = Width /*[VT_R4:0]*/;
  _args[4] = Height /*[VT_R4:0]*/;
  _args[5] = Cancel /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::BeforeAddLink(Addflow5lib_tlb::afNode* Org, Addflow5lib_tlb::afNode* Dst, 
                                       short* Cancel)
{
  _TDispID _dispid(/* BeforeAddLink */ DISPID(7));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)Org /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)Dst /*[VT_USERDEFINED:1]*/;
  _args[3] = Cancel /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::AfterResize()
{
  _TDispID _dispid(/* AfterResize */ DISPID(8));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::AfterMove()
{
  _TDispID _dispid(/* AfterMove */ DISPID(9));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::AfterStretch()
{
  _TDispID _dispid(/* AfterStretch */ DISPID(10));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::AfterSelect()
{
  _TDispID _dispid(/* AfterSelect */ DISPID(11));
  OleProcedure(_dispid);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::BeforeEdit(Addflow5lib_tlb::afNode* node, short* Cancel)
{
  _TDispID _dispid(/* BeforeEdit */ DISPID(12));
  TAutoArgs<2> _args;
  _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)node /*[VT_USERDEFINED:1]*/;
  _args[2] = Cancel /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::AfterEdit(Addflow5lib_tlb::afNode* node, short* Cancel, BSTR* NewString)
{
  _TDispID _dispid(/* AfterEdit */ DISPID(13));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)node /*[VT_USERDEFINED:1]*/;
  _args[2] = Cancel /*[VT_I2:1]*/;
  _args[3] = NewString /*[VT_BSTR:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::BeforeChangeDst(Addflow5lib_tlb::afLink* link, Addflow5lib_tlb::afNode* Dst
                                         , short* Cancel)
{
  _TDispID _dispid(/* BeforeChangeDst */ DISPID(14));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afLink*)link /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)Dst /*[VT_USERDEFINED:1]*/;
  _args[3] = Cancel /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::BeforeChangeOrg(Addflow5lib_tlb::afLink* link, Addflow5lib_tlb::afNode* Org
                                         , short* Cancel)
{
  _TDispID _dispid(/* BeforeChangeOrg */ DISPID(15));
  TAutoArgs<3> _args;
  _args[1] = (LPDISPATCH)(Addflow5lib_tlb::afLink*)link /*[VT_USERDEFINED:1]*/;
  _args[2] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)Org /*[VT_USERDEFINED:1]*/;
  _args[3] = Cancel /*[VT_I2:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::NodeOwnerDraw(long Hdc, Addflow5lib_tlb::afNode* node, long* Flags)
{
  _TDispID _dispid(/* NodeOwnerDraw */ DISPID(16));
  TAutoArgs<3> _args;
  _args[1] = Hdc /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Addflow5lib_tlb::afNode*)node /*[VT_USERDEFINED:1]*/;
  _args[3] = Flags /*[VT_I4:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::LinkOwnerDraw(long Hdc, Addflow5lib_tlb::afLink* link, long* Flags)
{
  _TDispID _dispid(/* LinkOwnerDraw */ DISPID(17));
  TAutoArgs<3> _args;
  _args[1] = Hdc /*[VT_I4:0]*/;
  _args[2] = (LPDISPATCH)(Addflow5lib_tlb::afLink*)link /*[VT_USERDEFINED:1]*/;
  _args[3] = Flags /*[VT_I4:1]*/;
  OleProcedure(_dispid, _args);
}

template <class T> void __fastcall
_DAddFlowEventsDispT<T>::DiagramOwnerDraw(long Hdc, long* Flags)
{
  _TDispID _dispid(/* DiagramOwnerDraw */ DISPID(18));
  TAutoArgs<2> _args;
  _args[1] = Hdc /*[VT_I4:0]*/;
  _args[2] = Flags /*[VT_I4:1]*/;
  OleProcedure(_dispid, _args);
}

// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that       
// provide static Create() and CreateRemote(LPWSTR machineName) methods   
// for creating an instance of an exposed object. These functions can     
// be used by client wishing to automate CoClasses exposed by this        
// typelibrary.                                                           
// *********************************************************************//
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


#if !defined(__TLB_NO_EVENT_WRAPPERS) && defined(USING_ATLVCL)
// *********************************************************************//
// CONNECTIONPOINT/EVENT PROXY
// CoClass         : AddFlow
// Event Interface : _DAddFlowEvents
// *********************************************************************//
template <class T>
class TEvents_AddFlow : public IConnectionPointImpl<T,
                                                 &DIID__DAddFlowEvents,
                                                 CComUnkArray<CONNECTIONPOINT_ARRAY_SIZE> >
 /* Note: if encountering problems with events, please change CComUnkArray to CComDynamicUnkArray in the line above. */
{
public:
  void            Fire__Click(void);
  void            Fire_DblClick(void);
  void            Fire_MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y);
  void            Fire_KeyDown(short* KeyCode, short Shift);
  void            Fire_KeyPress(short* KeyAscii);
  void            Fire_KeyUp(short* KeyCode, short Shift);
  void            Fire_Error(short Number, BSTR* Description, long Scode, BSTR Source, BSTR HelpFile, 
                             long HelpContext, VARIANT_BOOL* CancelDisplay);
  void            Fire_Scroll(void);
  void            Fire_afLostFocus(void);
  void            Fire_afGotFocus(void);
  void            Fire_AfterAddNode(Addflow5lib_tlb::afNode* NewNode);
  void            Fire_AfterAddLink(Addflow5lib_tlb::afLink* NewLink);
  void            Fire_BeforeAddNode(float Left, float Top, float Width, float Height, short* Cancel);
  void            Fire_BeforeAddLink(Addflow5lib_tlb::afNode* Org, Addflow5lib_tlb::afNode* Dst, 
                                     short* Cancel);
  void            Fire_AfterResize(void);
  void            Fire_AfterMove(void);
  void            Fire_AfterStretch(void);
  void            Fire_AfterSelect(void);
  void            Fire_BeforeEdit(Addflow5lib_tlb::afNode* node, short* Cancel);
  void            Fire_AfterEdit(Addflow5lib_tlb::afNode* node, short* Cancel, BSTR* NewString);
  void            Fire_BeforeChangeDst(Addflow5lib_tlb::afLink* link, Addflow5lib_tlb::afNode* Dst, 
                                       short* Cancel);
  void            Fire_BeforeChangeOrg(Addflow5lib_tlb::afLink* link, Addflow5lib_tlb::afNode* Org, 
                                       short* Cancel);
  void            Fire_NodeOwnerDraw(long Hdc, Addflow5lib_tlb::afNode* node, long* Flags);
  void            Fire_LinkOwnerDraw(long Hdc, Addflow5lib_tlb::afLink* link, long* Flags);
  void            Fire_DiagramOwnerDraw(long Hdc, long* Flags);
protected:
  _DAddFlowEventsDisp m_EventIntfObj;
};

template <class T> void
TEvents_AddFlow<T>::Fire__Click(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj._Click();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_DblClick(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DblClick();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_MouseDown(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseDown(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_MouseMove(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseMove(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_MouseUp(short Button, short Shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.MouseUp(Button, Shift, x, y);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_KeyDown(short* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyDown(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_KeyPress(short* KeyAscii)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyPress(KeyAscii);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_KeyUp(short* KeyCode, short Shift)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.KeyUp(KeyCode, Shift);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_Error(short Number, BSTR* Description, long Scode, BSTR Source, 
                               BSTR HelpFile, long HelpContext, VARIANT_BOOL* CancelDisplay)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Error(Number, Description, Scode, Source, HelpFile, HelpContext, CancelDisplay);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_Scroll(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.Scroll();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_afLostFocus(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.afLostFocus();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_afGotFocus(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.afGotFocus();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_AfterAddNode(Addflow5lib_tlb::afNode* NewNode)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AfterAddNode(NewNode);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_AfterAddLink(Addflow5lib_tlb::afLink* NewLink)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AfterAddLink(NewLink);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_BeforeAddNode(float Left, float Top, float Width, float Height, 
                                       short* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeAddNode(Left, Top, Width, Height, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_BeforeAddLink(Addflow5lib_tlb::afNode* Org, Addflow5lib_tlb::afNode* Dst, 
                                       short* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeAddLink(Org, Dst, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_AfterResize(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AfterResize();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_AfterMove(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AfterMove();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_AfterStretch(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AfterStretch();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_AfterSelect(void)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AfterSelect();
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_BeforeEdit(Addflow5lib_tlb::afNode* node, short* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeEdit(node, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_AfterEdit(Addflow5lib_tlb::afNode* node, short* Cancel, BSTR* NewString)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.AfterEdit(node, Cancel, NewString);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_BeforeChangeDst(Addflow5lib_tlb::afLink* link, Addflow5lib_tlb::afNode* Dst, 
                                         short* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeChangeDst(link, Dst, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_BeforeChangeOrg(Addflow5lib_tlb::afLink* link, Addflow5lib_tlb::afNode* Org, 
                                         short* Cancel)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.BeforeChangeOrg(link, Org, Cancel);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_NodeOwnerDraw(long Hdc, Addflow5lib_tlb::afNode* node, long* Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.NodeOwnerDraw(Hdc, node, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_LinkOwnerDraw(long Hdc, Addflow5lib_tlb::afLink* link, long* Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.LinkOwnerDraw(Hdc, link, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

template <class T> void
TEvents_AddFlow<T>::Fire_DiagramOwnerDraw(long Hdc, long* Flags)
{
  T * pT = (T*)this;
  pT->Lock();
  IUnknown ** pp = m_vec.begin();
  while (pp < m_vec.end())
  {
    if (*pp != NULL)
    {
      m_EventIntfObj.Attach(*pp);
      m_EventIntfObj.DiagramOwnerDraw(Hdc, Flags);
      m_EventIntfObj.Attach(0);
    }
    pp++;
  }
  pT->Unlock();
}

#endif  //   __TLB_NO_EVENT_WRAPPERS

};     // namespace Addflow5lib_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Addflow5lib_tlb;
#endif

#pragma option pop

#endif // AddFlow5Lib_TLBH
